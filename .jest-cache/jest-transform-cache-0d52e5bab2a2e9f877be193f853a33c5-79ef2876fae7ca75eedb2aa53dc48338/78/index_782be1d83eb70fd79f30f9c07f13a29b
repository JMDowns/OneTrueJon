0cb7556a4e2115f5d584cdcb4418c83d
'use strict';

var callBound = require('call-bind/callBound');
var hasToStringTag = require('has-tostringtag/shams')();
var has;
var $exec;
var isRegexMarker;
var badStringifier;
if (hasToStringTag) {
  has = callBound('Object.prototype.hasOwnProperty');
  $exec = callBound('RegExp.prototype.exec');
  isRegexMarker = {};
  var throwRegexMarker = function () {
    throw isRegexMarker;
  };
  badStringifier = {
    toString: throwRegexMarker,
    valueOf: throwRegexMarker
  };
  if (typeof Symbol.toPrimitive === 'symbol') {
    badStringifier[Symbol.toPrimitive] = throwRegexMarker;
  }
}
var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';
module.exports = hasToStringTag
// eslint-disable-next-line consistent-return
? function isRegex(value) {
  if (!value || typeof value !== 'object') {
    return false;
  }
  var descriptor = gOPD(value, 'lastIndex');
  var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
  if (!hasLastIndexDataProperty) {
    return false;
  }
  try {
    $exec(value, badStringifier);
  } catch (e) {
    return e === isRegexMarker;
  }
} : function isRegex(value) {
  // In older browsers, typeof regex incorrectly returns 'function'
  if (!value || typeof value !== 'object' && typeof value !== 'function') {
    return false;
  }
  return $toString(value) === regexClass;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxsQm91bmQiLCJyZXF1aXJlIiwiaGFzVG9TdHJpbmdUYWciLCJoYXMiLCIkZXhlYyIsImlzUmVnZXhNYXJrZXIiLCJiYWRTdHJpbmdpZmllciIsInRocm93UmVnZXhNYXJrZXIiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIiR0b1N0cmluZyIsImdPUEQiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyZWdleENsYXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUmVnZXgiLCJ2YWx1ZSIsImRlc2NyaXB0b3IiLCJoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkiLCJlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBoYXM7XG52YXIgJGV4ZWM7XG52YXIgaXNSZWdleE1hcmtlcjtcbnZhciBiYWRTdHJpbmdpZmllcjtcblxuaWYgKGhhc1RvU3RyaW5nVGFnKSB7XG5cdGhhcyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eScpO1xuXHQkZXhlYyA9IGNhbGxCb3VuZCgnUmVnRXhwLnByb3RvdHlwZS5leGVjJyk7XG5cdGlzUmVnZXhNYXJrZXIgPSB7fTtcblxuXHR2YXIgdGhyb3dSZWdleE1hcmtlciA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aHJvdyBpc1JlZ2V4TWFya2VyO1xuXHR9O1xuXHRiYWRTdHJpbmdpZmllciA9IHtcblx0XHR0b1N0cmluZzogdGhyb3dSZWdleE1hcmtlcixcblx0XHR2YWx1ZU9mOiB0aHJvd1JlZ2V4TWFya2VyXG5cdH07XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wudG9QcmltaXRpdmUgPT09ICdzeW1ib2wnKSB7XG5cdFx0YmFkU3RyaW5naWZpZXJbU3ltYm9sLnRvUHJpbWl0aXZlXSA9IHRocm93UmVnZXhNYXJrZXI7XG5cdH1cbn1cblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJztcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNUb1N0cmluZ1RhZ1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0PyBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdFx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHZhbHVlLCAnbGFzdEluZGV4Jyk7XG5cdFx0dmFyIGhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuXHRcdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdCRleGVjKHZhbHVlLCBiYWRTdHJpbmdpZmllcik7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGUgPT09IGlzUmVnZXhNYXJrZXI7XG5cdFx0fVxuXHR9XG5cdDogZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRcdC8vIEluIG9sZGVyIGJyb3dzZXJzLCB0eXBlb2YgcmVnZXggaW5jb3JyZWN0bHkgcmV0dXJucyAnZnVuY3Rpb24nXG5cdFx0aWYgKCF2YWx1ZSB8fCAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09IHJlZ2V4Q2xhc3M7XG5cdH07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsU0FBUyxHQUFHQyxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDOUMsSUFBSUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELElBQUlFLEdBQUc7QUFDUCxJQUFJQyxLQUFLO0FBQ1QsSUFBSUMsYUFBYTtBQUNqQixJQUFJQyxjQUFjO0FBRWxCLElBQUlKLGNBQWMsRUFBRTtFQUNuQkMsR0FBRyxHQUFHSCxTQUFTLENBQUMsaUNBQWlDLENBQUM7RUFDbERJLEtBQUssR0FBR0osU0FBUyxDQUFDLHVCQUF1QixDQUFDO0VBQzFDSyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0VBRWxCLElBQUlFLGdCQUFnQixHQUFHLFNBQUFBLENBQUEsRUFBWTtJQUNsQyxNQUFNRixhQUFhO0VBQ3BCLENBQUM7RUFDREMsY0FBYyxHQUFHO0lBQ2hCRSxRQUFRLEVBQUVELGdCQUFnQjtJQUMxQkUsT0FBTyxFQUFFRjtFQUNWLENBQUM7RUFFRCxJQUFJLE9BQU9HLE1BQU0sQ0FBQ0MsV0FBVyxLQUFLLFFBQVEsRUFBRTtJQUMzQ0wsY0FBYyxDQUFDSSxNQUFNLENBQUNDLFdBQVcsQ0FBQyxHQUFHSixnQkFBZ0I7RUFDdEQ7QUFDRDtBQUVBLElBQUlLLFNBQVMsR0FBR1osU0FBUyxDQUFDLDJCQUEyQixDQUFDO0FBQ3RELElBQUlhLElBQUksR0FBR0MsTUFBTSxDQUFDQyx3QkFBd0I7QUFDMUMsSUFBSUMsVUFBVSxHQUFHLGlCQUFpQjtBQUVsQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdoQjtBQUNoQjtBQUFBLEVBQ0UsU0FBU2lCLE9BQU9BLENBQUNDLEtBQUssRUFBRTtFQUN6QixJQUFJLENBQUNBLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO0lBQ3hDLE9BQU8sS0FBSztFQUNiO0VBRUEsSUFBSUMsVUFBVSxHQUFHUixJQUFJLENBQUNPLEtBQUssRUFBRSxXQUFXLENBQUM7RUFDekMsSUFBSUUsd0JBQXdCLEdBQUdELFVBQVUsSUFBSWxCLEdBQUcsQ0FBQ2tCLFVBQVUsRUFBRSxPQUFPLENBQUM7RUFDckUsSUFBSSxDQUFDQyx3QkFBd0IsRUFBRTtJQUM5QixPQUFPLEtBQUs7RUFDYjtFQUVBLElBQUk7SUFDSGxCLEtBQUssQ0FBQ2dCLEtBQUssRUFBRWQsY0FBYyxDQUFDO0VBQzdCLENBQUMsQ0FBQyxPQUFPaUIsQ0FBQyxFQUFFO0lBQ1gsT0FBT0EsQ0FBQyxLQUFLbEIsYUFBYTtFQUMzQjtBQUNELENBQUMsR0FDQyxTQUFTYyxPQUFPQSxDQUFDQyxLQUFLLEVBQUU7RUFDekI7RUFDQSxJQUFJLENBQUNBLEtBQUssSUFBSyxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU9BLEtBQUssS0FBSyxVQUFXLEVBQUU7SUFDekUsT0FBTyxLQUFLO0VBQ2I7RUFFQSxPQUFPUixTQUFTLENBQUNRLEtBQUssQ0FBQyxLQUFLSixVQUFVO0FBQ3ZDLENBQUMifQ==