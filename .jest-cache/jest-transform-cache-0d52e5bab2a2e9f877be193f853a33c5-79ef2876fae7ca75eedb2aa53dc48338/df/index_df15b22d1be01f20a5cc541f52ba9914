3a9c332cef8f57c2a181af49d032682b
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = require('define-data-property');
var isFunction = function (fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};
var supportsDescriptors = require('has-property-descriptors')();
var defineProperty = function (object, name, value, predicate) {
  if (name in object) {
    if (predicate === true) {
      if (object[name] === value) {
        return;
      }
    } else if (!isFunction(predicate) || !predicate()) {
      return;
    }
  }
  if (supportsDescriptors) {
    defineDataProperty(object, name, value, true);
  } else {
    defineDataProperty(object, name, value);
  }
};
var defineProperties = function (object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);
  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }
  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};
defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJrZXlzIiwicmVxdWlyZSIsImhhc1N5bWJvbHMiLCJTeW1ib2wiLCJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY29uY2F0IiwiQXJyYXkiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJpc0Z1bmN0aW9uIiwiZm4iLCJjYWxsIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnR5Iiwib2JqZWN0IiwibmFtZSIsInZhbHVlIiwicHJlZGljYXRlIiwiZGVmaW5lUHJvcGVydGllcyIsIm1hcCIsInByZWRpY2F0ZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZGVmaW5lLWRhdGEtcHJvcGVydHknKTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0ZGVmaW5lRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUsIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxJQUFJLEdBQUdDLE9B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