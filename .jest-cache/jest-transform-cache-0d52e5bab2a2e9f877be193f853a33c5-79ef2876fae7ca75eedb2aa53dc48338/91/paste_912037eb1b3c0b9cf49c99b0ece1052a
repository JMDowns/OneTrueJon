c90c76656705d4dda5747b3a57f2c4dc
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('../utils/click/isClickableInput.js');
var DataTransfer = require('../utils/dataTransfer/DataTransfer.js');
var Clipboard = require('../utils/dataTransfer/Clipboard.js');
require('../utils/edit/isEditable.js');
require('../utils/edit/maxLength.js');
var getWindow = require('../utils/misc/getWindow.js');
require('../utils/keyDef/readNextDescriptor.js');
require('../utils/misc/level.js');
require('../options.js');
async function paste(clipboardData) {
  const doc = this.config.document;
  var _doc_activeElement;
  const target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : /* istanbul ignore next */doc.body;
  var _ref;
  const dataTransfer = (_ref = typeof clipboardData === 'string' ? getClipboardDataFromString(doc, clipboardData) : clipboardData) !== null && _ref !== void 0 ? _ref : await Clipboard.readDataTransferFromClipboard(doc).catch(() => {
    throw new Error('`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.');
  });
  this.dispatchUIEvent(target, 'paste', {
    clipboardData: dataTransfer
  });
}
function getClipboardDataFromString(doc, text) {
  const dt = DataTransfer.createDataTransfer(getWindow.getWindow(doc));
  dt.setData('text', text);
  return dt;
}
exports.paste = paste;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJEYXRhVHJhbnNmZXIiLCJDbGlwYm9hcmQiLCJnZXRXaW5kb3ciLCJwYXN0ZSIsImNsaXBib2FyZERhdGEiLCJkb2MiLCJjb25maWciLCJkb2N1bWVudCIsIl9kb2NfYWN0aXZlRWxlbWVudCIsInRhcmdldCIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiX3JlZiIsImRhdGFUcmFuc2ZlciIsImdldENsaXBib2FyZERhdGFGcm9tU3RyaW5nIiwicmVhZERhdGFUcmFuc2ZlckZyb21DbGlwYm9hcmQiLCJjYXRjaCIsIkVycm9yIiwiZGlzcGF0Y2hVSUV2ZW50IiwidGV4dCIsImR0IiwiY3JlYXRlRGF0YVRyYW5zZmVyIiwic2V0RGF0YSJdLCJzb3VyY2VzIjpbInBhc3RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxucmVxdWlyZSgnLi4vdXRpbHMvY2xpY2svaXNDbGlja2FibGVJbnB1dC5qcycpO1xudmFyIERhdGFUcmFuc2ZlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9EYXRhVHJhbnNmZXIuanMnKTtcbnZhciBDbGlwYm9hcmQgPSByZXF1aXJlKCcuLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG52YXIgZ2V0V2luZG93ID0gcmVxdWlyZSgnLi4vdXRpbHMvbWlzYy9nZXRXaW5kb3cuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL21pc2MvbGV2ZWwuanMnKTtcbnJlcXVpcmUoJy4uL29wdGlvbnMuanMnKTtcblxuYXN5bmMgZnVuY3Rpb24gcGFzdGUoY2xpcGJvYXJkRGF0YSkge1xuICAgIGNvbnN0IGRvYyA9IHRoaXMuY29uZmlnLmRvY3VtZW50O1xuICAgIHZhciBfZG9jX2FjdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgdGFyZ2V0ID0gKF9kb2NfYWN0aXZlRWxlbWVudCA9IGRvYy5hY3RpdmVFbGVtZW50KSAhPT0gbnVsbCAmJiBfZG9jX2FjdGl2ZUVsZW1lbnQgIT09IHZvaWQgMCA/IF9kb2NfYWN0aXZlRWxlbWVudCA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGRvYy5ib2R5O1xuICAgIHZhciBfcmVmO1xuICAgIGNvbnN0IGRhdGFUcmFuc2ZlciA9IChfcmVmID0gdHlwZW9mIGNsaXBib2FyZERhdGEgPT09ICdzdHJpbmcnID8gZ2V0Q2xpcGJvYXJkRGF0YUZyb21TdHJpbmcoZG9jLCBjbGlwYm9hcmREYXRhKSA6IGNsaXBib2FyZERhdGEpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBhd2FpdCBDbGlwYm9hcmQucmVhZERhdGFUcmFuc2ZlckZyb21DbGlwYm9hcmQoZG9jKS5jYXRjaCgoKT0+e1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B1c2VyRXZlbnQucGFzdGUoKWAgd2l0aG91dCBgY2xpcGJvYXJkRGF0YWAgcmVxdWlyZXMgdGhlIGBDbGlwYm9hcmRBUElgIHRvIGJlIGF2YWlsYWJsZS4nKTtcbiAgICB9KTtcbiAgICB0aGlzLmRpc3BhdGNoVUlFdmVudCh0YXJnZXQsICdwYXN0ZScsIHtcbiAgICAgICAgY2xpcGJvYXJkRGF0YTogZGF0YVRyYW5zZmVyXG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRDbGlwYm9hcmREYXRhRnJvbVN0cmluZyhkb2MsIHRleHQpIHtcbiAgICBjb25zdCBkdCA9IERhdGFUcmFuc2Zlci5jcmVhdGVEYXRhVHJhbnNmZXIoZ2V0V2luZG93LmdldFdpbmRvdyhkb2MpKTtcbiAgICBkdC5zZXREYXRhKCd0ZXh0JywgdGV4dCk7XG4gICAgcmV0dXJuIGR0O1xufVxuXG5leHBvcnRzLnBhc3RlID0gcGFzdGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUU3REMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQzdDLElBQUlDLFlBQVksR0FBR0QsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ25FLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQzdEQSxPQUFPLENBQUMsNkJBQTZCLENBQUM7QUFDdENBLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztBQUNyQyxJQUFJRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztBQUNyREEsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hEQSxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDakNBLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFeEIsZUFBZUksS0FBS0EsQ0FBQ0MsYUFBYSxFQUFFO0VBQ2hDLE1BQU1DLEdBQUcsR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsUUFBUTtFQUNoQyxJQUFJQyxrQkFBa0I7RUFDdEIsTUFBTUMsTUFBTSxHQUFHLENBQUNELGtCQUFrQixHQUFHSCxHQUFHLENBQUNLLGFBQWEsTUFBTSxJQUFJLElBQUlGLGtCQUFrQixLQUFLLEtBQUssQ0FBQyxHQUFHQSxrQkFBa0IsR0FBRywwQkFBMkJILEdBQUcsQ0FBQ00sSUFBSTtFQUM1SixJQUFJQyxJQUFJO0VBQ1IsTUFBTUMsWUFBWSxHQUFHLENBQUNELElBQUksR0FBRyxPQUFPUixhQUFhLEtBQUssUUFBUSxHQUFHVSwwQkFBMEIsQ0FBQ1QsR0FBRyxFQUFFRCxhQUFhLENBQUMsR0FBR0EsYUFBYSxNQUFNLElBQUksSUFBSVEsSUFBSSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxJQUFJLEdBQUcsTUFBTVgsU0FBUyxDQUFDYyw2QkFBNkIsQ0FBQ1YsR0FBRyxDQUFDLENBQUNXLEtBQUssQ0FBQyxNQUFJO0lBQy9OLE1BQU0sSUFBSUMsS0FBSyxDQUFDLDBGQUEwRixDQUFDO0VBQy9HLENBQUMsQ0FBQztFQUNGLElBQUksQ0FBQ0MsZUFBZSxDQUFDVCxNQUFNLEVBQUUsT0FBTyxFQUFFO0lBQ2xDTCxhQUFhLEVBQUVTO0VBQ25CLENBQUMsQ0FBQztBQUNOO0FBQ0EsU0FBU0MsMEJBQTBCQSxDQUFDVCxHQUFHLEVBQUVjLElBQUksRUFBRTtFQUMzQyxNQUFNQyxFQUFFLEdBQUdwQixZQUFZLENBQUNxQixrQkFBa0IsQ0FBQ25CLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDRyxHQUFHLENBQUMsQ0FBQztFQUNwRWUsRUFBRSxDQUFDRSxPQUFPLENBQUMsTUFBTSxFQUFFSCxJQUFJLENBQUM7RUFDeEIsT0FBT0MsRUFBRTtBQUNiO0FBRUF2QixPQUFPLENBQUNNLEtBQUssR0FBR0EsS0FBSyJ9