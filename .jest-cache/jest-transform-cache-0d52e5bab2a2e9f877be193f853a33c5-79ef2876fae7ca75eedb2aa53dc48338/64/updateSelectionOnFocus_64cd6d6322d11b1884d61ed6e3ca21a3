e0d17202fa4827d7e89105a3851d5fac
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
var selection = require('../../utils/focus/selection.js');
require('../../utils/keyDef/readNextDescriptor.js');
require('../../utils/misc/level.js');
require('../../options.js');

/**
 * Reset the Document Selection when moving focus into an element
 * with own selection implementation.
 */
function updateSelectionOnFocus(element) {
  const selection$1 = element.ownerDocument.getSelection();
  /* istanbul ignore if */
  if (!(selection$1 === null || selection$1 === void 0 ? void 0 : selection$1.focusNode)) {
    return;
  }
  // If the focus moves inside an element with own selection implementation,
  // the document selection will be this element.
  // But if the focused element is inside a contenteditable,
  // 1) a collapsed selection will be retained.
  // 2) other selections will be replaced by a cursor
  //  2.a) at the start of the first child if it is a text node
  //  2.b) at the start of the contenteditable.
  if (selection.hasOwnSelection(element)) {
    const contenteditable = isContentEditable.getContentEditable(selection$1.focusNode);
    if (contenteditable) {
      if (!selection$1.isCollapsed) {
        var _contenteditable_firstChild;
        const focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === void 0 ? void 0 : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;
        selection$1.setBaseAndExtent(focusNode, 0, focusNode, 0);
      }
    } else {
      selection$1.setBaseAndExtent(element, 0, element, 0);
    }
  }
}
exports.updateSelectionOnFocus = updateSelectionOnFocus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInNlbGVjdGlvbiIsInVwZGF0ZVNlbGVjdGlvbk9uRm9jdXMiLCJlbGVtZW50Iiwic2VsZWN0aW9uJDEiLCJvd25lckRvY3VtZW50IiwiZ2V0U2VsZWN0aW9uIiwiZm9jdXNOb2RlIiwiaGFzT3duU2VsZWN0aW9uIiwiY29udGVudGVkaXRhYmxlIiwiZ2V0Q29udGVudEVkaXRhYmxlIiwiaXNDb2xsYXBzZWQiLCJfY29udGVudGVkaXRhYmxlX2ZpcnN0Q2hpbGQiLCJmaXJzdENoaWxkIiwibm9kZVR5cGUiLCJzZXRCYXNlQW5kRXh0ZW50Il0sInNvdXJjZXMiOlsidXBkYXRlU2VsZWN0aW9uT25Gb2N1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2NsaWNrL2lzQ2xpY2thYmxlSW5wdXQuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBpc0NvbnRlbnRFZGl0YWJsZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvaXNDb250ZW50RWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvaXNFZGl0YWJsZS5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvZWRpdC9tYXhMZW5ndGguanMnKTtcbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvaGVscGVycy5qcycpO1xudmFyIHNlbGVjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2ZvY3VzL3NlbGVjdGlvbi5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMva2V5RGVmL3JlYWROZXh0RGVzY3JpcHRvci5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvbWlzYy9sZXZlbC5qcycpO1xucmVxdWlyZSgnLi4vLi4vb3B0aW9ucy5qcycpO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBEb2N1bWVudCBTZWxlY3Rpb24gd2hlbiBtb3ZpbmcgZm9jdXMgaW50byBhbiBlbGVtZW50XG4gKiB3aXRoIG93biBzZWxlY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gKi8gZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uT25Gb2N1cyhlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uJDEgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovIGlmICghKHNlbGVjdGlvbiQxID09PSBudWxsIHx8IHNlbGVjdGlvbiQxID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxlY3Rpb24kMS5mb2N1c05vZGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGZvY3VzIG1vdmVzIGluc2lkZSBhbiBlbGVtZW50IHdpdGggb3duIHNlbGVjdGlvbiBpbXBsZW1lbnRhdGlvbixcbiAgICAvLyB0aGUgZG9jdW1lbnQgc2VsZWN0aW9uIHdpbGwgYmUgdGhpcyBlbGVtZW50LlxuICAgIC8vIEJ1dCBpZiB0aGUgZm9jdXNlZCBlbGVtZW50IGlzIGluc2lkZSBhIGNvbnRlbnRlZGl0YWJsZSxcbiAgICAvLyAxKSBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gd2lsbCBiZSByZXRhaW5lZC5cbiAgICAvLyAyKSBvdGhlciBzZWxlY3Rpb25zIHdpbGwgYmUgcmVwbGFjZWQgYnkgYSBjdXJzb3JcbiAgICAvLyAgMi5hKSBhdCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGNoaWxkIGlmIGl0IGlzIGEgdGV4dCBub2RlXG4gICAgLy8gIDIuYikgYXQgdGhlIHN0YXJ0IG9mIHRoZSBjb250ZW50ZWRpdGFibGUuXG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24oZWxlbWVudCkpIHtcbiAgICAgICAgY29uc3QgY29udGVudGVkaXRhYmxlID0gaXNDb250ZW50RWRpdGFibGUuZ2V0Q29udGVudEVkaXRhYmxlKHNlbGVjdGlvbiQxLmZvY3VzTm9kZSk7XG4gICAgICAgIGlmIChjb250ZW50ZWRpdGFibGUpIHtcbiAgICAgICAgICAgIGlmICghc2VsZWN0aW9uJDEuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzTm9kZSA9ICgoX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkID0gY29udGVudGVkaXRhYmxlLmZpcnN0Q2hpbGQpID09PSBudWxsIHx8IF9jb250ZW50ZWRpdGFibGVfZmlyc3RDaGlsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvbnRlbnRlZGl0YWJsZV9maXJzdENoaWxkLm5vZGVUeXBlKSA9PT0gMyA/IGNvbnRlbnRlZGl0YWJsZS5maXJzdENoaWxkIDogY29udGVudGVkaXRhYmxlO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiQxLnNldEJhc2VBbmRFeHRlbnQoZm9jdXNOb2RlLCAwLCBmb2N1c05vZGUsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0aW9uJDEuc2V0QmFzZUFuZEV4dGVudChlbGVtZW50LCAwLCBlbGVtZW50LCAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0cy51cGRhdGVTZWxlY3Rpb25PbkZvY3VzID0gdXBkYXRlU2VsZWN0aW9uT25Gb2N1cztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBRTdEQyxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaERBLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUNoRCxJQUFJQyxpQkFBaUIsR0FBR0QsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ3hFQSxPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFDekNBLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztBQUN4Q0EsT0FBTyxDQUFDLHNDQUFzQyxDQUFDO0FBQy9DLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQ3pEQSxPQUFPLENBQUMsMENBQTBDLENBQUM7QUFDbkRBLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQ0EsT0FBTyxDQUFDLGtCQUFrQixDQUFDOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUFJLFNBQVNHLHNCQUFzQkEsQ0FBQ0MsT0FBTyxFQUFFO0VBQ3pDLE1BQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDRSxhQUFhLENBQUNDLFlBQVksQ0FBQyxDQUFDO0VBQ3hEO0VBQXlCLElBQUksRUFBRUYsV0FBVyxLQUFLLElBQUksSUFBSUEsV0FBVyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxXQUFXLENBQUNHLFNBQVMsQ0FBQyxFQUFFO0lBQzdHO0VBQ0o7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUlOLFNBQVMsQ0FBQ08sZUFBZSxDQUFDTCxPQUFPLENBQUMsRUFBRTtJQUNwQyxNQUFNTSxlQUFlLEdBQUdULGlCQUFpQixDQUFDVSxrQkFBa0IsQ0FBQ04sV0FBVyxDQUFDRyxTQUFTLENBQUM7SUFDbkYsSUFBSUUsZUFBZSxFQUFFO01BQ2pCLElBQUksQ0FBQ0wsV0FBVyxDQUFDTyxXQUFXLEVBQUU7UUFDMUIsSUFBSUMsMkJBQTJCO1FBQy9CLE1BQU1MLFNBQVMsR0FBRyxDQUFDLENBQUNLLDJCQUEyQixHQUFHSCxlQUFlLENBQUNJLFVBQVUsTUFBTSxJQUFJLElBQUlELDJCQUEyQixLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSwyQkFBMkIsQ0FBQ0UsUUFBUSxNQUFNLENBQUMsR0FBR0wsZUFBZSxDQUFDSSxVQUFVLEdBQUdKLGVBQWU7UUFDdE9MLFdBQVcsQ0FBQ1csZ0JBQWdCLENBQUNSLFNBQVMsRUFBRSxDQUFDLEVBQUVBLFNBQVMsRUFBRSxDQUFDLENBQUM7TUFDNUQ7SUFDSixDQUFDLE1BQU07TUFDSEgsV0FBVyxDQUFDVyxnQkFBZ0IsQ0FBQ1osT0FBTyxFQUFFLENBQUMsRUFBRUEsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN4RDtFQUNKO0FBQ0o7QUFFQU4sT0FBTyxDQUFDSyxzQkFBc0IsR0FBR0Esc0JBQXNCIn0=