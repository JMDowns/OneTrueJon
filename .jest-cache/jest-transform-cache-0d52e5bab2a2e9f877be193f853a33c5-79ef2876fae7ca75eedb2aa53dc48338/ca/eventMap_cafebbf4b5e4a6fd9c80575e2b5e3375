4a616e68fdd5e7d2f1922e97caf9c6b6
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var named = require('@testing-library/dom/dist/event-map.js');
function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}
var named__namespace = /*#__PURE__*/_interopNamespace(named);
const eventMap = {
  ...named__namespace.eventMap,
  click: {
    EventType: 'PointerEvent',
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  auxclick: {
    EventType: 'PointerEvent',
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  contextmenu: {
    EventType: 'PointerEvent',
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  beforeInput: {
    EventType: 'InputEvent',
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  }
};
const eventMapKeys = Object.fromEntries(Object.keys(eventMap).map(k => [k.toLowerCase(), k]));
function getEventClass(type) {
  const k = eventMapKeys[type];
  return k && eventMap[k].EventType;
}
const mouseEvents = ['MouseEvent', 'PointerEvent'];
function isMouseEvent(type) {
  return mouseEvents.includes(getEventClass(type));
}
function isKeyboardEvent(type) {
  return getEventClass(type) === 'KeyboardEvent';
}
exports.eventMap = eventMap;
exports.eventMapKeys = eventMapKeys;
exports.isKeyboardEvent = isKeyboardEvent;
exports.isMouseEvent = isMouseEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5hbWVkIiwicmVxdWlyZSIsIl9pbnRlcm9wTmFtZXNwYWNlIiwiZSIsIl9fZXNNb2R1bGUiLCJuIiwiY3JlYXRlIiwia2V5cyIsImZvckVhY2giLCJrIiwiZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsImVudW1lcmFibGUiLCJmcmVlemUiLCJuYW1lZF9fbmFtZXNwYWNlIiwiZXZlbnRNYXAiLCJjbGljayIsIkV2ZW50VHlwZSIsImRlZmF1bHRJbml0IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsImF1eGNsaWNrIiwiY29udGV4dG1lbnUiLCJiZWZvcmVJbnB1dCIsImV2ZW50TWFwS2V5cyIsImZyb21FbnRyaWVzIiwibWFwIiwidG9Mb3dlckNhc2UiLCJnZXRFdmVudENsYXNzIiwidHlwZSIsIm1vdXNlRXZlbnRzIiwiaXNNb3VzZUV2ZW50IiwiaW5jbHVkZXMiLCJpc0tleWJvYXJkRXZlbnQiXSwic291cmNlcyI6WyJldmVudE1hcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBuYW1lZCA9IHJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvZXZlbnQtbWFwLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlKGUpIHtcbiAgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTtcbiAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoZSkge1xuICAgIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmIChrICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgdmFyIGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIGspO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgaywgZC5nZXQgPyBkIDoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlW2tdOyB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG5bXCJkZWZhdWx0XCJdID0gZTtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobik7XG59XG5cbnZhciBuYW1lZF9fbmFtZXNwYWNlID0gLyojX19QVVJFX18qL19pbnRlcm9wTmFtZXNwYWNlKG5hbWVkKTtcblxuY29uc3QgZXZlbnRNYXAgPSB7XG4gICAgLi4ubmFtZWRfX25hbWVzcGFjZS5ldmVudE1hcCxcbiAgICBjbGljazoge1xuICAgICAgICBFdmVudFR5cGU6ICdQb2ludGVyRXZlbnQnLFxuICAgICAgICBkZWZhdWx0SW5pdDoge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhdXhjbGljazoge1xuICAgICAgICBFdmVudFR5cGU6ICdQb2ludGVyRXZlbnQnLFxuICAgICAgICBkZWZhdWx0SW5pdDoge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb250ZXh0bWVudToge1xuICAgICAgICBFdmVudFR5cGU6ICdQb2ludGVyRXZlbnQnLFxuICAgICAgICBkZWZhdWx0SW5pdDoge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVJbnB1dDoge1xuICAgICAgICBFdmVudFR5cGU6ICdJbnB1dEV2ZW50JyxcbiAgICAgICAgZGVmYXVsdEluaXQ6IHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29tcG9zZWQ6IHRydWVcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBldmVudE1hcEtleXMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmtleXMoZXZlbnRNYXApLm1hcCgoayk9PltcbiAgICAgICAgay50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBrXG4gICAgXSkpO1xuZnVuY3Rpb24gZ2V0RXZlbnRDbGFzcyh0eXBlKSB7XG4gICAgY29uc3QgayA9IGV2ZW50TWFwS2V5c1t0eXBlXTtcbiAgICByZXR1cm4gayAmJiBldmVudE1hcFtrXS5FdmVudFR5cGU7XG59XG5jb25zdCBtb3VzZUV2ZW50cyA9IFtcbiAgICAnTW91c2VFdmVudCcsXG4gICAgJ1BvaW50ZXJFdmVudCdcbl07XG5mdW5jdGlvbiBpc01vdXNlRXZlbnQodHlwZSkge1xuICAgIHJldHVybiBtb3VzZUV2ZW50cy5pbmNsdWRlcyhnZXRFdmVudENsYXNzKHR5cGUpKTtcbn1cbmZ1bmN0aW9uIGlzS2V5Ym9hcmRFdmVudCh0eXBlKSB7XG4gICAgcmV0dXJuIGdldEV2ZW50Q2xhc3ModHlwZSkgPT09ICdLZXlib2FyZEV2ZW50Jztcbn1cblxuZXhwb3J0cy5ldmVudE1hcCA9IGV2ZW50TWFwO1xuZXhwb3J0cy5ldmVudE1hcEtleXMgPSBldmVudE1hcEtleXM7XG5leHBvcnRzLmlzS2V5Ym9hcmRFdmVudCA9IGlzS2V5Ym9hcmRFdmVudDtcbmV4cG9ydHMuaXNNb3VzZUV2ZW50ID0gaXNNb3VzZUV2ZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxL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