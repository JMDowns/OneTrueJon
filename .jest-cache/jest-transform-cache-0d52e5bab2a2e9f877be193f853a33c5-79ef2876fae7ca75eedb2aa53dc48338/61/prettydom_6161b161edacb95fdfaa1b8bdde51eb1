30e29afd1167a8fefc96c60dafeb72d4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logDOM = void 0;
exports.prettyDOM = prettyDOM;
exports.prettyFormat = void 0;
var prettyFormat = _interopRequireWildcard(require("pretty-format"));
exports.prettyFormat = prettyFormat;
var _DOMElementFilter = _interopRequireDefault(require("./DOMElementFilter"));
var _getUserCodeFrame = require("./get-user-code-frame");
var _helpers = require("./helpers");
var _config = require("./config");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const shouldHighlight = () => {
  let colors;
  try {
    var _process;
    colors = JSON.parse((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.COLORS);
  } catch (e) {
    // If this throws, process?.env?.COLORS wasn't parsable. Since we only
    // care about `true` or `false`, we can safely ignore the error.
  }
  if (typeof colors === 'boolean') {
    // If `colors` is set explicitly (both `true` and `false`), use that value.
    return colors;
  } else {
    // If `colors` is not set, colorize if we're in node.
    return typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;
  }
};
const {
  DOMCollection
} = prettyFormat.plugins;

// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants
const ELEMENT_NODE = 1;
const COMMENT_NODE = 8;

// https://github.com/facebook/jest/blob/615084195ae1ae61ddd56162c62bbdda17587569/packages/pretty-format/src/plugins/DOMElement.ts#L50
function filterCommentsAndDefaultIgnoreTagsTags(value) {
  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches((0, _config.getConfig)().defaultIgnore));
}
function prettyDOM(dom, maxLength, options = {}) {
  if (!dom) {
    dom = (0, _helpers.getDocument)().body;
  }
  if (typeof maxLength !== 'number') {
    maxLength = typeof process !== 'undefined' && process.env.DEBUG_PRINT_LIMIT || 7000;
  }
  if (maxLength === 0) {
    return '';
  }
  if (dom.documentElement) {
    dom = dom.documentElement;
  }
  let domTypeName = typeof dom;
  if (domTypeName === 'object') {
    domTypeName = dom.constructor.name;
  } else {
    // To don't fall with `in` operator
    dom = {};
  }
  if (!('outerHTML' in dom)) {
    throw new TypeError(`Expected an element or document but got ${domTypeName}`);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
    ...prettyFormatOptions
  } = options;
  const debugContent = prettyFormat.format(dom, {
    plugins: [(0, _DOMElementFilter.default)(filterNode), DOMCollection],
    printFunctionName: false,
    highlight: shouldHighlight(),
    ...prettyFormatOptions
  });
  return maxLength !== undefined && dom.outerHTML.length > maxLength ? `${debugContent.slice(0, maxLength)}...` : debugContent;
}
const logDOM = (...args) => {
  const userCodeFrame = (0, _getUserCodeFrame.getUserCodeFrame)();
  if (userCodeFrame) {
    console.log(`${prettyDOM(...args)}\n\n${userCodeFrame}`);
  } else {
    console.log(prettyDOM(...args));
  }
};
exports.logDOM = logDOM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9nRE9NIiwicHJldHR5RE9NIiwicHJldHR5Rm9ybWF0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfRE9NRWxlbWVudEZpbHRlciIsIl9nZXRVc2VyQ29kZUZyYW1lIiwiX2hlbHBlcnMiLCJfY29uZmlnIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJzaG91bGRIaWdobGlnaHQiLCJjb2xvcnMiLCJfcHJvY2VzcyIsIkpTT04iLCJwYXJzZSIsInByb2Nlc3MiLCJlbnYiLCJDT0xPUlMiLCJlIiwidmVyc2lvbnMiLCJ1bmRlZmluZWQiLCJub2RlIiwiRE9NQ29sbGVjdGlvbiIsInBsdWdpbnMiLCJFTEVNRU5UX05PREUiLCJDT01NRU5UX05PREUiLCJmaWx0ZXJDb21tZW50c0FuZERlZmF1bHRJZ25vcmVUYWdzVGFncyIsIm5vZGVUeXBlIiwibWF0Y2hlcyIsImdldENvbmZpZyIsImRlZmF1bHRJZ25vcmUiLCJkb20iLCJtYXhMZW5ndGgiLCJvcHRpb25zIiwiZ2V0RG9jdW1lbnQiLCJib2R5IiwiREVCVUdfUFJJTlRfTElNSVQiLCJkb2N1bWVudEVsZW1lbnQiLCJkb21UeXBlTmFtZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIlR5cGVFcnJvciIsImZpbHRlck5vZGUiLCJwcmV0dHlGb3JtYXRPcHRpb25zIiwiZGVidWdDb250ZW50IiwiZm9ybWF0IiwicHJpbnRGdW5jdGlvbk5hbWUiLCJoaWdobGlnaHQiLCJvdXRlckhUTUwiLCJsZW5ndGgiLCJzbGljZSIsImFyZ3MiLCJ1c2VyQ29kZUZyYW1lIiwiZ2V0VXNlckNvZGVGcmFtZSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJwcmV0dHktZG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmxvZ0RPTSA9IHZvaWQgMDtcbmV4cG9ydHMucHJldHR5RE9NID0gcHJldHR5RE9NO1xuZXhwb3J0cy5wcmV0dHlGb3JtYXQgPSB2b2lkIDA7XG52YXIgcHJldHR5Rm9ybWF0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByZXR0eS1mb3JtYXRcIikpO1xuZXhwb3J0cy5wcmV0dHlGb3JtYXQgPSBwcmV0dHlGb3JtYXQ7XG52YXIgX0RPTUVsZW1lbnRGaWx0ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RPTUVsZW1lbnRGaWx0ZXJcIikpO1xudmFyIF9nZXRVc2VyQ29kZUZyYW1lID0gcmVxdWlyZShcIi4vZ2V0LXVzZXItY29kZS1mcmFtZVwiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3Qgc2hvdWxkSGlnaGxpZ2h0ID0gKCkgPT4ge1xuICBsZXQgY29sb3JzO1xuICB0cnkge1xuICAgIHZhciBfcHJvY2VzcztcbiAgICBjb2xvcnMgPSBKU09OLnBhcnNlKChfcHJvY2VzcyA9IHByb2Nlc3MpID09IG51bGwgfHwgKF9wcm9jZXNzID0gX3Byb2Nlc3MuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX3Byb2Nlc3MuQ09MT1JTKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElmIHRoaXMgdGhyb3dzLCBwcm9jZXNzPy5lbnY/LkNPTE9SUyB3YXNuJ3QgcGFyc2FibGUuIFNpbmNlIHdlIG9ubHlcbiAgICAvLyBjYXJlIGFib3V0IGB0cnVlYCBvciBgZmFsc2VgLCB3ZSBjYW4gc2FmZWx5IGlnbm9yZSB0aGUgZXJyb3IuXG4gIH1cbiAgaWYgKHR5cGVvZiBjb2xvcnMgPT09ICdib29sZWFuJykge1xuICAgIC8vIElmIGBjb2xvcnNgIGlzIHNldCBleHBsaWNpdGx5IChib3RoIGB0cnVlYCBhbmQgYGZhbHNlYCksIHVzZSB0aGF0IHZhbHVlLlxuICAgIHJldHVybiBjb2xvcnM7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgYGNvbG9yc2AgaXMgbm90IHNldCwgY29sb3JpemUgaWYgd2UncmUgaW4gbm9kZS5cbiAgICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgIT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IHVuZGVmaW5lZDtcbiAgfVxufTtcbmNvbnN0IHtcbiAgRE9NQ29sbGVjdGlvblxufSA9IHByZXR0eUZvcm1hdC5wbHVnaW5zO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9ub2RlVHlwZSNub2RlX3R5cGVfY29uc3RhbnRzXG5jb25zdCBFTEVNRU5UX05PREUgPSAxO1xuY29uc3QgQ09NTUVOVF9OT0RFID0gODtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2plc3QvYmxvYi82MTUwODQxOTVhZTFhZTYxZGRkNTYxNjJjNjJiYmRkYTE3NTg3NTY5L3BhY2thZ2VzL3ByZXR0eS1mb3JtYXQvc3JjL3BsdWdpbnMvRE9NRWxlbWVudC50cyNMNTBcbmZ1bmN0aW9uIGZpbHRlckNvbW1lbnRzQW5kRGVmYXVsdElnbm9yZVRhZ3NUYWdzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSAhPT0gQ09NTUVOVF9OT0RFICYmICh2YWx1ZS5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFIHx8ICF2YWx1ZS5tYXRjaGVzKCgwLCBfY29uZmlnLmdldENvbmZpZykoKS5kZWZhdWx0SWdub3JlKSk7XG59XG5mdW5jdGlvbiBwcmV0dHlET00oZG9tLCBtYXhMZW5ndGgsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoIWRvbSkge1xuICAgIGRvbSA9ICgwLCBfaGVscGVycy5nZXREb2N1bWVudCkoKS5ib2R5O1xuICB9XG4gIGlmICh0eXBlb2YgbWF4TGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIG1heExlbmd0aCA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5ERUJVR19QUklOVF9MSU1JVCB8fCA3MDAwO1xuICB9XG4gIGlmIChtYXhMZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKGRvbS5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICBkb20gPSBkb20uZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIGxldCBkb21UeXBlTmFtZSA9IHR5cGVvZiBkb207XG4gIGlmIChkb21UeXBlTmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICBkb21UeXBlTmFtZSA9IGRvbS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGRvbid0IGZhbGwgd2l0aCBgaW5gIG9wZXJhdG9yXG4gICAgZG9tID0ge307XG4gIH1cbiAgaWYgKCEoJ291dGVySFRNTCcgaW4gZG9tKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgYnV0IGdvdCAke2RvbVR5cGVOYW1lfWApO1xuICB9XG4gIGNvbnN0IHtcbiAgICBmaWx0ZXJOb2RlID0gZmlsdGVyQ29tbWVudHNBbmREZWZhdWx0SWdub3JlVGFnc1RhZ3MsXG4gICAgLi4ucHJldHR5Rm9ybWF0T3B0aW9uc1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgZGVidWdDb250ZW50ID0gcHJldHR5Rm9ybWF0LmZvcm1hdChkb20sIHtcbiAgICBwbHVnaW5zOiBbKDAsIF9ET01FbGVtZW50RmlsdGVyLmRlZmF1bHQpKGZpbHRlck5vZGUpLCBET01Db2xsZWN0aW9uXSxcbiAgICBwcmludEZ1bmN0aW9uTmFtZTogZmFsc2UsXG4gICAgaGlnaGxpZ2h0OiBzaG91bGRIaWdobGlnaHQoKSxcbiAgICAuLi5wcmV0dHlGb3JtYXRPcHRpb25zXG4gIH0pO1xuICByZXR1cm4gbWF4TGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgZG9tLm91dGVySFRNTC5sZW5ndGggPiBtYXhMZW5ndGggPyBgJHtkZWJ1Z0NvbnRlbnQuc2xpY2UoMCwgbWF4TGVuZ3RoKX0uLi5gIDogZGVidWdDb250ZW50O1xufVxuY29uc3QgbG9nRE9NID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgdXNlckNvZGVGcmFtZSA9ICgwLCBfZ2V0VXNlckNvZGVGcmFtZS5nZXRVc2VyQ29kZUZyYW1lKSgpO1xuICBpZiAodXNlckNvZGVGcmFtZSkge1xuICAgIGNvbnNvbGUubG9nKGAke3ByZXR0eURPTSguLi5hcmdzKX1cXG5cXG4ke3VzZXJDb2RlRnJhbWV9YCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2cocHJldHR5RE9NKC4uLmFyZ3MpKTtcbiAgfVxufTtcbmV4cG9ydHMubG9nRE9NID0gbG9nRE9NOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUN2QkYsT0FBTyxDQUFDRyxTQUFTLEdBQUdBLFNBQVM7QUFDN0JILE9BQU8sQ0FBQ0ksWUFBWSxHQUFHLEtBQUssQ0FBQztBQUM3QixJQUFJQSxZQUFZLEdBQUdDLHVCQUF1QixDQUFDUixPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDcEVHLE9BQU8sQ0FBQ0ksWUFBWSxHQUFHQSxZQUFZO0FBQ25DLElBQUlFLGlCQUFpQixHQUFHVixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDN0UsSUFBSVUsaUJBQWlCLEdBQUdWLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUN4RCxJQUFJVyxRQUFRLEdBQUdYLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDbkMsSUFBSVksT0FBTyxHQUFHWixPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2pDLFNBQVNhLHdCQUF3QkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUUsSUFBSSxPQUFPQyxPQUFPLEtBQUssVUFBVSxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlDLGlCQUFpQixHQUFHLElBQUlELE9BQU8sQ0FBQyxDQUFDO0VBQUUsSUFBSUUsZ0JBQWdCLEdBQUcsSUFBSUYsT0FBTyxDQUFDLENBQUM7RUFBRSxPQUFPLENBQUNGLHdCQUF3QixHQUFHLFNBQUFBLENBQVVDLFdBQVcsRUFBRTtJQUFFLE9BQU9BLFdBQVcsR0FBR0csZ0JBQWdCLEdBQUdELGlCQUFpQjtFQUFFLENBQUMsRUFBRUYsV0FB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