d9dd2d1d9c8e35bbc4cb8a9332b34362
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

// It is not possible to create a real FileList programmatically.
// Therefore assigning `files` property with a programmatically created FileList results in an error.
// Just assigning the property (as per fireEvent) breaks the interweaving with the `value` property.
const fakeFiles = Symbol('files and value properties are mocked');
function restoreProperty(obj, prop, descriptor) {
  if (descriptor) {
    Object.defineProperty(obj, prop, descriptor);
  } else {
    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
    delete obj[prop];
  }
}
function setFiles(el, files) {
  var _el_fakeFiles;
  (_el_fakeFiles = el[fakeFiles]) === null || _el_fakeFiles === void 0 ? void 0 : _el_fakeFiles.restore();
  const typeDescr = Object.getOwnPropertyDescriptor(el, 'type');
  const valueDescr = Object.getOwnPropertyDescriptor(el, 'value');
  const filesDescr = Object.getOwnPropertyDescriptor(el, 'files');
  function restore() {
    restoreProperty(el, 'type', typeDescr);
    restoreProperty(el, 'value', valueDescr);
    restoreProperty(el, 'files', filesDescr);
  }
  el[fakeFiles] = {
    restore
  };
  Object.defineProperties(el, {
    files: {
      configurable: true,
      get: () => files
    },
    value: {
      configurable: true,
      get: () => files.length ? `C:\\fakepath\\${files[0].name}` : '',
      set(v) {
        if (v === '') {
          restore();
        } else {
          var _valueDescr_set;
          valueDescr === null || valueDescr === void 0 ? void 0 : (_valueDescr_set = valueDescr.set) === null || _valueDescr_set === void 0 ? void 0 : _valueDescr_set.call(el, v);
        }
      }
    },
    type: {
      configurable: true,
      get: () => 'file',
      set(v) {
        if (v !== 'file') {
          restore();
          el.type = v;
        }
      }
    }
  });
}
exports.setFiles = setFiles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZha2VGaWxlcyIsIlN5bWJvbCIsInJlc3RvcmVQcm9wZXJ0eSIsIm9iaiIsInByb3AiLCJkZXNjcmlwdG9yIiwic2V0RmlsZXMiLCJlbCIsImZpbGVzIiwiX2VsX2Zha2VGaWxlcyIsInJlc3RvcmUiLCJ0eXBlRGVzY3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ2YWx1ZURlc2NyIiwiZmlsZXNEZXNjciIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJnZXQiLCJsZW5ndGgiLCJuYW1lIiwic2V0IiwidiIsIl92YWx1ZURlc2NyX3NldCIsImNhbGwiLCJ0eXBlIl0sInNvdXJjZXMiOlsic2V0RmlsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBJdCBpcyBub3QgcG9zc2libGUgdG8gY3JlYXRlIGEgcmVhbCBGaWxlTGlzdCBwcm9ncmFtbWF0aWNhbGx5LlxuLy8gVGhlcmVmb3JlIGFzc2lnbmluZyBgZmlsZXNgIHByb3BlcnR5IHdpdGggYSBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgRmlsZUxpc3QgcmVzdWx0cyBpbiBhbiBlcnJvci5cbi8vIEp1c3QgYXNzaWduaW5nIHRoZSBwcm9wZXJ0eSAoYXMgcGVyIGZpcmVFdmVudCkgYnJlYWtzIHRoZSBpbnRlcndlYXZpbmcgd2l0aCB0aGUgYHZhbHVlYCBwcm9wZXJ0eS5cbmNvbnN0IGZha2VGaWxlcyA9IFN5bWJvbCgnZmlsZXMgYW5kIHZhbHVlIHByb3BlcnRpZXMgYXJlIG1vY2tlZCcpO1xuZnVuY3Rpb24gcmVzdG9yZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVzY3JpcHRvcikge1xuICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRGaWxlcyhlbCwgZmlsZXMpIHtcbiAgICB2YXIgX2VsX2Zha2VGaWxlcztcbiAgICAoX2VsX2Zha2VGaWxlcyA9IGVsW2Zha2VGaWxlc10pID09PSBudWxsIHx8IF9lbF9mYWtlRmlsZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbF9mYWtlRmlsZXMucmVzdG9yZSgpO1xuICAgIGNvbnN0IHR5cGVEZXNjciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICd0eXBlJyk7XG4gICAgY29uc3QgdmFsdWVEZXNjciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICd2YWx1ZScpO1xuICAgIGNvbnN0IGZpbGVzRGVzY3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVsLCAnZmlsZXMnKTtcbiAgICBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgICByZXN0b3JlUHJvcGVydHkoZWwsICd0eXBlJywgdHlwZURlc2NyKTtcbiAgICAgICAgcmVzdG9yZVByb3BlcnR5KGVsLCAndmFsdWUnLCB2YWx1ZURlc2NyKTtcbiAgICAgICAgcmVzdG9yZVByb3BlcnR5KGVsLCAnZmlsZXMnLCBmaWxlc0Rlc2NyKTtcbiAgICB9XG4gICAgZWxbZmFrZUZpbGVzXSA9IHtcbiAgICAgICAgcmVzdG9yZVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZWwsIHtcbiAgICAgICAgZmlsZXM6IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCk9PmZpbGVzXG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6ICgpPT5maWxlcy5sZW5ndGggPyBgQzpcXFxcZmFrZXBhdGhcXFxcJHtmaWxlc1swXS5uYW1lfWAgOiAnJyxcbiAgICAgICAgICAgIHNldCAodikge1xuICAgICAgICAgICAgICAgIGlmICh2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZURlc2NyX3NldDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVEZXNjciA9PT0gbnVsbCB8fCB2YWx1ZURlc2NyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3ZhbHVlRGVzY3Jfc2V0ID0gdmFsdWVEZXNjci5zZXQpID09PSBudWxsIHx8IF92YWx1ZURlc2NyX3NldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZhbHVlRGVzY3Jfc2V0LmNhbGwoZWwsIHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiAoKT0+J2ZpbGUnLFxuICAgICAgICAgICAgc2V0ICh2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgIT09ICdmaWxlJykge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnR5cGUgPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5leHBvcnRzLnNldEZpbGVzID0gc2V0RmlsZXM7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtB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