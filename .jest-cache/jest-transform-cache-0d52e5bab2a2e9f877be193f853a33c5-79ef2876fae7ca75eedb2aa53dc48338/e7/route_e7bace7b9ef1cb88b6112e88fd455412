7455791ad121da1c7ae51e2dd6b218eb
var conversions = require('./conversions');

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
  var graph = {};
  // https://jsperf.com/object-keys-vs-for-in-with-closure/3
  var models = Object.keys(conversions);
  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  }
  return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel]; // unshift -> queue -> pop

  graph[fromModel].distance = 0;
  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions[current]);
    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];
      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }
  return graph;
}
function link(from, to) {
  return function (args) {
    return to(from(args));
  };
}
function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }
  fn.conversion = path;
  return fn;
}
module.exports = function (fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models = Object.keys(graph);
  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];
    if (node.parent === null) {
      // no possible conversion, or this node is the source model.
      continue;
    }
    conversion[toModel] = wrapConversion(toModel, graph);
  }
  return conversion;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb252ZXJzaW9ucyIsInJlcXVpcmUiLCJidWlsZEdyYXBoIiwiZ3JhcGgiLCJtb2RlbHMiLCJPYmplY3QiLCJrZXlzIiwibGVuIiwibGVuZ3RoIiwiaSIsImRpc3RhbmNlIiwicGFyZW50IiwiZGVyaXZlQkZTIiwiZnJvbU1vZGVsIiwicXVldWUiLCJjdXJyZW50IiwicG9wIiwiYWRqYWNlbnRzIiwiYWRqYWNlbnQiLCJub2RlIiwidW5zaGlmdCIsImxpbmsiLCJmcm9tIiwidG8iLCJhcmdzIiwid3JhcENvbnZlcnNpb24iLCJ0b01vZGVsIiwicGF0aCIsImZuIiwiY3VyIiwiY29udmVyc2lvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJyb3V0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5cbi8qXG5cdHRoaXMgZnVuY3Rpb24gcm91dGVzIGEgbW9kZWwgdG8gYWxsIG90aGVyIG1vZGVscy5cblxuXHRhbGwgZnVuY3Rpb25zIHRoYXQgYXJlIHJvdXRlZCBoYXZlIGEgcHJvcGVydHkgYC5jb252ZXJzaW9uYCBhdHRhY2hlZFxuXHR0byB0aGUgcmV0dXJuZWQgc3ludGhldGljIGZ1bmN0aW9uLiBUaGlzIHByb3BlcnR5IGlzIGFuIGFycmF5XG5cdG9mIHN0cmluZ3MsIGVhY2ggd2l0aCB0aGUgc3RlcHMgaW4gYmV0d2VlbiB0aGUgJ2Zyb20nIGFuZCAndG8nXG5cdGNvbG9yIG1vZGVscyAoaW5jbHVzaXZlKS5cblxuXHRjb252ZXJzaW9ucyB0aGF0IGFyZSBub3QgcG9zc2libGUgc2ltcGx5IGFyZSBub3QgaW5jbHVkZWQuXG4qL1xuXG5mdW5jdGlvbiBidWlsZEdyYXBoKCkge1xuXHR2YXIgZ3JhcGggPSB7fTtcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL29iamVjdC1rZXlzLXZzLWZvci1pbi13aXRoLWNsb3N1cmUvM1xuXHR2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRncmFwaFttb2RlbHNbaV1dID0ge1xuXHRcdFx0Ly8gaHR0cDovL2pzcGVyZi5jb20vMS12cy1pbmZpbml0eVxuXHRcdFx0Ly8gbWljcm8tb3B0LCBidXQgdGhpcyBpcyBzaW1wbGUuXG5cdFx0XHRkaXN0YW5jZTogLTEsXG5cdFx0XHRwYXJlbnQ6IG51bGxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVhZHRoLWZpcnN0X3NlYXJjaFxuZnVuY3Rpb24gZGVyaXZlQkZTKGZyb21Nb2RlbCkge1xuXHR2YXIgZ3JhcGggPSBidWlsZEdyYXBoKCk7XG5cdHZhciBxdWV1ZSA9IFtmcm9tTW9kZWxdOyAvLyB1bnNoaWZ0IC0+IHF1ZXVlIC0+IHBvcFxuXG5cdGdyYXBoW2Zyb21Nb2RlbF0uZGlzdGFuY2UgPSAwO1xuXG5cdHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcblx0XHR2YXIgY3VycmVudCA9IHF1ZXVlLnBvcCgpO1xuXHRcdHZhciBhZGphY2VudHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9uc1tjdXJyZW50XSk7XG5cblx0XHRmb3IgKHZhciBsZW4gPSBhZGphY2VudHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR2YXIgYWRqYWNlbnQgPSBhZGphY2VudHNbaV07XG5cdFx0XHR2YXIgbm9kZSA9IGdyYXBoW2FkamFjZW50XTtcblxuXHRcdFx0aWYgKG5vZGUuZGlzdGFuY2UgPT09IC0xKSB7XG5cdFx0XHRcdG5vZGUuZGlzdGFuY2UgPSBncmFwaFtjdXJyZW50XS5kaXN0YW5jZSArIDE7XG5cdFx0XHRcdG5vZGUucGFyZW50ID0gY3VycmVudDtcblx0XHRcdFx0cXVldWUudW5zaGlmdChhZGphY2VudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG5mdW5jdGlvbiBsaW5rKGZyb20sIHRvKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoYXJncykge1xuXHRcdHJldHVybiB0byhmcm9tKGFyZ3MpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpIHtcblx0dmFyIHBhdGggPSBbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50LCB0b01vZGVsXTtcblx0dmFyIGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcblxuXHR2YXIgY3VyID0gZ3JhcGhbdG9Nb2RlbF0ucGFyZW50O1xuXHR3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcblx0XHRwYXRoLnVuc2hpZnQoZ3JhcGhbY3VyXS5wYXJlbnQpO1xuXHRcdGZuID0gbGluayhjb252ZXJzaW9uc1tncmFwaFtjdXJdLnBhcmVudF1bY3VyXSwgZm4pO1xuXHRcdGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuXHR9XG5cblx0Zm4uY29udmVyc2lvbiA9IHBhdGg7XG5cdHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGRlcml2ZUJGUyhmcm9tTW9kZWwpO1xuXHR2YXIgY29udmVyc2lvbiA9IHt9O1xuXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgdG9Nb2RlbCA9IG1vZGVsc1tpXTtcblx0XHR2YXIgbm9kZSA9IGdyYXBoW3RvTW9kZWxdO1xuXG5cdFx0aWYgKG5vZGUucGFyZW50ID09PSBudWxsKSB7XG5cdFx0XHQvLyBubyBwb3NzaWJsZSBjb252ZXJzaW9uLCBvciB0aGlzIG5vZGUgaXMgdGhlIHNvdXJjZSBtb2RlbC5cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnZlcnNpb25bdG9Nb2RlbF0gPSB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCk7XG5cdH1cblxuXHRyZXR1cm4gY29udmVyc2lvbjtcbn07XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQyxVQUFVQSxDQUFBLEVBQUc7RUFDckIsSUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUNkO0VBQ0EsSUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ04sV0FBVyxDQUFDO0VBRXJDLEtBQUssSUFBSU8sR0FBRyxHQUFHSCxNQUFNLENBQUNJLE1BQU0sRUFBRUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRixHQUFHLEVBQUVFLENBQUMsRUFBRSxFQUFFO0lBQ2xETixLQUFLLENBQUNDLE1BQU0sQ0FBQ0ssQ0FBQyxDQUFDLENBQUMsR0FBRztNQUNsQjtNQUNBO01BQ0FDLFFBQVEsRUFBRSxDQUFDLENBQUM7TUFDWkMsTUFBTSxFQUFFO0lBQ1QsQ0FBQztFQUNGO0VBRUEsT0FBT1IsS0FBSztBQUNiOztBQUVBO0FBQ0EsU0FBU1MsU0FBU0EsQ0FBQ0MsU0FBUyxFQUFFO0VBQzdCLElBQUlWLEtBQUssR0FBR0QsVUFBVSxDQUFDLENBQUM7RUFDeEIsSUFBSVksS0FBSyxHQUFHLENBQUNELFNBQVMsQ0FBQyxDQUFDLENBQUM7O0VBRXpCVixLQUFLLENBQUNVLFNBQVMsQ0FBQyxDQUFDSCxRQUFRLEdBQUcsQ0FBQztFQUU3QixPQUFPSSxLQUFLLENBQUNOLE1BQU0sRUFBRTtJQUNwQixJQUFJTyxPQUFPLEdBQUdELEtBQUssQ0FBQ0UsR0FBRyxDQUFDLENBQUM7SUFDekIsSUFBSUMsU0FBUyxHQUFHWixNQUFNLENBQUNDLElBQUksQ0FBQ04sV0FBVyxDQUFDZSxPQUFPLENBQUMsQ0FBQztJQUVq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