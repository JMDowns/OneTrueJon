8667c96921a7a3c01489a1fdc0f44217
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const UIValue = Symbol('Displayed value in UI');
const UISelection = Symbol('Displayed selection in UI');
const InitialValue = Symbol('Initial value to compare on blur');
function isUIValue(value) {
  return typeof value === 'object' && UIValue in value;
}
function isUISelectionStart(start) {
  return !!start && typeof start === 'object' && UISelection in start;
}
function setUIValue(element, value) {
  if (element[InitialValue] === undefined) {
    element[InitialValue] = element.value;
  }
  element[UIValue] = value;
  // eslint-disable-next-line no-new-wrappers
  element.value = Object.assign(new String(value), {
    [UIValue]: true
  });
}
function getUIValue(element) {
  return element[UIValue] === undefined ? element.value : String(element[UIValue]);
}
/** Flag the IDL value as clean. This does not change the value.*/
function setUIValueClean(element) {
  element[UIValue] = undefined;
}
function clearInitialValue(element) {
  element[InitialValue] = undefined;
}
function getInitialValue(element) {
  return element[InitialValue];
}
function setUISelectionRaw(element, selection) {
  element[UISelection] = selection;
}
function setUISelection(element, {
  focusOffset: focusOffsetParam,
  anchorOffset: anchorOffsetParam = focusOffsetParam
}, mode = 'replace') {
  const valueLength = getUIValue(element).length;
  const sanitizeOffset = o => Math.max(0, Math.min(valueLength, o));
  const anchorOffset = mode === 'replace' || element[UISelection] === undefined ? sanitizeOffset(anchorOffsetParam) : element[UISelection].anchorOffset;
  const focusOffset = sanitizeOffset(focusOffsetParam);
  const startOffset = Math.min(anchorOffset, focusOffset);
  const endOffset = Math.max(anchorOffset, focusOffset);
  element[UISelection] = {
    anchorOffset,
    focusOffset
  };
  if (element.selectionStart === startOffset && element.selectionEnd === endOffset) {
    return;
  }
  // eslint-disable-next-line no-new-wrappers
  const startObj = Object.assign(new Number(startOffset), {
    [UISelection]: true
  });
  try {
    element.setSelectionRange(startObj, endOffset);
  } catch {
    // DOMException for invalid state is expected when calling this
    // on an element without support for setSelectionRange
  }
}
function getUISelection(element) {
  var _element_selectionStart, _element_selectionEnd, _element_UISelection;
  const sel = (_element_UISelection = element[UISelection]) !== null && _element_UISelection !== void 0 ? _element_UISelection : {
    anchorOffset: (_element_selectionStart = element.selectionStart) !== null && _element_selectionStart !== void 0 ? _element_selectionStart : 0,
    focusOffset: (_element_selectionEnd = element.selectionEnd) !== null && _element_selectionEnd !== void 0 ? _element_selectionEnd : 0
  };
  return {
    ...sel,
    startOffset: Math.min(sel.anchorOffset, sel.focusOffset),
    endOffset: Math.max(sel.anchorOffset, sel.focusOffset)
  };
}
function hasUISelection(element) {
  return !!element[UISelection];
}
/** Flag the IDL selection as clean. This does not change the selection. */
function setUISelectionClean(element) {
  element[UISelection] = undefined;
}
exports.clearInitialValue = clearInitialValue;
exports.getInitialValue = getInitialValue;
exports.getUISelection = getUISelection;
exports.getUIValue = getUIValue;
exports.hasUISelection = hasUISelection;
exports.isUISelectionStart = isUISelectionStart;
exports.isUIValue = isUIValue;
exports.setUISelection = setUISelection;
exports.setUISelectionClean = setUISelectionClean;
exports.setUISelectionRaw = setUISelectionRaw;
exports.setUIValue = setUIValue;
exports.setUIValueClean = setUIValueClean;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVJVmFsdWUiLCJTeW1ib2wiLCJVSVNlbGVjdGlvbiIsIkluaXRpYWxWYWx1ZSIsImlzVUlWYWx1ZSIsImlzVUlTZWxlY3Rpb25TdGFydCIsInN0YXJ0Iiwic2V0VUlWYWx1ZSIsImVsZW1lbnQiLCJ1bmRlZmluZWQiLCJhc3NpZ24iLCJTdHJpbmciLCJnZXRVSVZhbHVlIiwic2V0VUlWYWx1ZUNsZWFuIiwiY2xlYXJJbml0aWFsVmFsdWUiLCJnZXRJbml0aWFsVmFsdWUiLCJzZXRVSVNlbGVjdGlvblJhdyIsInNlbGVjdGlvbiIsInNldFVJU2VsZWN0aW9uIiwiZm9jdXNPZmZzZXQiLCJmb2N1c09mZnNldFBhcmFtIiwiYW5jaG9yT2Zmc2V0IiwiYW5jaG9yT2Zmc2V0UGFyYW0iLCJtb2RlIiwidmFsdWVMZW5ndGgiLCJsZW5ndGgiLCJzYW5pdGl6ZU9mZnNldCIsIm8iLCJNYXRoIiwibWF4IiwibWluIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInN0YXJ0T2JqIiwiTnVtYmVyIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJnZXRVSVNlbGVjdGlvbiIsIl9lbGVtZW50X3NlbGVjdGlvblN0YXJ0IiwiX2VsZW1lbnRfc2VsZWN0aW9uRW5kIiwiX2VsZW1lbnRfVUlTZWxlY3Rpb24iLCJzZWwiLCJoYXNVSVNlbGVjdGlvbiIsInNldFVJU2VsZWN0aW9uQ2xlYW4iXSwic291cmNlcyI6WyJVSS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IFVJVmFsdWUgPSBTeW1ib2woJ0Rpc3BsYXllZCB2YWx1ZSBpbiBVSScpO1xuY29uc3QgVUlTZWxlY3Rpb24gPSBTeW1ib2woJ0Rpc3BsYXllZCBzZWxlY3Rpb24gaW4gVUknKTtcbmNvbnN0IEluaXRpYWxWYWx1ZSA9IFN5bWJvbCgnSW5pdGlhbCB2YWx1ZSB0byBjb21wYXJlIG9uIGJsdXInKTtcbmZ1bmN0aW9uIGlzVUlWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFVJVmFsdWUgaW4gdmFsdWU7XG59XG5mdW5jdGlvbiBpc1VJU2VsZWN0aW9uU3RhcnQoc3RhcnQpIHtcbiAgICByZXR1cm4gISFzdGFydCAmJiB0eXBlb2Ygc3RhcnQgPT09ICdvYmplY3QnICYmIFVJU2VsZWN0aW9uIGluIHN0YXJ0O1xufVxuZnVuY3Rpb24gc2V0VUlWYWx1ZShlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmIChlbGVtZW50W0luaXRpYWxWYWx1ZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbGVtZW50W0luaXRpYWxWYWx1ZV0gPSBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbGVtZW50W1VJVmFsdWVdID0gdmFsdWU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy13cmFwcGVyc1xuICAgIGVsZW1lbnQudmFsdWUgPSBPYmplY3QuYXNzaWduKG5ldyBTdHJpbmcodmFsdWUpLCB7XG4gICAgICAgIFtVSVZhbHVlXTogdHJ1ZVxuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0VUlWYWx1ZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnRbVUlWYWx1ZV0gPT09IHVuZGVmaW5lZCA/IGVsZW1lbnQudmFsdWUgOiBTdHJpbmcoZWxlbWVudFtVSVZhbHVlXSk7XG59XG4vKiogRmxhZyB0aGUgSURMIHZhbHVlIGFzIGNsZWFuLiBUaGlzIGRvZXMgbm90IGNoYW5nZSB0aGUgdmFsdWUuKi8gZnVuY3Rpb24gc2V0VUlWYWx1ZUNsZWFuKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50W1VJVmFsdWVdID0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gY2xlYXJJbml0aWFsVmFsdWUoZWxlbWVudCkge1xuICAgIGVsZW1lbnRbSW5pdGlhbFZhbHVlXSA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGdldEluaXRpYWxWYWx1ZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnRbSW5pdGlhbFZhbHVlXTtcbn1cbmZ1bmN0aW9uIHNldFVJU2VsZWN0aW9uUmF3KGVsZW1lbnQsIHNlbGVjdGlvbikge1xuICAgIGVsZW1lbnRbVUlTZWxlY3Rpb25dID0gc2VsZWN0aW9uO1xufVxuZnVuY3Rpb24gc2V0VUlTZWxlY3Rpb24oZWxlbWVudCwgeyBmb2N1c09mZnNldDogZm9jdXNPZmZzZXRQYXJhbSwgYW5jaG9yT2Zmc2V0OiBhbmNob3JPZmZzZXRQYXJhbSA9IGZvY3VzT2Zmc2V0UGFyYW0gfSwgbW9kZSA9ICdyZXBsYWNlJykge1xuICAgIGNvbnN0IHZhbHVlTGVuZ3RoID0gZ2V0VUlWYWx1ZShlbGVtZW50KS5sZW5ndGg7XG4gICAgY29uc3Qgc2FuaXRpemVPZmZzZXQgPSAobyk9Pk1hdGgubWF4KDAsIE1hdGgubWluKHZhbHVlTGVuZ3RoLCBvKSk7XG4gICAgY29uc3QgYW5jaG9yT2Zmc2V0ID0gbW9kZSA9PT0gJ3JlcGxhY2UnIHx8IGVsZW1lbnRbVUlTZWxlY3Rpb25dID09PSB1bmRlZmluZWQgPyBzYW5pdGl6ZU9mZnNldChhbmNob3JPZmZzZXRQYXJhbSkgOiBlbGVtZW50W1VJU2VsZWN0aW9uXS5hbmNob3JPZmZzZXQ7XG4gICAgY29uc3QgZm9jdXNPZmZzZXQgPSBzYW5pdGl6ZU9mZnNldChmb2N1c09mZnNldFBhcmFtKTtcbiAgICBjb25zdCBzdGFydE9mZnNldCA9IE1hdGgubWluKGFuY2hvck9mZnNldCwgZm9jdXNPZmZzZXQpO1xuICAgIGNvbnN0IGVuZE9mZnNldCA9IE1hdGgubWF4KGFuY2hvck9mZnNldCwgZm9jdXNPZmZzZXQpO1xuICAgIGVsZW1lbnRbVUlTZWxlY3Rpb25dID0ge1xuICAgICAgICBhbmNob3JPZmZzZXQsXG4gICAgICAgIGZvY3VzT2Zmc2V0XG4gICAgfTtcbiAgICBpZiAoZWxlbWVudC5zZWxlY3Rpb25TdGFydCA9PT0gc3RhcnRPZmZzZXQgJiYgZWxlbWVudC5zZWxlY3Rpb25FbmQgPT09IGVuZE9mZnNldCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctd3JhcHBlcnNcbiAgICBjb25zdCBzdGFydE9iaiA9IE9iamVjdC5hc3NpZ24obmV3IE51bWJlcihzdGFydE9mZnNldCksIHtcbiAgICAgICAgW1VJU2VsZWN0aW9uXTogdHJ1ZVxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnRPYmosIGVuZE9mZnNldCk7XG4gICAgfSBjYXRjaCAge1xuICAgIC8vIERPTUV4Y2VwdGlvbiBmb3IgaW52YWxpZCBzdGF0ZSBpcyBleHBlY3RlZCB3aGVuIGNhbGxpbmcgdGhpc1xuICAgIC8vIG9uIGFuIGVsZW1lbnQgd2l0aG91dCBzdXBwb3J0IGZvciBzZXRTZWxlY3Rpb25SYW5nZVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFVJU2VsZWN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgX2VsZW1lbnRfc2VsZWN0aW9uU3RhcnQsIF9lbGVtZW50X3NlbGVjdGlvbkVuZCwgX2VsZW1lbnRfVUlTZWxlY3Rpb247XG4gICAgY29uc3Qgc2VsID0gKF9lbGVtZW50X1VJU2VsZWN0aW9uID0gZWxlbWVudFtVSVNlbGVjdGlvbl0pICE9PSBudWxsICYmIF9lbGVtZW50X1VJU2VsZWN0aW9uICE9PSB2b2lkIDAgPyBfZWxlbWVudF9VSVNlbGVjdGlvbiA6IHtcbiAgICAgICAgYW5jaG9yT2Zmc2V0OiAoX2VsZW1lbnRfc2VsZWN0aW9uU3RhcnQgPSBlbGVtZW50LnNlbGVjdGlvblN0YXJ0KSAhPT0gbnVsbCAmJiBfZWxlbWVudF9zZWxlY3Rpb25TdGFydCAhPT0gdm9pZCAwID8gX2VsZW1lbnRfc2VsZWN0aW9uU3RhcnQgOiAwLFxuICAgICAgICBmb2N1c09mZnNldDogKF9lbGVtZW50X3NlbGVjdGlvbkVuZCA9IGVsZW1lbnQuc2VsZWN0aW9uRW5kKSAhPT0gbnVsbCAmJiBfZWxlbWVudF9zZWxlY3Rpb25FbmQgIT09IHZvaWQgMCA/IF9lbGVtZW50X3NlbGVjdGlvbkVuZCA6IDBcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnNlbCxcbiAgICAgICAgc3RhcnRPZmZzZXQ6IE1hdGgubWluKHNlbC5hbmNob3JPZmZzZXQsIHNlbC5mb2N1c09mZnNldCksXG4gICAgICAgIGVuZE9mZnNldDogTWF0aC5tYXgoc2VsLmFuY2hvck9mZnNldCwgc2VsLmZvY3VzT2Zmc2V0KVxuICAgIH07XG59XG5mdW5jdGlvbiBoYXNVSVNlbGVjdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuICEhZWxlbWVudFtVSVNlbGVjdGlvbl07XG59XG4vKiogRmxhZyB0aGUgSURMIHNlbGVjdGlvbiBhcyBjbGVhbi4gVGhpcyBkb2VzIG5vdCBjaGFuZ2UgdGhlIHNlbGVjdGlvbi4gKi8gZnVuY3Rpb24gc2V0VUlTZWxlY3Rpb25DbGVhbihlbGVtZW50KSB7XG4gICAgZWxlbWVudFtVSVNlbGVjdGlvbl0gPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMuY2xlYXJJbml0aWFsVmFsdWUgPSBjbGVhckluaXRpYWxWYWx1ZTtcbmV4cG9ydHMuZ2V0SW5pdGlhbFZhbHVlID0gZ2V0SW5pdGlhbFZhbHVlO1xuZXhwb3J0cy5nZXRVSVNlbGVjdGlvbiA9IGdldFVJU2VsZWN0aW9uO1xuZXhwb3J0cy5nZXRVSVZhbHVlID0gZ2V0VUlWYWx1ZTtcbmV4cG9ydHMuaGFzVUlTZWxlY3Rpb24gPSBoYXNVSVNlbGVjdGlvbjtcbmV4cG9ydHMuaXNVSVNlbGVjdGlvblN0YXJ0ID0gaXNVSVNlbGVjdGlvblN0YXJ0O1xuZXhwb3J0cy5pc1VJVmFsdWUgPSBpc1VJVmFsdWU7XG5leHBvcnRzLnNldFVJU2VsZWN0aW9uID0gc2V0VUlTZWxlY3Rpb247XG5leHBvcnRzLnNldFVJU2VsZWN0aW9uQ2xlYW4gPSBzZXRVSVNlbGVjdGlvbkNsZWFuO1xuZXhwb3J0cy5zZXRVSVNlbGVjdGlvblJhdyA9IHNldFVJU2VsZWN0aW9uUmF3O1xuZXhwb3J0cy5zZXRVSVZhbHVlID0gc2V0VUlWYWx1ZTtcbmV4cG9ydHMuc2V0VUlWYWx1ZUNsZWFuID0gc2V0VUlWYWx1ZUNsZWFuO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUMsdUJBQXVCLENBQUM7QUFDL0MsTUFBTUMsV0FBVyxHQUFHRCxNQUFNLENBQUMsMkJBQTJCLENBQUM7QUFDdkQsTUFBTUUsWUFBWSxHQUFHRixNQUFNLENBQUMsa0NBQWtDLENBQUM7QUFDL0QsU0FBU0csU0FBU0EsQ0FBQ0wsS0FBSyxFQUFFO0VBQ3RCLE9BQU8sT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSUMsT0FBTyxJQUFJRCxLQUFLO0FBQ3hEO0FBQ0EsU0FBU00sa0JBQWtCQSxDQUFDQyxLQUFLLEVBQUU7RUFDL0IsT0FBTyxDQUFDLENBQUNBLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJSixXQUFXLElBQUlJLEtBQUs7QUFDdkU7QUFDQSxTQUFTQyxVQUFVQSxDQUFDQyxPQUFPLEVBQUVULEtBQUssRUFBRTtFQUNoQyxJQUFJUyxPQUFPLENBQUNMLFlBQVksQ0FBQyxLQUFLTSxTQUFTLEVBQUU7SUFDckNELE9BQU8sQ0FBQ0wsWUFBWSxDQUFDLEdBQUdLLE9BQU8sQ0FBQ1QsS0FBSztFQUN6QztFQUNBUyxPQUFPLENBQUNSLE9BQU8sQ0FBQyxHQUFHRCxLQUFLO0VBQ3hCO0VBQ0FTLE9BQU8sQ0FBQ1QsS0FBSyxHQUFHSCxNQUFNLENBQUNjLE1BQU0sQ0FBQyxJQUFJQyxNQUFNLENBQUNaLEtBQUssQ0FBQyxFQUFFO0lBQzdD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