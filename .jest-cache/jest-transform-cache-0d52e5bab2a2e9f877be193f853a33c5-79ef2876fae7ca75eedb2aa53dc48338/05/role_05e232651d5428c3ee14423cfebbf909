c983b4b2edc6723128cd2122b77e2b0e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByRole = exports.queryAllByRole = exports.getByRole = exports.getAllByRole = exports.findByRole = exports.findAllByRole = void 0;
var _domAccessibilityApi = require("dom-accessibility-api");
var _ariaQuery = require("aria-query");
var _roleHelpers = require("../role-helpers");
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
/* eslint-disable complexity */

const queryAllByRole = (container, role, {
  hidden = (0, _allUtils.getConfig)().defaultHidden,
  name,
  description,
  queryFallbacks = false,
  selected,
  busy,
  checked,
  pressed,
  current,
  level,
  expanded,
  value: {
    now: valueNow,
    min: valueMin,
    max: valueMax,
    text: valueText
  } = {}
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  if (selected !== undefined) {
    var _allRoles$get;
    // guard against unknown roles
    if (((_allRoles$get = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get.props['aria-selected']) === undefined) {
      throw new Error(`"aria-selected" is not supported on role "${role}".`);
    }
  }
  if (busy !== undefined) {
    var _allRoles$get2;
    // guard against unknown roles
    if (((_allRoles$get2 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get2.props['aria-busy']) === undefined) {
      throw new Error(`"aria-busy" is not supported on role "${role}".`);
    }
  }
  if (checked !== undefined) {
    var _allRoles$get3;
    // guard against unknown roles
    if (((_allRoles$get3 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get3.props['aria-checked']) === undefined) {
      throw new Error(`"aria-checked" is not supported on role "${role}".`);
    }
  }
  if (pressed !== undefined) {
    var _allRoles$get4;
    // guard against unknown roles
    if (((_allRoles$get4 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get4.props['aria-pressed']) === undefined) {
      throw new Error(`"aria-pressed" is not supported on role "${role}".`);
    }
  }
  if (current !== undefined) {
    var _allRoles$get5;
    /* istanbul ignore next */
    // guard against unknown roles
    // All currently released ARIA versions support `aria-current` on all roles.
    // Leaving this for symetry and forward compatibility
    if (((_allRoles$get5 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get5.props['aria-current']) === undefined) {
      throw new Error(`"aria-current" is not supported on role "${role}".`);
    }
  }
  if (level !== undefined) {
    // guard against using `level` option with any role other than `heading`
    if (role !== 'heading') {
      throw new Error(`Role "${role}" cannot have "level" property.`);
    }
  }
  if (valueNow !== undefined) {
    var _allRoles$get6;
    // guard against unknown roles
    if (((_allRoles$get6 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get6.props['aria-valuenow']) === undefined) {
      throw new Error(`"aria-valuenow" is not supported on role "${role}".`);
    }
  }
  if (valueMax !== undefined) {
    var _allRoles$get7;
    // guard against unknown roles
    if (((_allRoles$get7 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get7.props['aria-valuemax']) === undefined) {
      throw new Error(`"aria-valuemax" is not supported on role "${role}".`);
    }
  }
  if (valueMin !== undefined) {
    var _allRoles$get8;
    // guard against unknown roles
    if (((_allRoles$get8 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get8.props['aria-valuemin']) === undefined) {
      throw new Error(`"aria-valuemin" is not supported on role "${role}".`);
    }
  }
  if (valueText !== undefined) {
    var _allRoles$get9;
    // guard against unknown roles
    if (((_allRoles$get9 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get9.props['aria-valuetext']) === undefined) {
      throw new Error(`"aria-valuetext" is not supported on role "${role}".`);
    }
  }
  if (expanded !== undefined) {
    var _allRoles$get10;
    // guard against unknown roles
    if (((_allRoles$get10 = _ariaQuery.roles.get(role)) == null ? void 0 : _allRoles$get10.props['aria-expanded']) === undefined) {
      throw new Error(`"aria-expanded" is not supported on role "${role}".`);
    }
  }
  const subtreeIsInaccessibleCache = new WeakMap();
  function cachedIsSubtreeInaccessible(element) {
    if (!subtreeIsInaccessibleCache.has(element)) {
      subtreeIsInaccessibleCache.set(element, (0, _roleHelpers.isSubtreeInaccessible)(element));
    }
    return subtreeIsInaccessibleCache.get(element);
  }
  return Array.from(container.querySelectorAll(
  // Only query elements that can be matched by the following filters
  makeRoleSelector(role))).filter(node => {
    const isRoleSpecifiedExplicitly = node.hasAttribute('role');
    if (isRoleSpecifiedExplicitly) {
      const roleValue = node.getAttribute('role');
      if (queryFallbacks) {
        return roleValue.split(' ').filter(Boolean).some(roleAttributeToken => roleAttributeToken === role);
      }
      // other wise only send the first token to match
      const [firstRoleAttributeToken] = roleValue.split(' ');
      return firstRoleAttributeToken === role;
    }
    const implicitRoles = (0, _roleHelpers.getImplicitAriaRoles)(node);
    return implicitRoles.some(implicitRole => {
      return implicitRole === role;
    });
  }).filter(element => {
    if (selected !== undefined) {
      return selected === (0, _roleHelpers.computeAriaSelected)(element);
    }
    if (busy !== undefined) {
      return busy === (0, _roleHelpers.computeAriaBusy)(element);
    }
    if (checked !== undefined) {
      return checked === (0, _roleHelpers.computeAriaChecked)(element);
    }
    if (pressed !== undefined) {
      return pressed === (0, _roleHelpers.computeAriaPressed)(element);
    }
    if (current !== undefined) {
      return current === (0, _roleHelpers.computeAriaCurrent)(element);
    }
    if (expanded !== undefined) {
      return expanded === (0, _roleHelpers.computeAriaExpanded)(element);
    }
    if (level !== undefined) {
      return level === (0, _roleHelpers.computeHeadingLevel)(element);
    }
    if (valueNow !== undefined || valueMax !== undefined || valueMin !== undefined || valueText !== undefined) {
      let valueMatches = true;
      if (valueNow !== undefined) {
        valueMatches && (valueMatches = valueNow === (0, _roleHelpers.computeAriaValueNow)(element));
      }
      if (valueMax !== undefined) {
        valueMatches && (valueMatches = valueMax === (0, _roleHelpers.computeAriaValueMax)(element));
      }
      if (valueMin !== undefined) {
        valueMatches && (valueMatches = valueMin === (0, _roleHelpers.computeAriaValueMin)(element));
      }
      if (valueText !== undefined) {
        valueMatches && (valueMatches = (0, _allUtils.matches)((0, _roleHelpers.computeAriaValueText)(element) ?? null, element, valueText, text => text));
      }
      return valueMatches;
    }
    // don't care if aria attributes are unspecified
    return true;
  }).filter(element => {
    if (name === undefined) {
      // Don't care
      return true;
    }
    return (0, _allUtils.matches)((0, _domAccessibilityApi.computeAccessibleName)(element, {
      computedStyleSupportsPseudoElements: (0, _allUtils.getConfig)().computedStyleSupportsPseudoElements
    }), element, name, text => text);
  }).filter(element => {
    if (description === undefined) {
      // Don't care
      return true;
    }
    return (0, _allUtils.matches)((0, _domAccessibilityApi.computeAccessibleDescription)(element, {
      computedStyleSupportsPseudoElements: (0, _allUtils.getConfig)().computedStyleSupportsPseudoElements
    }), element, description, text => text);
  }).filter(element => {
    return hidden === false ? (0, _roleHelpers.isInaccessible)(element, {
      isSubtreeInaccessible: cachedIsSubtreeInaccessible
    }) === false : true;
  });
};
function makeRoleSelector(role) {
  const explicitRoleSelector = `*[role~="${role}"]`;
  const roleRelations = _ariaQuery.roleElements.get(role) ?? new Set();
  const implicitRoleSelectors = new Set(Array.from(roleRelations).map(({
    name
  }) => name));

  // Current transpilation config sometimes assumes `...` is always applied to arrays.
  // `...` is equivalent to `Array.prototype.concat` for arrays.
  // If you replace this code with `[explicitRoleSelector, ...implicitRoleSelectors]`, make sure every transpilation target retains the `...` in favor of `Array.prototype.concat`.
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(',');
}
const getNameHint = name => {
  let nameHint = '';
  if (name === undefined) {
    nameHint = '';
  } else if (typeof name === 'string') {
    nameHint = ` and name "${name}"`;
  } else {
    nameHint = ` and name \`${name}\``;
  }
  return nameHint;
};
const getMultipleError = (c, role, {
  name
} = {}) => {
  return `Found multiple elements with the role "${role}"${getNameHint(name)}`;
};
const getMissingError = (container, role, {
  hidden = (0, _allUtils.getConfig)().defaultHidden,
  name,
  description
} = {}) => {
  if ((0, _allUtils.getConfig)()._disableExpensiveErrorDiagnostics) {
    return `Unable to find role="${role}"${getNameHint(name)}`;
  }
  let roles = '';
  Array.from(container.children).forEach(childElement => {
    roles += (0, _roleHelpers.prettyRoles)(childElement, {
      hidden,
      includeDescription: description !== undefined
    });
  });
  let roleMessage;
  if (roles.length === 0) {
    if (hidden === false) {
      roleMessage = 'There are no accessible roles. But there might be some inaccessible roles. ' + 'If you wish to access them, then set the `hidden` option to `true`. ' + 'Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole';
    } else {
      roleMessage = 'There are no available roles.';
    }
  } else {
    roleMessage = `
Here are the ${hidden === false ? 'accessible' : 'available'} roles:

  ${roles.replace(/\n/g, '\n  ').replace(/\n\s\s\n/g, '\n\n')}
`.trim();
  }
  let nameHint = '';
  if (name === undefined) {
    nameHint = '';
  } else if (typeof name === 'string') {
    nameHint = ` and name "${name}"`;
  } else {
    nameHint = ` and name \`${name}\``;
  }
  let descriptionHint = '';
  if (description === undefined) {
    descriptionHint = '';
  } else if (typeof description === 'string') {
    descriptionHint = ` and description "${description}"`;
  } else {
    descriptionHint = ` and description \`${description}\``;
  }
  return `
Unable to find an ${hidden === false ? 'accessible ' : ''}element with the role "${role}"${nameHint}${descriptionHint}

${roleMessage}`.trim();
};
const queryAllByRoleWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByRole, queryAllByRole.name, 'queryAll');
exports.queryAllByRole = queryAllByRoleWithSuggestions;
const [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = (0, _allUtils.buildQueries)(queryAllByRole, getMultipleError, getMissingError);
exports.findByRole = findByRole;
exports.findAllByRole = findAllByRole;
exports.getByRole = getByRole;
exports.getAllByRole = getAllByRole;
exports.queryByRole = queryByRole;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlSb2xlIiwicXVlcnlBbGxCeVJvbGUiLCJnZXRCeVJvbGUiLCJnZXRBbGxCeVJvbGUiLCJmaW5kQnlSb2xlIiwiZmluZEFsbEJ5Um9sZSIsIl9kb21BY2Nlc3NpYmlsaXR5QXBpIiwicmVxdWlyZSIsIl9hcmlhUXVlcnkiLCJfcm9sZUhlbHBlcnMiLCJfcXVlcnlIZWxwZXJzIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJjb250YWluZXIiLCJyb2xlIiwiaGlkZGVuIiwiZ2V0Q29uZmlnIiwiZGVmYXVsdEhpZGRlbiIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInF1ZXJ5RmFsbGJhY2tzIiwic2VsZWN0ZWQiLCJidXN5IiwiY2hlY2tlZCIsInByZXNzZWQiLCJjdXJyZW50IiwibGV2ZWwiLCJleHBhbmRlZCIsIm5vdyIsInZhbHVlTm93IiwibWluIiwidmFsdWVNaW4iLCJtYXgiLCJ2YWx1ZU1heCIsInRleHQiLCJ2YWx1ZVRleHQiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJ1bmRlZmluZWQiLCJfYWxsUm9sZXMkZ2V0Iiwicm9sZXMiLCJnZXQiLCJwcm9wcyIsIkVycm9yIiwiX2FsbFJvbGVzJGdldDIiLCJfYWxsUm9sZXMkZ2V0MyIsIl9hbGxSb2xlcyRnZXQ0IiwiX2FsbFJvbGVzJGdldDUiLCJfYWxsUm9sZXMkZ2V0NiIsIl9hbGxSb2xlcyRnZXQ3IiwiX2FsbFJvbGVzJGdldDgiLCJfYWxsUm9sZXMkZ2V0OSIsIl9hbGxSb2xlcyRnZXQxMCIsInN1YnRyZWVJc0luYWNjZXNzaWJsZUNhY2hlIiwiV2Vha01hcCIsImNhY2hlZElzU3VidHJlZUluYWNjZXNzaWJsZSIsImVsZW1lbnQiLCJoYXMiLCJzZXQiLCJpc1N1YnRyZWVJbmFjY2Vzc2libGUiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwibWFrZVJvbGVTZWxlY3RvciIsImZpbHRlciIsIm5vZGUiLCJpc1JvbGVTcGVjaWZpZWRFeHBsaWNpdGx5IiwiaGFzQXR0cmlidXRlIiwicm9sZVZhbHVlIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJCb29sZWFuIiwic29tZSIsInJvbGVBdHRyaWJ1dGVUb2tlbiIsImZpcnN0Um9sZUF0dHJpYnV0ZVRva2VuIiwiaW1wbGljaXRSb2xlcyIsImdldEltcGxpY2l0QXJpYVJvbGVzIiwiaW1wbGljaXRSb2xlIiwiY29tcHV0ZUFyaWFTZWxlY3RlZCIsImNvbXB1dGVBcmlhQnVzeSIsImNvbXB1dGVBcmlhQ2hlY2tlZCIsImNvbXB1dGVBcmlhUHJlc3NlZCIsImNvbXB1dGVBcmlhQ3VycmVudCIsImNvbXB1dGVBcmlhRXhwYW5kZWQiLCJjb21wdXRlSGVhZGluZ0xldmVsIiwidmFsdWVNYXRjaGVzIiwiY29tcHV0ZUFyaWFWYWx1ZU5vdyIsImNvbXB1dGVBcmlhVmFsdWVNYXgiLCJjb21wdXRlQXJpYVZhbHVlTWluIiwibWF0Y2hlcyIsImNvbXB1dGVBcmlhVmFsdWVUZXh0IiwiY29tcHV0ZUFjY2Vzc2libGVOYW1lIiwiY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHMiLCJjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uIiwiaXNJbmFjY2Vzc2libGUiLCJleHBsaWNpdFJvbGVTZWxlY3RvciIsInJvbGVSZWxhdGlvbnMiLCJyb2xlRWxlbWVudHMiLCJTZXQiLCJpbXBsaWNpdFJvbGVTZWxlY3RvcnMiLCJtYXAiLCJjb25jYXQiLCJqb2luIiwiZ2V0TmFtZUhpbnQiLCJuYW1lSGludCIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwiZ2V0TWlzc2luZ0Vycm9yIiwiX2Rpc2FibGVFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGRFbGVtZW50IiwicHJldHR5Um9sZXMiLCJpbmNsdWRlRGVzY3JpcHRpb24iLCJyb2xlTWVzc2FnZSIsImxlbmd0aCIsInJlcGxhY2UiLCJ0cmltIiwiZGVzY3JpcHRpb25IaW50IiwicXVlcnlBbGxCeVJvbGVXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwiYnVpbGRRdWVyaWVzIl0sInNvdXJjZXMiOlsicm9sZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeVJvbGUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlSb2xlID0gZXhwb3J0cy5nZXRCeVJvbGUgPSBleHBvcnRzLmdldEFsbEJ5Um9sZSA9IGV4cG9ydHMuZmluZEJ5Um9sZSA9IGV4cG9ydHMuZmluZEFsbEJ5Um9sZSA9IHZvaWQgMDtcbnZhciBfZG9tQWNjZXNzaWJpbGl0eUFwaSA9IHJlcXVpcmUoXCJkb20tYWNjZXNzaWJpbGl0eS1hcGlcIik7XG52YXIgX2FyaWFRdWVyeSA9IHJlcXVpcmUoXCJhcmlhLXF1ZXJ5XCIpO1xudmFyIF9yb2xlSGVscGVycyA9IHJlcXVpcmUoXCIuLi9yb2xlLWhlbHBlcnNcIik7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuXG5jb25zdCBxdWVyeUFsbEJ5Um9sZSA9IChjb250YWluZXIsIHJvbGUsIHtcbiAgaGlkZGVuID0gKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkuZGVmYXVsdEhpZGRlbixcbiAgbmFtZSxcbiAgZGVzY3JpcHRpb24sXG4gIHF1ZXJ5RmFsbGJhY2tzID0gZmFsc2UsXG4gIHNlbGVjdGVkLFxuICBidXN5LFxuICBjaGVja2VkLFxuICBwcmVzc2VkLFxuICBjdXJyZW50LFxuICBsZXZlbCxcbiAgZXhwYW5kZWQsXG4gIHZhbHVlOiB7XG4gICAgbm93OiB2YWx1ZU5vdyxcbiAgICBtaW46IHZhbHVlTWluLFxuICAgIG1heDogdmFsdWVNYXgsXG4gICAgdGV4dDogdmFsdWVUZXh0XG4gIH0gPSB7fVxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGlmIChzZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIF9hbGxSb2xlcyRnZXQ7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKCgoX2FsbFJvbGVzJGdldCA9IF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpKSA9PSBudWxsID8gdm9pZCAwIDogX2FsbFJvbGVzJGdldC5wcm9wc1snYXJpYS1zZWxlY3RlZCddKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS1zZWxlY3RlZFwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gcm9sZSBcIiR7cm9sZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGJ1c3kgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBfYWxsUm9sZXMkZ2V0MjtcbiAgICAvLyBndWFyZCBhZ2FpbnN0IHVua25vd24gcm9sZXNcbiAgICBpZiAoKChfYWxsUm9sZXMkZ2V0MiA9IF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpKSA9PSBudWxsID8gdm9pZCAwIDogX2FsbFJvbGVzJGdldDIucHJvcHNbJ2FyaWEtYnVzeSddKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS1idXN5XCIgaXMgbm90IHN1cHBvcnRlZCBvbiByb2xlIFwiJHtyb2xlfVwiLmApO1xuICAgIH1cbiAgfVxuICBpZiAoY2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIF9hbGxSb2xlcyRnZXQzO1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIGlmICgoKF9hbGxSb2xlcyRnZXQzID0gX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYWxsUm9sZXMkZ2V0My5wcm9wc1snYXJpYS1jaGVja2VkJ10pID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLWNoZWNrZWRcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmIChwcmVzc2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX2FsbFJvbGVzJGdldDQ7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKCgoX2FsbFJvbGVzJGdldDQgPSBfYXJpYVF1ZXJ5LnJvbGVzLmdldChyb2xlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hbGxSb2xlcyRnZXQ0LnByb3BzWydhcmlhLXByZXNzZWQnXSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImFyaWEtcHJlc3NlZFwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gcm9sZSBcIiR7cm9sZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBfYWxsUm9sZXMkZ2V0NTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIC8vIEFsbCBjdXJyZW50bHkgcmVsZWFzZWQgQVJJQSB2ZXJzaW9ucyBzdXBwb3J0IGBhcmlhLWN1cnJlbnRgIG9uIGFsbCByb2xlcy5cbiAgICAvLyBMZWF2aW5nIHRoaXMgZm9yIHN5bWV0cnkgYW5kIGZvcndhcmQgY29tcGF0aWJpbGl0eVxuICAgIGlmICgoKF9hbGxSb2xlcyRnZXQ1ID0gX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYWxsUm9sZXMkZ2V0NS5wcm9wc1snYXJpYS1jdXJyZW50J10pID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLWN1cnJlbnRcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmIChsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1c2luZyBgbGV2ZWxgIG9wdGlvbiB3aXRoIGFueSByb2xlIG90aGVyIHRoYW4gYGhlYWRpbmdgXG4gICAgaWYgKHJvbGUgIT09ICdoZWFkaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb2xlIFwiJHtyb2xlfVwiIGNhbm5vdCBoYXZlIFwibGV2ZWxcIiBwcm9wZXJ0eS5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhbHVlTm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX2FsbFJvbGVzJGdldDY7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKCgoX2FsbFJvbGVzJGdldDYgPSBfYXJpYVF1ZXJ5LnJvbGVzLmdldChyb2xlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hbGxSb2xlcyRnZXQ2LnByb3BzWydhcmlhLXZhbHVlbm93J10pID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhcmlhLXZhbHVlbm93XCIgaXMgbm90IHN1cHBvcnRlZCBvbiByb2xlIFwiJHtyb2xlfVwiLmApO1xuICAgIH1cbiAgfVxuICBpZiAodmFsdWVNYXggIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBfYWxsUm9sZXMkZ2V0NztcbiAgICAvLyBndWFyZCBhZ2FpbnN0IHVua25vd24gcm9sZXNcbiAgICBpZiAoKChfYWxsUm9sZXMkZ2V0NyA9IF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpKSA9PSBudWxsID8gdm9pZCAwIDogX2FsbFJvbGVzJGdldDcucHJvcHNbJ2FyaWEtdmFsdWVtYXgnXSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImFyaWEtdmFsdWVtYXhcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGlmICh2YWx1ZU1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIF9hbGxSb2xlcyRnZXQ4O1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIGlmICgoKF9hbGxSb2xlcyRnZXQ4ID0gX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYWxsUm9sZXMkZ2V0OC5wcm9wc1snYXJpYS12YWx1ZW1pbiddKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXJpYS12YWx1ZW1pblwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gcm9sZSBcIiR7cm9sZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhbHVlVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIF9hbGxSb2xlcyRnZXQ5O1xuICAgIC8vIGd1YXJkIGFnYWluc3QgdW5rbm93biByb2xlc1xuICAgIGlmICgoKF9hbGxSb2xlcyRnZXQ5ID0gX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYWxsUm9sZXMkZ2V0OS5wcm9wc1snYXJpYS12YWx1ZXRleHQnXSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImFyaWEtdmFsdWV0ZXh0XCIgaXMgbm90IHN1cHBvcnRlZCBvbiByb2xlIFwiJHtyb2xlfVwiLmApO1xuICAgIH1cbiAgfVxuICBpZiAoZXhwYW5kZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBfYWxsUm9sZXMkZ2V0MTA7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCB1bmtub3duIHJvbGVzXG4gICAgaWYgKCgoX2FsbFJvbGVzJGdldDEwID0gX2FyaWFRdWVyeS5yb2xlcy5nZXQocm9sZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYWxsUm9sZXMkZ2V0MTAucHJvcHNbJ2FyaWEtZXhwYW5kZWQnXSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImFyaWEtZXhwYW5kZWRcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHJvbGUgXCIke3JvbGV9XCIuYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHN1YnRyZWVJc0luYWNjZXNzaWJsZUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbiAgZnVuY3Rpb24gY2FjaGVkSXNTdWJ0cmVlSW5hY2Nlc3NpYmxlKGVsZW1lbnQpIHtcbiAgICBpZiAoIXN1YnRyZWVJc0luYWNjZXNzaWJsZUNhY2hlLmhhcyhlbGVtZW50KSkge1xuICAgICAgc3VidHJlZUlzSW5hY2Nlc3NpYmxlQ2FjaGUuc2V0KGVsZW1lbnQsICgwLCBfcm9sZUhlbHBlcnMuaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlKShlbGVtZW50KSk7XG4gICAgfVxuICAgIHJldHVybiBzdWJ0cmVlSXNJbmFjY2Vzc2libGVDYWNoZS5nZXQoZWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gIC8vIE9ubHkgcXVlcnkgZWxlbWVudHMgdGhhdCBjYW4gYmUgbWF0Y2hlZCBieSB0aGUgZm9sbG93aW5nIGZpbHRlcnNcbiAgbWFrZVJvbGVTZWxlY3Rvcihyb2xlKSkpLmZpbHRlcihub2RlID0+IHtcbiAgICBjb25zdCBpc1JvbGVTcGVjaWZpZWRFeHBsaWNpdGx5ID0gbm9kZS5oYXNBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICBpZiAoaXNSb2xlU3BlY2lmaWVkRXhwbGljaXRseSkge1xuICAgICAgY29uc3Qgcm9sZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICAgIGlmIChxdWVyeUZhbGxiYWNrcykge1xuICAgICAgICByZXR1cm4gcm9sZVZhbHVlLnNwbGl0KCcgJykuZmlsdGVyKEJvb2xlYW4pLnNvbWUocm9sZUF0dHJpYnV0ZVRva2VuID0+IHJvbGVBdHRyaWJ1dGVUb2tlbiA9PT0gcm9sZSk7XG4gICAgICB9XG4gICAgICAvLyBvdGhlciB3aXNlIG9ubHkgc2VuZCB0aGUgZmlyc3QgdG9rZW4gdG8gbWF0Y2hcbiAgICAgIGNvbnN0IFtmaXJzdFJvbGVBdHRyaWJ1dGVUb2tlbl0gPSByb2xlVmFsdWUuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiBmaXJzdFJvbGVBdHRyaWJ1dGVUb2tlbiA9PT0gcm9sZTtcbiAgICB9XG4gICAgY29uc3QgaW1wbGljaXRSb2xlcyA9ICgwLCBfcm9sZUhlbHBlcnMuZ2V0SW1wbGljaXRBcmlhUm9sZXMpKG5vZGUpO1xuICAgIHJldHVybiBpbXBsaWNpdFJvbGVzLnNvbWUoaW1wbGljaXRSb2xlID0+IHtcbiAgICAgIHJldHVybiBpbXBsaWNpdFJvbGUgPT09IHJvbGU7XG4gICAgfSk7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICBpZiAoc2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHNlbGVjdGVkID09PSAoMCwgX3JvbGVIZWxwZXJzLmNvbXB1dGVBcmlhU2VsZWN0ZWQpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoYnVzeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYnVzeSA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYUJ1c3kpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoY2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gY2hlY2tlZCA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYUNoZWNrZWQpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAocHJlc3NlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJlc3NlZCA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYVByZXNzZWQpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gY3VycmVudCA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYUN1cnJlbnQpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoZXhwYW5kZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV4cGFuZGVkID09PSAoMCwgX3JvbGVIZWxwZXJzLmNvbXB1dGVBcmlhRXhwYW5kZWQpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAobGV2ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGxldmVsID09PSAoMCwgX3JvbGVIZWxwZXJzLmNvbXB1dGVIZWFkaW5nTGV2ZWwpKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAodmFsdWVOb3cgIT09IHVuZGVmaW5lZCB8fCB2YWx1ZU1heCAhPT0gdW5kZWZpbmVkIHx8IHZhbHVlTWluICE9PSB1bmRlZmluZWQgfHwgdmFsdWVUZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB2YWx1ZU1hdGNoZXMgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlTm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWVNYXRjaGVzICYmICh2YWx1ZU1hdGNoZXMgPSB2YWx1ZU5vdyA9PT0gKDAsIF9yb2xlSGVscGVycy5jb21wdXRlQXJpYVZhbHVlTm93KShlbGVtZW50KSk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWVNYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZU1hdGNoZXMgJiYgKHZhbHVlTWF0Y2hlcyA9IHZhbHVlTWF4ID09PSAoMCwgX3JvbGVIZWxwZXJzLmNvbXB1dGVBcmlhVmFsdWVNYXgpKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZU1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlTWF0Y2hlcyAmJiAodmFsdWVNYXRjaGVzID0gdmFsdWVNaW4gPT09ICgwLCBfcm9sZUhlbHBlcnMuY29tcHV0ZUFyaWFWYWx1ZU1pbikoZWxlbWVudCkpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlTWF0Y2hlcyAmJiAodmFsdWVNYXRjaGVzID0gKDAsIF9hbGxVdGlscy5tYXRjaGVzKSgoMCwgX3JvbGVIZWxwZXJzLmNvbXB1dGVBcmlhVmFsdWVUZXh0KShlbGVtZW50KSA/PyBudWxsLCBlbGVtZW50LCB2YWx1ZVRleHQsIHRleHQgPT4gdGV4dCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlTWF0Y2hlcztcbiAgICB9XG4gICAgLy8gZG9uJ3QgY2FyZSBpZiBhcmlhIGF0dHJpYnV0ZXMgYXJlIHVuc3BlY2lmaWVkXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBEb24ndCBjYXJlXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBfYWxsVXRpbHMubWF0Y2hlcykoKDAsIF9kb21BY2Nlc3NpYmlsaXR5QXBpLmNvbXB1dGVBY2Nlc3NpYmxlTmFtZSkoZWxlbWVudCwge1xuICAgICAgY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHM6ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLmNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzXG4gICAgfSksIGVsZW1lbnQsIG5hbWUsIHRleHQgPT4gdGV4dCk7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRG9uJ3QgY2FyZVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX2FsbFV0aWxzLm1hdGNoZXMpKCgwLCBfZG9tQWNjZXNzaWJpbGl0eUFwaS5jb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uKShlbGVtZW50LCB7XG4gICAgICBjb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50czogKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkuY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHNcbiAgICB9KSwgZWxlbWVudCwgZGVzY3JpcHRpb24sIHRleHQgPT4gdGV4dCk7XG4gIH0pLmZpbHRlcihlbGVtZW50ID0+IHtcbiAgICByZXR1cm4gaGlkZGVuID09PSBmYWxzZSA/ICgwLCBfcm9sZUhlbHBlcnMuaXNJbmFjY2Vzc2libGUpKGVsZW1lbnQsIHtcbiAgICAgIGlzU3VidHJlZUluYWNjZXNzaWJsZTogY2FjaGVkSXNTdWJ0cmVlSW5hY2Nlc3NpYmxlXG4gICAgfSkgPT09IGZhbHNlIDogdHJ1ZTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gbWFrZVJvbGVTZWxlY3Rvcihyb2xlKSB7XG4gIGNvbnN0IGV4cGxpY2l0Um9sZVNlbGVjdG9yID0gYCpbcm9sZX49XCIke3JvbGV9XCJdYDtcbiAgY29uc3Qgcm9sZVJlbGF0aW9ucyA9IF9hcmlhUXVlcnkucm9sZUVsZW1lbnRzLmdldChyb2xlKSA/PyBuZXcgU2V0KCk7XG4gIGNvbnN0IGltcGxpY2l0Um9sZVNlbGVjdG9ycyA9IG5ldyBTZXQoQXJyYXkuZnJvbShyb2xlUmVsYXRpb25zKS5tYXAoKHtcbiAgICBuYW1lXG4gIH0pID0+IG5hbWUpKTtcblxuICAvLyBDdXJyZW50IHRyYW5zcGlsYXRpb24gY29uZmlnIHNvbWV0aW1lcyBhc3N1bWVzIGAuLi5gIGlzIGFsd2F5cyBhcHBsaWVkIHRvIGFycmF5cy5cbiAgLy8gYC4uLmAgaXMgZXF1aXZhbGVudCB0byBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgZm9yIGFycmF5cy5cbiAgLy8gSWYgeW91IHJlcGxhY2UgdGhpcyBjb2RlIHdpdGggYFtleHBsaWNpdFJvbGVTZWxlY3RvciwgLi4uaW1wbGljaXRSb2xlU2VsZWN0b3JzXWAsIG1ha2Ugc3VyZSBldmVyeSB0cmFuc3BpbGF0aW9uIHRhcmdldCByZXRhaW5zIHRoZSBgLi4uYCBpbiBmYXZvciBvZiBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAuXG4gIHJldHVybiBbZXhwbGljaXRSb2xlU2VsZWN0b3JdLmNvbmNhdChBcnJheS5mcm9tKGltcGxpY2l0Um9sZVNlbGVjdG9ycykpLmpvaW4oJywnKTtcbn1cbmNvbnN0IGdldE5hbWVIaW50ID0gbmFtZSA9PiB7XG4gIGxldCBuYW1lSGludCA9ICcnO1xuICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZUhpbnQgPSAnJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBuYW1lSGludCA9IGAgYW5kIG5hbWUgXCIke25hbWV9XCJgO1xuICB9IGVsc2Uge1xuICAgIG5hbWVIaW50ID0gYCBhbmQgbmFtZSBcXGAke25hbWV9XFxgYDtcbiAgfVxuICByZXR1cm4gbmFtZUhpbnQ7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCByb2xlLCB7XG4gIG5hbWVcbn0gPSB7fSkgPT4ge1xuICByZXR1cm4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHJvbGUgXCIke3JvbGV9XCIke2dldE5hbWVIaW50KG5hbWUpfWA7XG59O1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGNvbnRhaW5lciwgcm9sZSwge1xuICBoaWRkZW4gPSAoMCwgX2FsbFV0aWxzLmdldENvbmZpZykoKS5kZWZhdWx0SGlkZGVuLFxuICBuYW1lLFxuICBkZXNjcmlwdGlvblxufSA9IHt9KSA9PiB7XG4gIGlmICgoMCwgX2FsbFV0aWxzLmdldENvbmZpZykoKS5fZGlzYWJsZUV4cGVuc2l2ZUVycm9yRGlhZ25vc3RpY3MpIHtcbiAgICByZXR1cm4gYFVuYWJsZSB0byBmaW5kIHJvbGU9XCIke3JvbGV9XCIke2dldE5hbWVIaW50KG5hbWUpfWA7XG4gIH1cbiAgbGV0IHJvbGVzID0gJyc7XG4gIEFycmF5LmZyb20oY29udGFpbmVyLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkRWxlbWVudCA9PiB7XG4gICAgcm9sZXMgKz0gKDAsIF9yb2xlSGVscGVycy5wcmV0dHlSb2xlcykoY2hpbGRFbGVtZW50LCB7XG4gICAgICBoaWRkZW4sXG4gICAgICBpbmNsdWRlRGVzY3JpcHRpb246IGRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbiAgICB9KTtcbiAgfSk7XG4gIGxldCByb2xlTWVzc2FnZTtcbiAgaWYgKHJvbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChoaWRkZW4gPT09IGZhbHNlKSB7XG4gICAgICByb2xlTWVzc2FnZSA9ICdUaGVyZSBhcmUgbm8gYWNjZXNzaWJsZSByb2xlcy4gQnV0IHRoZXJlIG1pZ2h0IGJlIHNvbWUgaW5hY2Nlc3NpYmxlIHJvbGVzLiAnICsgJ0lmIHlvdSB3aXNoIHRvIGFjY2VzcyB0aGVtLCB0aGVuIHNldCB0aGUgYGhpZGRlbmAgb3B0aW9uIHRvIGB0cnVlYC4gJyArICdMZWFybiBtb3JlIGFib3V0IHRoaXMgaGVyZTogaHR0cHM6Ly90ZXN0aW5nLWxpYnJhcnkuY29tL2RvY3MvZG9tLXRlc3RpbmctbGlicmFyeS9hcGktcXVlcmllcyNieXJvbGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByb2xlTWVzc2FnZSA9ICdUaGVyZSBhcmUgbm8gYXZhaWxhYmxlIHJvbGVzLic7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJvbGVNZXNzYWdlID0gYFxuSGVyZSBhcmUgdGhlICR7aGlkZGVuID09PSBmYWxzZSA/ICdhY2Nlc3NpYmxlJyA6ICdhdmFpbGFibGUnfSByb2xlczpcblxuICAke3JvbGVzLnJlcGxhY2UoL1xcbi9nLCAnXFxuICAnKS5yZXBsYWNlKC9cXG5cXHNcXHNcXG4vZywgJ1xcblxcbicpfVxuYC50cmltKCk7XG4gIH1cbiAgbGV0IG5hbWVIaW50ID0gJyc7XG4gIGlmIChuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lSGludCA9ICcnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIG5hbWVIaW50ID0gYCBhbmQgbmFtZSBcIiR7bmFtZX1cImA7XG4gIH0gZWxzZSB7XG4gICAgbmFtZUhpbnQgPSBgIGFuZCBuYW1lIFxcYCR7bmFtZX1cXGBgO1xuICB9XG4gIGxldCBkZXNjcmlwdGlvbkhpbnQgPSAnJztcbiAgaWYgKGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBkZXNjcmlwdGlvbkhpbnQgPSAnJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgZGVzY3JpcHRpb25IaW50ID0gYCBhbmQgZGVzY3JpcHRpb24gXCIke2Rlc2NyaXB0aW9ufVwiYDtcbiAgfSBlbHNlIHtcbiAgICBkZXNjcmlwdGlvbkhpbnQgPSBgIGFuZCBkZXNjcmlwdGlvbiBcXGAke2Rlc2NyaXB0aW9ufVxcYGA7XG4gIH1cbiAgcmV0dXJuIGBcblVuYWJsZSB0byBmaW5kIGFuICR7aGlkZGVuID09PSBmYWxzZSA/ICdhY2Nlc3NpYmxlICcgOiAnJ31lbGVtZW50IHdpdGggdGhlIHJvbGUgXCIke3JvbGV9XCIke25hbWVIaW50fSR7ZGVzY3JpcHRpb25IaW50fVxuXG4ke3JvbGVNZXNzYWdlfWAudHJpbSgpO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlSb2xlV2l0aFN1Z2dlc3Rpb25zID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeVJvbGUsIHF1ZXJ5QWxsQnlSb2xlLm5hbWUsICdxdWVyeUFsbCcpO1xuZXhwb3J0cy5xdWVyeUFsbEJ5Um9sZSA9IHF1ZXJ5QWxsQnlSb2xlV2l0aFN1Z2dlc3Rpb25zO1xuY29uc3QgW3F1ZXJ5QnlSb2xlLCBnZXRBbGxCeVJvbGUsIGdldEJ5Um9sZSwgZmluZEFsbEJ5Um9sZSwgZmluZEJ5Um9sZV0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeVJvbGUsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVJvbGUgPSBmaW5kQnlSb2xlO1xuZXhwb3J0cy5maW5kQWxsQnlSb2xlID0gZmluZEFsbEJ5Um9sZTtcbmV4cG9ydHMuZ2V0QnlSb2xlID0gZ2V0QnlSb2xlO1xuZXhwb3J0cy5nZXRBbGxCeVJvbGUgPSBnZXRBbGxCeVJvbGU7XG5leHBvcnRzLnF1ZXJ5QnlSb2xlID0gcXVlcnlCeVJvbGU7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsV0FBVyxHQUFHRixPQUFPLENBQUNHLGNBQWMsR0FBR0gsT0FBTyxDQUFDSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQ0ssWUFBWSxHQUFHTCxPQUFPLENBQUNNLFVBQVUsR0FBR04sT0FBTyxDQUFDTyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQzdJLElBQUlDLG9CQUFvQixHQUFHQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDM0QsSUFBSUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3RDLElBQUlFLFlBQVksR0FBR0YsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQzdDLElBQUlHLGFBQWEsR0FBR0gsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQy9DLElBQUlJLFFBQVEsR0FBR0osT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNwQyxJQUFJSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEM7O0FBRUEsTUFBTU4sY0FBYyxHQUFHQSxDQUFDWSxTQUFTLEVBQUVDLElBQUksRUFBRTtFQUN2Q0MsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFSCxTQUFTLENBQUNJLFNBQVMsRUFBRSxDQUFDLENBQUNDLGFBQWE7RUFDakRDLElBQUk7RUFDSkMsV0FBVztFQUNYQyxjQUFjLEdBQUcsS0FBSztFQUN0QkMsUUFBUTtFQUNSQyxJQUFJO0VBQ0pDLE9BQU87RUFDUEMsT0FBTztFQUNQQyxPQUFPO0VBQ1BDLEtB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