845a75d1aeed51afb2183209b96b9c80
'use strict';

require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
var isElementType = require('../../utils/misc/isElementType.js');
var getWindow = require('../../utils/misc/getWindow.js');
var isFocusable = require('../../utils/focus/isFocusable.js');
require('../../utils/keyDef/readNextDescriptor.js');
var cloneEvent = require('../../utils/misc/cloneEvent.js');
require('../../utils/misc/level.js');
require('../../options.js');
var focus = require('../focus.js');
var registry = require('./registry.js');
registry.behavior.click = (event, target, instance) => {
  const context = target.closest('button,input,label,select,textarea');
  const control = context && isElementType.isElementType(context, 'label') && context.control;
  if (control) {
    return () => {
      if (isFocusable.isFocusable(control)) {
        focus.focusElement(control);
      }
      instance.dispatchEvent(control, cloneEvent.cloneEvent(event));
    };
  } else if (isElementType.isElementType(target, 'input', {
    type: 'file'
  })) {
    return () => {
      // blur fires when the file selector pops up
      focus.blurElement(target);
      target.dispatchEvent(new (getWindow.getWindow(target).Event)('fileDialog'));
      // focus fires after the file selector has been closed
      focus.focusElement(target);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNFbGVtZW50VHlwZSIsImdldFdpbmRvdyIsImlzRm9jdXNhYmxlIiwiY2xvbmVFdmVudCIsImZvY3VzIiwicmVnaXN0cnkiLCJiZWhhdmlvciIsImNsaWNrIiwiZXZlbnQiLCJ0YXJnZXQiLCJpbnN0YW5jZSIsImNvbnRleHQiLCJjbG9zZXN0IiwiY29udHJvbCIsImZvY3VzRWxlbWVudCIsImRpc3BhdGNoRXZlbnQiLCJ0eXBlIiwiYmx1ckVsZW1lbnQiLCJFdmVudCJdLCJzb3VyY2VzIjpbImNsaWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vLi4vdXRpbHMvY2xpY2svaXNDbGlja2FibGVJbnB1dC5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvZWRpdC9pc0VkaXRhYmxlLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L21heExlbmd0aC5qcycpO1xudmFyIGlzRWxlbWVudFR5cGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9taXNjL2lzRWxlbWVudFR5cGUuanMnKTtcbnZhciBnZXRXaW5kb3cgPSByZXF1aXJlKCcuLi8uLi91dGlscy9taXNjL2dldFdpbmRvdy5qcycpO1xudmFyIGlzRm9jdXNhYmxlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZm9jdXMvaXNGb2N1c2FibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnZhciBjbG9uZUV2ZW50ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvbWlzYy9jbG9uZUV2ZW50LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9taXNjL2xldmVsLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi9vcHRpb25zLmpzJyk7XG52YXIgZm9jdXMgPSByZXF1aXJlKCcuLi9mb2N1cy5qcycpO1xudmFyIHJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9yZWdpc3RyeS5qcycpO1xuXG5yZWdpc3RyeS5iZWhhdmlvci5jbGljayA9IChldmVudCwgdGFyZ2V0LCBpbnN0YW5jZSk9PntcbiAgICBjb25zdCBjb250ZXh0ID0gdGFyZ2V0LmNsb3Nlc3QoJ2J1dHRvbixpbnB1dCxsYWJlbCxzZWxlY3QsdGV4dGFyZWEnKTtcbiAgICBjb25zdCBjb250cm9sID0gY29udGV4dCAmJiBpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUoY29udGV4dCwgJ2xhYmVsJykgJiYgY29udGV4dC5jb250cm9sO1xuICAgIGlmIChjb250cm9sKSB7XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgaWYgKGlzRm9jdXNhYmxlLmlzRm9jdXNhYmxlKGNvbnRyb2wpKSB7XG4gICAgICAgICAgICAgICAgZm9jdXMuZm9jdXNFbGVtZW50KGNvbnRyb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zdGFuY2UuZGlzcGF0Y2hFdmVudChjb250cm9sLCBjbG9uZUV2ZW50LmNsb25lRXZlbnQoZXZlbnQpKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZSh0YXJnZXQsICdpbnB1dCcsIHtcbiAgICAgICAgdHlwZTogJ2ZpbGUnXG4gICAgfSkpIHtcbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAvLyBibHVyIGZpcmVzIHdoZW4gdGhlIGZpbGUgc2VsZWN0b3IgcG9wcyB1cFxuICAgICAgICAgICAgZm9jdXMuYmx1ckVsZW1lbnQodGFyZ2V0KTtcbiAgICAgICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyAoZ2V0V2luZG93LmdldFdpbmRvdyh0YXJnZXQpKS5FdmVudCgnZmlsZURpYWxvZycpKTtcbiAgICAgICAgICAgIC8vIGZvY3VzIGZpcmVzIGFmdGVyIHRoZSBmaWxlIHNlbGVjdG9yIGhhcyBiZWVuIGNsb3NlZFxuICAgICAgICAgICAgZm9jdXMuZm9jdXNFbGVtZW50KHRhcmdldCk7XG4gICAgICAgIH07XG4gICAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hEQSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaERBLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztBQUN6Q0EsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3hDLElBQUlDLGFBQWEsR0FBR0QsT0FBTyxDQUFDLG1DQUFtQyxDQUFDO0FBQ2hFLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3hELElBQUlHLFdBQVcsR0FBR0gsT0FBTyxDQUFDLGtDQUFrQyxDQUFDO0FBQzdEQSxPQUFPLENBQUMsMENBQTBDLENBQUM7QUFDbkQsSUFBSUksVUFBVSxHQUFHSixPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFDMURBLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQ0EsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzNCLElBQUlLLEtBQUssR0FBR0wsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUNsQyxJQUFJTSxRQUFRLEdBQUdOLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFdkNNLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDQyxLQUFLLEdBQUcsQ0FBQ0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsS0FBRztFQUNqRCxNQUFNQyxPQUFPLEdBQUdGLE1BQU0sQ0FBQ0csT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0VBQ3BFLE1BQU1DLE9BQU8sR0FBR0YsT0FBTyxJQUFJWCxhQUFhLENBQUNBLGFBQWEsQ0FBQ1csT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJQSxPQUFPLENBQUNFLE9BQU87RUFDM0YsSUFBSUEsT0FBTyxFQUFFO0lBQ1QsT0FBTyxNQUFJO01BQ1AsSUFBSVgsV0FBVyxDQUFDQSxXQUFXLENBQUNXLE9BQU8sQ0FBQyxFQUFFO1FBQ2xDVCxLQUFLLENBQUNVLFlBQVksQ0FBQ0QsT0FBTyxDQUFDO01BQy9CO01BQ0FILFFBQVEsQ0FBQ0ssYUFBYSxDQUFDRixPQUFPLEVBQUVWLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDSyxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDO0VBQ0wsQ0FBQyxNQUFNLElBQUlSLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDUyxNQUFNLEVBQUUsT0FBTyxFQUFFO0lBQ3BETyxJQUFJLEVBQUU7RUFDVixDQUFDLENBQUMsRUFBRTtJQUNBLE9BQU8sTUFBSTtNQUNQO01BQ0FaLEtBQUssQ0FBQ2EsV0FBVyxDQUFDUixNQUFNLENBQUM7TUFDekJBLE1BQU0sQ0FBQ00sYUFBYSxDQUFDLEtBQUtkLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDUSxNQUFNLENBQUMsQ0FBRVMsS0FBSyxFQUFDLFlBQVksQ0FBQyxDQUFDO01BQzNFO01BQ0FkLEtBQUssQ0FBQ1UsWUFBWSxDQUFDTCxNQUFNLENBQUM7SUFDOUIsQ0FBQztFQUNMO0FBQ0osQ0FBQyJ9