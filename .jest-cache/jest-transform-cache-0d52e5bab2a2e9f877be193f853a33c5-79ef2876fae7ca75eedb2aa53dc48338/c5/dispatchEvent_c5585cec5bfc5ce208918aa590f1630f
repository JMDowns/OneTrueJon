bfd72ce4cda4c1d304ffaf5239d91b67
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('./behavior/click.js');
require('./behavior/cut.js');
require('./behavior/keydown.js');
require('./behavior/keypress.js');
require('./behavior/keyup.js');
require('./behavior/paste.js');
var registry = require('./behavior/registry.js');
var wrapEvent = require('./wrapEvent.js');
var eventMap = require('./eventMap.js');
var createEvent = require('./createEvent.js');
function dispatchUIEvent(target, type, init, preventDefault = false) {
  if (eventMap.isMouseEvent(type) || eventMap.isKeyboardEvent(type)) {
    init = {
      ...init,
      ...this.system.getUIEventModifiers()
    };
  }
  const event = createEvent.createEvent(type, target, init);
  return dispatchEvent.call(this, target, event, preventDefault);
}
function dispatchEvent(target, event, preventDefault = false) {
  var _behavior_type;
  const type = event.type;
  const behaviorImplementation = preventDefault ? () => {} : (_behavior_type = registry.behavior[type]) === null || _behavior_type === void 0 ? void 0 : _behavior_type.call(registry.behavior, event, target, this);
  if (behaviorImplementation) {
    event.preventDefault();
    let defaultPrevented = false;
    Object.defineProperty(event, 'defaultPrevented', {
      get: () => defaultPrevented
    });
    Object.defineProperty(event, 'preventDefault', {
      value: () => {
        defaultPrevented = event.cancelable;
      }
    });
    wrapEvent.wrapEvent(() => target.dispatchEvent(event));
    if (!defaultPrevented) {
      behaviorImplementation();
    }
    return !defaultPrevented;
  }
  return wrapEvent.wrapEvent(() => target.dispatchEvent(event));
}
function dispatchDOMEvent(target, type, init) {
  const event = createEvent.createEvent(type, target, init);
  wrapEvent.wrapEvent(() => target.dispatchEvent(event));
}
exports.dispatchDOMEvent = dispatchDOMEvent;
exports.dispatchEvent = dispatchEvent;
exports.dispatchUIEvent = dispatchUIEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJyZWdpc3RyeSIsIndyYXBFdmVudCIsImV2ZW50TWFwIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaFVJRXZlbnQiLCJ0YXJnZXQiLCJ0eXBlIiwiaW5pdCIsInByZXZlbnREZWZhdWx0IiwiaXNNb3VzZUV2ZW50IiwiaXNLZXlib2FyZEV2ZW50Iiwic3lzdGVtIiwiZ2V0VUlFdmVudE1vZGlmaWVycyIsImV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNhbGwiLCJfYmVoYXZpb3JfdHlwZSIsImJlaGF2aW9ySW1wbGVtZW50YXRpb24iLCJiZWhhdmlvciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJnZXQiLCJjYW5jZWxhYmxlIiwiZGlzcGF0Y2hET01FdmVudCJdLCJzb3VyY2VzIjpbImRpc3BhdGNoRXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5yZXF1aXJlKCcuL2JlaGF2aW9yL2NsaWNrLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL2N1dC5qcycpO1xucmVxdWlyZSgnLi9iZWhhdmlvci9rZXlkb3duLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL2tleXByZXNzLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL2tleXVwLmpzJyk7XG5yZXF1aXJlKCcuL2JlaGF2aW9yL3Bhc3RlLmpzJyk7XG52YXIgcmVnaXN0cnkgPSByZXF1aXJlKCcuL2JlaGF2aW9yL3JlZ2lzdHJ5LmpzJyk7XG52YXIgd3JhcEV2ZW50ID0gcmVxdWlyZSgnLi93cmFwRXZlbnQuanMnKTtcbnZhciBldmVudE1hcCA9IHJlcXVpcmUoJy4vZXZlbnRNYXAuanMnKTtcbnZhciBjcmVhdGVFdmVudCA9IHJlcXVpcmUoJy4vY3JlYXRlRXZlbnQuanMnKTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hVSUV2ZW50KHRhcmdldCwgdHlwZSwgaW5pdCwgcHJldmVudERlZmF1bHQgPSBmYWxzZSkge1xuICAgIGlmIChldmVudE1hcC5pc01vdXNlRXZlbnQodHlwZSkgfHwgZXZlbnRNYXAuaXNLZXlib2FyZEV2ZW50KHR5cGUpKSB7XG4gICAgICAgIGluaXQgPSB7XG4gICAgICAgICAgICAuLi5pbml0LFxuICAgICAgICAgICAgLi4udGhpcy5zeXN0ZW0uZ2V0VUlFdmVudE1vZGlmaWVycygpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50ID0gY3JlYXRlRXZlbnQuY3JlYXRlRXZlbnQodHlwZSwgdGFyZ2V0LCBpbml0KTtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudC5jYWxsKHRoaXMsIHRhcmdldCwgZXZlbnQsIHByZXZlbnREZWZhdWx0KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBldmVudCwgcHJldmVudERlZmF1bHQgPSBmYWxzZSkge1xuICAgIHZhciBfYmVoYXZpb3JfdHlwZTtcbiAgICBjb25zdCB0eXBlID0gZXZlbnQudHlwZTtcbiAgICBjb25zdCBiZWhhdmlvckltcGxlbWVudGF0aW9uID0gcHJldmVudERlZmF1bHQgPyAoKT0+e30gOiAoX2JlaGF2aW9yX3R5cGUgPSByZWdpc3RyeS5iZWhhdmlvclt0eXBlXSkgPT09IG51bGwgfHwgX2JlaGF2aW9yX3R5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iZWhhdmlvcl90eXBlLmNhbGwocmVnaXN0cnkuYmVoYXZpb3IsIGV2ZW50LCB0YXJnZXQsIHRoaXMpO1xuICAgIGlmIChiZWhhdmlvckltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBkZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ2RlZmF1bHRQcmV2ZW50ZWQnLCB7XG4gICAgICAgICAgICBnZXQ6ICgpPT5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICdwcmV2ZW50RGVmYXVsdCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiAoKT0+e1xuICAgICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBldmVudC5jYW5jZWxhYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgd3JhcEV2ZW50LndyYXBFdmVudCgoKT0+dGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpKTtcbiAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBiZWhhdmlvckltcGxlbWVudGF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFkZWZhdWx0UHJldmVudGVkO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcEV2ZW50LndyYXBFdmVudCgoKT0+dGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRE9NRXZlbnQodGFyZ2V0LCB0eXBlLCBpbml0KSB7XG4gICAgY29uc3QgZXZlbnQgPSBjcmVhdGVFdmVudC5jcmVhdGVFdmVudCh0eXBlLCB0YXJnZXQsIGluaXQpO1xuICAgIHdyYXBFdmVudC53cmFwRXZlbnQoKCk9PnRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KSk7XG59XG5cbmV4cG9ydHMuZGlzcGF0Y2hET01FdmVudCA9IGRpc3BhdGNoRE9NRXZlbnQ7XG5leHBvcnRzLmRpc3BhdGNoRXZlbnQgPSBkaXNwYXRjaEV2ZW50O1xuZXhwb3J0cy5kaXNwYXRjaFVJRXZlbnQgPSBkaXNwYXRjaFVJRXZlbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUU3REMsT0FB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