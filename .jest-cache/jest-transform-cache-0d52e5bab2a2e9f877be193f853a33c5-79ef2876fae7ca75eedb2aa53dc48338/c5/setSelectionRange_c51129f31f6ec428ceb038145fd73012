0bf9015c4dc6e16d42cf42b4a999f0d1
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
var selection = require('../../utils/focus/selection.js');
require('../../utils/keyDef/readNextDescriptor.js');
require('../../utils/misc/level.js');
require('../../options.js');
var setSelection = require('./setSelection.js');

/**
 * Backward-compatible selection.
 *
 * Handles input elements and contenteditable if it only contains a single text node.
 */
function setSelectionRange(element, anchorOffset, focusOffset) {
  var _element_firstChild;
  if (selection.hasOwnSelection(element)) {
    return setSelection.setSelection({
      focusNode: element,
      anchorOffset,
      focusOffset
    });
  }
  /* istanbul ignore else */
  if (isContentEditable.isContentEditable(element) && ((_element_firstChild = element.firstChild) === null || _element_firstChild === void 0 ? void 0 : _element_firstChild.nodeType) === 3) {
    return setSelection.setSelection({
      focusNode: element.firstChild,
      anchorOffset,
      focusOffset
    });
  }
  /* istanbul ignore next */
  throw new Error('Not implemented. The result of this interaction is unreliable.');
}
exports.setSelectionRange = setSelectionRange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsInNldFNlbGVjdGlvblJhbmdlIiwiZWxlbWVudCIsImFuY2hvck9mZnNldCIsImZvY3VzT2Zmc2V0IiwiX2VsZW1lbnRfZmlyc3RDaGlsZCIsImhhc093blNlbGVjdGlvbiIsImZvY3VzTm9kZSIsImZpcnN0Q2hpbGQiLCJub2RlVHlwZSIsIkVycm9yIl0sInNvdXJjZXMiOlsic2V0U2VsZWN0aW9uUmFuZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5yZXF1aXJlKCcuLi8uLi91dGlscy9jbGljay9pc0NsaWNrYWJsZUlucHV0LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgaXNDb250ZW50RWRpdGFibGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzQ29udGVudEVkaXRhYmxlLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L2hlbHBlcnMuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL21pc2MvbGV2ZWwuanMnKTtcbnJlcXVpcmUoJy4uLy4uL29wdGlvbnMuanMnKTtcbnZhciBzZXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL3NldFNlbGVjdGlvbi5qcycpO1xuXG4vKipcbiAqIEJhY2t3YXJkLWNvbXBhdGlibGUgc2VsZWN0aW9uLlxuICpcbiAqIEhhbmRsZXMgaW5wdXQgZWxlbWVudHMgYW5kIGNvbnRlbnRlZGl0YWJsZSBpZiBpdCBvbmx5IGNvbnRhaW5zIGEgc2luZ2xlIHRleHQgbm9kZS5cbiAqLyBmdW5jdGlvbiBzZXRTZWxlY3Rpb25SYW5nZShlbGVtZW50LCBhbmNob3JPZmZzZXQsIGZvY3VzT2Zmc2V0KSB7XG4gICAgdmFyIF9lbGVtZW50X2ZpcnN0Q2hpbGQ7XG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24oZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIHNldFNlbGVjdGlvbi5zZXRTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZm9jdXNOb2RlOiBlbGVtZW50LFxuICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgZm9jdXNPZmZzZXRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovIGlmIChpc0NvbnRlbnRFZGl0YWJsZS5pc0NvbnRlbnRFZGl0YWJsZShlbGVtZW50KSAmJiAoKF9lbGVtZW50X2ZpcnN0Q2hpbGQgPSBlbGVtZW50LmZpcnN0Q2hpbGQpID09PSBudWxsIHx8IF9lbGVtZW50X2ZpcnN0Q2hpbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbGVtZW50X2ZpcnN0Q2hpbGQubm9kZVR5cGUpID09PSAzKSB7XG4gICAgICAgIHJldHVybiBzZXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHtcbiAgICAgICAgICAgIGZvY3VzTm9kZTogZWxlbWVudC5maXJzdENoaWxkLFxuICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgZm9jdXNPZmZzZXRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkLiBUaGUgcmVzdWx0IG9mIHRoaXMgaW50ZXJhY3Rpb24gaXMgdW5yZWxpYWJsZS4nKTtcbn1cblxuZXhwb3J0cy5zZXRTZWxlY3Rpb25SYW5nZSA9IHNldFNlbGVjdGlvblJhbmdlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFFN0RDLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUNoREEsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hELElBQUlDLGlCQUFpQixHQUFHRCxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDeEVBLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztBQUN6Q0EsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3hDQSxPQUFPLENBQUMsc0NBQXNDLENBQUM7QUFDL0MsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFDekRBLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQztBQUNuREEsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3BDQSxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDM0IsSUFBSUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsbUJBQW1CLENBQUM7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBSSxTQUFTSSxpQkFBaUJBLENBQUNDLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUU7RUFDL0QsSUFBSUMsbUJBQW1CO0VBQ3ZCLElBQUlOLFNBQVMsQ0FBQ08sZUFBZSxDQUFDSixPQUFPLENBQUMsRUFBRTtJQUNwQyxPQUFPRixZQUFZLENBQUNBLFlBQVksQ0FBQztNQUM3Qk8sU0FBUyxFQUFFTCxPQUFPO01BQ2xCQyxZQUFZO01BQ1pDO0lBQ0osQ0FBQyxDQUFDO0VBQ047RUFDQTtFQUEyQixJQUFJTixpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQ0csbUJBQW1CLEdBQUdILE9BQU8sQ0FBQ00sVUFBVSxNQUFNLElBQUksSUFBSUgsbUJBQW1CLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLG1CQUFtQixDQUFDSSxRQUFRLE1BQU0sQ0FBQyxFQUFFO0lBQ2xOLE9BQU9ULFlBQVksQ0FBQ0EsWUFBWSxDQUFDO01BQzdCTyxTQUFTLEVBQUVMLE9BQU8sQ0FBQ00sVUFBVTtNQUM3QkwsWUFBWTtNQUNaQztJQUNKLENBQUMsQ0FBQztFQUNOO0VBQ0E7RUFBMkIsTUFBTSxJQUFJTSxLQUFLLENBQUMsZ0VBQWdFLENBQUM7QUFDaEg7QUFFQWYsT0FBTyxDQUFDTSxpQkFBaUIsR0FBR0EsaUJBQWlCIn0=