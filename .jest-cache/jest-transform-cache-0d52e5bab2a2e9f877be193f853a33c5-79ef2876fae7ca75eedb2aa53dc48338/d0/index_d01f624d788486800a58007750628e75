c8f6c34804bf05eb3b82afa6e0e209f5
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('../utils/click/isClickableInput.js');
require('../utils/dataTransfer/Clipboard.js');
require('../utils/edit/isEditable.js');
require('../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
require('../utils/keyDef/readNextDescriptor.js');
require('../utils/misc/level.js');
var wait = require('../utils/misc/wait.js');
require('../options.js');
var parseKeyDef = require('./parseKeyDef.js');
async function keyboard(text) {
  const actions = parseKeyDef.parseKeyDef(this.config.keyboardMap, text);
  for (let i = 0; i < actions.length; i++) {
    await wait.wait(this.config);
    await keyboardAction(this, actions[i]);
  }
}
async function keyboardAction(instance, {
  keyDef,
  releasePrevious,
  releaseSelf,
  repeat
}) {
  const {
    system
  } = instance;
  // Release the key automatically if it was pressed before.
  if (system.keyboard.isKeyPressed(keyDef)) {
    await system.keyboard.keyup(instance, keyDef);
  }
  if (!releasePrevious) {
    for (let i = 1; i <= repeat; i++) {
      await system.keyboard.keydown(instance, keyDef);
      if (i < repeat) {
        await wait.wait(instance.config);
      }
    }
    // Release the key only on the last iteration on `state.repeatKey`.
    if (releaseSelf) {
      await system.keyboard.keyup(instance, keyDef);
    }
  }
}
async function releaseAllKeys(instance) {
  for (const k of instance.system.keyboard.getPressedKeys()) {
    await instance.system.keyboard.keyup(instance, k);
  }
}
exports.keyboard = keyboard;
exports.releaseAllKeys = releaseAllKeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJ3YWl0IiwicGFyc2VLZXlEZWYiLCJrZXlib2FyZCIsInRleHQiLCJhY3Rpb25zIiwiY29uZmlnIiwia2V5Ym9hcmRNYXAiLCJpIiwibGVuZ3RoIiwia2V5Ym9hcmRBY3Rpb24iLCJpbnN0YW5jZSIsImtleURlZiIsInJlbGVhc2VQcmV2aW91cyIsInJlbGVhc2VTZWxmIiwicmVwZWF0Iiwic3lzdGVtIiwiaXNLZXlQcmVzc2VkIiwia2V5dXAiLCJrZXlkb3duIiwicmVsZWFzZUFsbEtleXMiLCJrIiwiZ2V0UHJlc3NlZEtleXMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnJlcXVpcmUoJy4uL3V0aWxzL2NsaWNrL2lzQ2xpY2thYmxlSW5wdXQuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2VkaXQvaXNFZGl0YWJsZS5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZWRpdC9tYXhMZW5ndGguanMnKTtcbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvaGVscGVycy5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMva2V5RGVmL3JlYWROZXh0RGVzY3JpcHRvci5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvbWlzYy9sZXZlbC5qcycpO1xudmFyIHdhaXQgPSByZXF1aXJlKCcuLi91dGlscy9taXNjL3dhaXQuanMnKTtcbnJlcXVpcmUoJy4uL29wdGlvbnMuanMnKTtcbnZhciBwYXJzZUtleURlZiA9IHJlcXVpcmUoJy4vcGFyc2VLZXlEZWYuanMnKTtcblxuYXN5bmMgZnVuY3Rpb24ga2V5Ym9hcmQodGV4dCkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBwYXJzZUtleURlZi5wYXJzZUtleURlZih0aGlzLmNvbmZpZy5rZXlib2FyZE1hcCwgdGV4dCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGFjdGlvbnMubGVuZ3RoOyBpKyspe1xuICAgICAgICBhd2FpdCB3YWl0LndhaXQodGhpcy5jb25maWcpO1xuICAgICAgICBhd2FpdCBrZXlib2FyZEFjdGlvbih0aGlzLCBhY3Rpb25zW2ldKTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBrZXlib2FyZEFjdGlvbihpbnN0YW5jZSwgeyBrZXlEZWYsIHJlbGVhc2VQcmV2aW91cywgcmVsZWFzZVNlbGYsIHJlcGVhdCB9KSB7XG4gICAgY29uc3QgeyBzeXN0ZW0gfSA9IGluc3RhbmNlO1xuICAgIC8vIFJlbGVhc2UgdGhlIGtleSBhdXRvbWF0aWNhbGx5IGlmIGl0IHdhcyBwcmVzc2VkIGJlZm9yZS5cbiAgICBpZiAoc3lzdGVtLmtleWJvYXJkLmlzS2V5UHJlc3NlZChrZXlEZWYpKSB7XG4gICAgICAgIGF3YWl0IHN5c3RlbS5rZXlib2FyZC5rZXl1cChpbnN0YW5jZSwga2V5RGVmKTtcbiAgICB9XG4gICAgaWYgKCFyZWxlYXNlUHJldmlvdXMpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8PSByZXBlYXQ7IGkrKyl7XG4gICAgICAgICAgICBhd2FpdCBzeXN0ZW0ua2V5Ym9hcmQua2V5ZG93bihpbnN0YW5jZSwga2V5RGVmKTtcbiAgICAgICAgICAgIGlmIChpIDwgcmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgd2FpdC53YWl0KGluc3RhbmNlLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVsZWFzZSB0aGUga2V5IG9ubHkgb24gdGhlIGxhc3QgaXRlcmF0aW9uIG9uIGBzdGF0ZS5yZXBlYXRLZXlgLlxuICAgICAgICBpZiAocmVsZWFzZVNlbGYpIHtcbiAgICAgICAgICAgIGF3YWl0IHN5c3RlbS5rZXlib2FyZC5rZXl1cChpbnN0YW5jZSwga2V5RGVmKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlbGVhc2VBbGxLZXlzKGluc3RhbmNlKSB7XG4gICAgZm9yIChjb25zdCBrIG9mIGluc3RhbmNlLnN5c3RlbS5rZXlib2FyZC5nZXRQcmVzc2VkS2V5cygpKXtcbiAgICAgICAgYXdhaXQgaW5zdGFuY2Uuc3lzdGVtLmtleWJvYXJkLmtleXVwKGluc3RhbmNlLCBrKTtcbiAgICB9XG59XG5cbmV4cG9ydHMua2V5Ym9hcmQgPSBrZXlib2FyZDtcbmV4cG9ydHMucmVsZWFzZUFsbEtleXMgPSByZWxlYXNlQWxsS2V5cztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBRTdEQyxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFDN0NBLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQztBQUM3Q0EsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBQ3RDQSxPQUFPLENBQUMsNEJBQTRCLENBQUM7QUFDckNBLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQztBQUMvQ0EsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hEQSxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDakMsSUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDM0NBLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDeEIsSUFBSUUsV0FBVyxHQUFHRixPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFFN0MsZUFBZUcsUUFBUUEsQ0FBQ0MsSUFBSSxFQUFFO0VBQzFCLE1BQU1DLE9BQU8sR0FBR0gsV0FBVyxDQUFDQSxXQUFXLENBQUMsSUFBSSxDQUFDSSxNQUFNLENBQUNDLFdBQVcsRUFBRUgsSUFBSSxDQUFDO0VBQ3RFLEtBQUksSUFBSUksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxPQUFPLENBQUNJLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUM7SUFDbkMsTUFBTVAsSUFBSSxDQUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDSyxNQUFNLENBQUM7SUFDNUIsTUFBTUksY0FBYyxDQUFDLElBQUksRUFBRUwsT0FBTyxDQUFDRyxDQUFDLENBQUMsQ0FBQztFQUMxQztBQUNKO0FBQ0EsZUFBZUUsY0FBY0EsQ0FBQ0MsUUFBUSxFQUFFO0VBQUVDLE1BQU07RUFBRUMsZUFBZTtFQUFFQyxXQUFXO0VBQUVDO0FBQU8sQ0FBQyxFQUFFO0VBQ3RGLE1BQU07SUFBRUM7RUFBTyxDQUFDLEdBQUdMLFFBQVE7RUFDM0I7RUFDQSxJQUFJSyxNQUFNLENBQUNiLFFBQVEsQ0FBQ2MsWUFBWSxDQUFDTCxNQUFNLENBQUMsRUFBRTtJQUN0QyxNQUFNSSxNQUFNLENBQUNiLFFBQVEsQ0FBQ2UsS0FBSyxDQUFDUCxRQUFRLEVBQUVDLE1BQU0sQ0FBQztFQUNqRDtFQUNBLElBQUksQ0FBQ0MsZUFBZSxFQUFFO0lBQ2xCLEtBQUksSUFBSUwsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxJQUFJTyxNQUFNLEVBQUVQLENBQUMsRUFBRSxFQUFDO01BQzVCLE1BQU1RLE1BQU0sQ0FBQ2IsUUFBUSxDQUFDZ0IsT0FBTyxDQUFDUixRQUFRLEVBQUVDLE1BQU0sQ0FBQztNQUMvQyxJQUFJSixDQUFDLEdBQUdPLE1BQU0sRUFBRTtRQUNaLE1BQU1kLElBQUksQ0FBQ0EsSUFBSSxDQUFDVSxRQUFRLENBQUNMLE1BQU0sQ0FBQztNQUNwQztJQUNKO0lBQ0E7SUFDQSxJQUFJUSxXQUFXLEVBQUU7TUFDYixNQUFNRSxNQUFNLENBQUNiLFFBQVEsQ0FBQ2UsS0FBSyxDQUFDUCxRQUFRLEVBQUVDLE1BQU0sQ0FBQztJQUNqRDtFQUNKO0FBQ0o7QUFDQSxlQUFlUSxjQUFjQSxDQUFDVCxRQUFRLEVBQUU7RUFDcEMsS0FBSyxNQUFNVSxDQUFDLElBQUlWLFFBQVEsQ0FBQ0ssTUFBTSxDQUFDYixRQUFRLENBQUNtQixjQUFjLENBQUMsQ0FBQyxFQUFDO0lBQ3RELE1BQU1YLFFBQVEsQ0FBQ0ssTUFBTSxDQUFDYixRQUFRLENBQUNlLEtBQUssQ0FBQ1AsUUFBUSxFQUFFVSxDQUFDLENBQUM7RUFDckQ7QUFDSjtBQUVBdkIsT0FBTyxDQUFDSyxRQUFRLEdBQUdBLFFBQVE7QUFDM0JMLE9BQU8sQ0FBQ3NCLGNBQWMsR0FBR0EsY0FBYyJ9