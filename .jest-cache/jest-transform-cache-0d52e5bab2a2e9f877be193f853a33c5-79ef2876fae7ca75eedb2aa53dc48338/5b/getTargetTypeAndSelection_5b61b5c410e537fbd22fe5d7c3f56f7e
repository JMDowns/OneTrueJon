f921646b671b7544eac48ee4a7376e39
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var UI = require('../../document/UI.js');
require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
var selection = require('../../utils/focus/selection.js');
require('../../utils/keyDef/readNextDescriptor.js');
require('../../utils/misc/level.js');
require('../../options.js');

/**
 * Determine which selection logic and selection ranges to consider.
 */
function getTargetTypeAndSelection(node) {
  const element = getElement(node);
  if (element && selection.hasOwnSelection(element)) {
    return {
      type: 'input',
      selection: UI.getUISelection(element)
    };
  }
  const selection$1 = element === null || element === void 0 ? void 0 : element.ownerDocument.getSelection();
  // It is possible to extend a single-range selection into a contenteditable.
  // This results in the range acting like a range outside of contenteditable.
  const isCE = isContentEditable.getContentEditable(node) && (selection$1 === null || selection$1 === void 0 ? void 0 : selection$1.anchorNode) && isContentEditable.getContentEditable(selection$1.anchorNode);
  return {
    type: isCE ? 'contenteditable' : 'default',
    selection: selection$1
  };
}
function getElement(node) {
  return node.nodeType === 1 ? node : node.parentElement;
}
exports.getTargetTypeAndSelection = getTargetTypeAndSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVJIiwicmVxdWlyZSIsImlzQ29udGVudEVkaXRhYmxlIiwic2VsZWN0aW9uIiwiZ2V0VGFyZ2V0VHlwZUFuZFNlbGVjdGlvbiIsIm5vZGUiLCJlbGVtZW50IiwiZ2V0RWxlbWVudCIsImhhc093blNlbGVjdGlvbiIsInR5cGUiLCJnZXRVSVNlbGVjdGlvbiIsInNlbGVjdGlvbiQxIiwib3duZXJEb2N1bWVudCIsImdldFNlbGVjdGlvbiIsImlzQ0UiLCJnZXRDb250ZW50RWRpdGFibGUiLCJhbmNob3JOb2RlIiwibm9kZVR5cGUiLCJwYXJlbnRFbGVtZW50Il0sInNvdXJjZXMiOlsiZ2V0VGFyZ2V0VHlwZUFuZFNlbGVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBVSSA9IHJlcXVpcmUoJy4uLy4uL2RvY3VtZW50L1VJLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9jbGljay9pc0NsaWNrYWJsZUlucHV0LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgaXNDb250ZW50RWRpdGFibGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzQ29udGVudEVkaXRhYmxlLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L2hlbHBlcnMuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL21pc2MvbGV2ZWwuanMnKTtcbnJlcXVpcmUoJy4uLy4uL29wdGlvbnMuanMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hpY2ggc2VsZWN0aW9uIGxvZ2ljIGFuZCBzZWxlY3Rpb24gcmFuZ2VzIHRvIGNvbnNpZGVyLlxuICovIGZ1bmN0aW9uIGdldFRhcmdldFR5cGVBbmRTZWxlY3Rpb24obm9kZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRFbGVtZW50KG5vZGUpO1xuICAgIGlmIChlbGVtZW50ICYmIHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24oZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICBzZWxlY3Rpb246IFVJLmdldFVJU2VsZWN0aW9uKGVsZW1lbnQpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvbiQxID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgLy8gSXQgaXMgcG9zc2libGUgdG8gZXh0ZW5kIGEgc2luZ2xlLXJhbmdlIHNlbGVjdGlvbiBpbnRvIGEgY29udGVudGVkaXRhYmxlLlxuICAgIC8vIFRoaXMgcmVzdWx0cyBpbiB0aGUgcmFuZ2UgYWN0aW5nIGxpa2UgYSByYW5nZSBvdXRzaWRlIG9mIGNvbnRlbnRlZGl0YWJsZS5cbiAgICBjb25zdCBpc0NFID0gaXNDb250ZW50RWRpdGFibGUuZ2V0Q29udGVudEVkaXRhYmxlKG5vZGUpICYmIChzZWxlY3Rpb24kMSA9PT0gbnVsbCB8fCBzZWxlY3Rpb24kMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VsZWN0aW9uJDEuYW5jaG9yTm9kZSkgJiYgaXNDb250ZW50RWRpdGFibGUuZ2V0Q29udGVudEVkaXRhYmxlKHNlbGVjdGlvbiQxLmFuY2hvck5vZGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGlzQ0UgPyAnY29udGVudGVkaXRhYmxlJyA6ICdkZWZhdWx0JyxcbiAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24kMVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMSA/IG5vZGUgOiBub2RlLnBhcmVudEVsZW1lbnQ7XG59XG5cbmV4cG9ydHMuZ2V0VGFyZ2V0VHlwZUFuZFNlbGVjdGlvbiA9IGdldFRhcmdldFR5cGVBbmRTZWxlY3Rpb247XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUU3RCxJQUFJQyxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUN4Q0EsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hEQSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaEQsSUFBSUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUN4RUEsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQ3pDQSxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFDeENBLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQztBQUMvQyxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztBQUN6REEsT0FBTyxDQUFDLDBDQUEwQyxDQUFDO0FBQ25EQSxPQUFPLENBQUMsMkJBQTJCLENBQUM7QUFDcENBLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQzs7QUFFM0I7QUFDQTtBQUNBO0FBQUksU0FBU0cseUJBQXlCQSxDQUFDQyxJQUFJLEVBQUU7RUFDekMsTUFBTUMsT0FBTyxHQUFHQyxVQUFVLENBQUNGLElBQUksQ0FBQztFQUNoQyxJQUFJQyxPQUFPLElBQUlILFNBQVMsQ0FBQ0ssZUFBZSxDQUFDRixPQUFPLENBQUMsRUFBRTtJQUMvQyxPQUFPO01BQ0hHLElBQUksRUFBRSxPQUFPO01BQ2JOLFNBQVMsRUFBRUgsRUFBRSxDQUFDVSxjQUFjLENBQUNKLE9BQU87SUFDeEMsQ0FBQztFQUNMO0VBQ0EsTUFBTUssV0FBVyxHQUFHTCxPQUFPLEtBQUssSUFBSSxJQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLE9BQU8sQ0FBQ00sYUFBYSxDQUFDQyxZQUFZLENBQUMsQ0FBQztFQUMxRztFQUNBO0VBQ0EsTUFBTUMsSUFBSSxHQUFHWixpQkFBaUIsQ0FBQ2Esa0JBQWtCLENBQUNWLElBQUksQ0FBQyxLQUFLTSxXQUFXLEtBQUssSUFBSSxJQUFJQSxXQUFXLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLFdBQVcsQ0FBQ0ssVUFBVSxDQUFDLElBQUlkLGlCQUFpQixDQUFDYSxrQkFBa0IsQ0FBQ0osV0FBVyxDQUFDSyxVQUFVLENBQUM7RUFDN00sT0FBTztJQUNIUCxJQUFJLEVBQUVLLElBQUksR0FBRyxpQkFBaUIsR0FBRyxTQUFTO0lBQzFDWCxTQUFTLEVBQUVRO0VBQ2YsQ0FBQztBQUNMO0FBQ0EsU0FBU0osVUFBVUEsQ0FBQ0YsSUFBSSxFQUFFO0VBQ3RCLE9BQU9BLElBQUksQ0FBQ1ksUUFBUSxLQUFLLENBQUMsR0FBR1osSUFBSSxHQUFHQSxJQUFJLENBQUNhLGFBQWE7QUFDMUQ7QUFFQXBCLE9BQU8sQ0FBQ00seUJBQXlCLEdBQUdBLHlCQUF5QiJ9