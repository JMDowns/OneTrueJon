8375c12dd85793b03f14b2eadcde10c7
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var UI = require('../../document/UI.js');
require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
var selection = require('../../utils/focus/selection.js');
require('../../utils/keyDef/readNextDescriptor.js');
require('../../utils/misc/level.js');
require('../../options.js');
function resolveCaretPosition({
  target,
  node,
  offset
}) {
  if (selection.hasOwnSelection(target)) {
    return {
      node: target,
      offset: offset !== null && offset !== void 0 ? offset : UI.getUIValue(target).length
    };
  } else if (node) {
    return {
      node,
      offset: offset !== null && offset !== void 0 ? offset : node.nodeType === 3 ? node.nodeValue.length : node.childNodes.length
    };
  }
  return findNodeAtTextOffset(target, offset);
}
function findNodeAtTextOffset(node, offset, isRoot = true) {
  // When clicking after the content the browser behavior can be complicated:
  // 1. If there is textContent after the last element child,
  // the cursor is moved there.
  // 2. If there is textContent in the last element child,
  // the browser moves the cursor to the last non-empty text node inside this element.
  // 3. Otherwise the cursor is moved to the end of the target.
  let i = offset === undefined ? node.childNodes.length - 1 : 0;
  const step = offset === undefined ? -1 : +1;
  while (offset === undefined ? i >= (isRoot ? Math.max(node.childNodes.length - 1, 0) : 0) : i <= node.childNodes.length) {
    if (offset && i === node.childNodes.length) {
      throw new Error('The given offset is out of bounds.');
    }
    const c = node.childNodes.item(i);
    const text = String(c.textContent);
    if (text.length) {
      if (offset !== undefined && text.length < offset) {
        offset -= text.length;
      } else if (c.nodeType === 1) {
        return findNodeAtTextOffset(c, offset, false);
      } else {
        // The pre-commit hooks keeps changing this
        // See https://github.com/kentcdodds/kcd-scripts/issues/218
        /* istanbul ignore else */ // eslint-disable-next-line no-lonely-if
        if (c.nodeType === 3) {
          return {
            node: c,
            offset: offset !== null && offset !== void 0 ? offset : c.nodeValue.length
          };
        }
      }
    }
    i += step;
  }
  return {
    node,
    offset: node.childNodes.length
  };
}
exports.resolveCaretPosition = resolveCaretPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVJIiwicmVxdWlyZSIsInNlbGVjdGlvbiIsInJlc29sdmVDYXJldFBvc2l0aW9uIiwidGFyZ2V0Iiwibm9kZSIsIm9mZnNldCIsImhhc093blNlbGVjdGlvbiIsImdldFVJVmFsdWUiLCJsZW5ndGgiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsImNoaWxkTm9kZXMiLCJmaW5kTm9kZUF0VGV4dE9mZnNldCIsImlzUm9vdCIsImkiLCJ1bmRlZmluZWQiLCJzdGVwIiwiTWF0aCIsIm1heCIsIkVycm9yIiwiYyIsIml0ZW0iLCJ0ZXh0IiwiU3RyaW5nIiwidGV4dENvbnRlbnQiXSwic291cmNlcyI6WyJyZXNvbHZlQ2FyZXRQb3NpdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBVSSA9IHJlcXVpcmUoJy4uLy4uL2RvY3VtZW50L1VJLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9jbGljay9pc0NsaWNrYWJsZUlucHV0LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L2hlbHBlcnMuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL21pc2MvbGV2ZWwuanMnKTtcbnJlcXVpcmUoJy4uLy4uL29wdGlvbnMuanMnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZUNhcmV0UG9zaXRpb24oeyB0YXJnZXQsIG5vZGUsIG9mZnNldCB9KSB7XG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9kZTogdGFyZ2V0LFxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgIT09IG51bGwgJiYgb2Zmc2V0ICE9PSB2b2lkIDAgPyBvZmZzZXQgOiBVSS5nZXRVSVZhbHVlKHRhcmdldCkubGVuZ3RoXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgIT09IG51bGwgJiYgb2Zmc2V0ICE9PSB2b2lkIDAgPyBvZmZzZXQgOiBub2RlLm5vZGVUeXBlID09PSAzID8gbm9kZS5ub2RlVmFsdWUubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZmluZE5vZGVBdFRleHRPZmZzZXQodGFyZ2V0LCBvZmZzZXQpO1xufVxuZnVuY3Rpb24gZmluZE5vZGVBdFRleHRPZmZzZXQobm9kZSwgb2Zmc2V0LCBpc1Jvb3QgPSB0cnVlKSB7XG4gICAgLy8gV2hlbiBjbGlja2luZyBhZnRlciB0aGUgY29udGVudCB0aGUgYnJvd3NlciBiZWhhdmlvciBjYW4gYmUgY29tcGxpY2F0ZWQ6XG4gICAgLy8gMS4gSWYgdGhlcmUgaXMgdGV4dENvbnRlbnQgYWZ0ZXIgdGhlIGxhc3QgZWxlbWVudCBjaGlsZCxcbiAgICAvLyB0aGUgY3Vyc29yIGlzIG1vdmVkIHRoZXJlLlxuICAgIC8vIDIuIElmIHRoZXJlIGlzIHRleHRDb250ZW50IGluIHRoZSBsYXN0IGVsZW1lbnQgY2hpbGQsXG4gICAgLy8gdGhlIGJyb3dzZXIgbW92ZXMgdGhlIGN1cnNvciB0byB0aGUgbGFzdCBub24tZW1wdHkgdGV4dCBub2RlIGluc2lkZSB0aGlzIGVsZW1lbnQuXG4gICAgLy8gMy4gT3RoZXJ3aXNlIHRoZSBjdXJzb3IgaXMgbW92ZWQgdG8gdGhlIGVuZCBvZiB0aGUgdGFyZ2V0LlxuICAgIGxldCBpID0gb2Zmc2V0ID09PSB1bmRlZmluZWQgPyBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSA6IDA7XG4gICAgY29uc3Qgc3RlcCA9IG9mZnNldCA9PT0gdW5kZWZpbmVkID8gLTEgOiArMTtcbiAgICB3aGlsZShvZmZzZXQgPT09IHVuZGVmaW5lZCA/IGkgPj0gKGlzUm9vdCA/IE1hdGgubWF4KG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxLCAwKSA6IDApIDogaSA8PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKXtcbiAgICAgICAgaWYgKG9mZnNldCAmJiBpID09PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBnaXZlbiBvZmZzZXQgaXMgb3V0IG9mIGJvdW5kcy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjID0gbm9kZS5jaGlsZE5vZGVzLml0ZW0oaSk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBTdHJpbmcoYy50ZXh0Q29udGVudCk7XG4gICAgICAgIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIHRleHQubGVuZ3RoIDwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0IC09IHRleHQubGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbmROb2RlQXRUZXh0T2Zmc2V0KGMsIG9mZnNldCwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcHJlLWNvbW1pdCBob29rcyBrZWVwcyBjaGFuZ2luZyB0aGlzXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9rZW50Y2RvZGRzL2tjZC1zY3JpcHRzL2lzc3Vlcy8yMThcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZWx5LWlmXG4gICAgICAgICAgICAgICAgaWYgKGMubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCAhPT0gbnVsbCAmJiBvZmZzZXQgIT09IHZvaWQgMCA/IG9mZnNldCA6IGMubm9kZVZhbHVlLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpICs9IHN0ZXA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGUsXG4gICAgICAgIG9mZnNldDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aFxuICAgIH07XG59XG5cbmV4cG9ydHMucmVzb2x2ZUNhcmV0UG9zaXRpb24gPSByZXNvbHZlQ2FyZXRQb3NpdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBRTdELElBQUlDLEVBQUUsR0FBR0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQ3hDQSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaERBLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUNoREEsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQ3pDQSxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFDeENBLE9B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