4fb5440edaedf459d448b49fbd51ccde
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function _define_property(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
class Buttons {
  getButtons() {
    let v = 0;
    for (const button of Object.keys(this.pressed)) {
      // eslint-disable-next-line no-bitwise
      v |= 2 ** Number(button);
    }
    return v;
  }
  down(keyDef) {
    const button = getMouseButtonId(keyDef.button);
    if (button in this.pressed) {
      this.pressed[button].push(keyDef);
      return undefined;
    }
    this.pressed[button] = [keyDef];
    return button;
  }
  up(keyDef) {
    const button = getMouseButtonId(keyDef.button);
    if (button in this.pressed) {
      this.pressed[button] = this.pressed[button].filter(k => k.name !== keyDef.name);
      if (this.pressed[button].length === 0) {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete this.pressed[button];
        return button;
      }
    }
    return undefined;
  }
  constructor() {
    _define_property(this, "pressed", {});
  }
}
const MouseButton = {
  primary: 0,
  secondary: 1,
  auxiliary: 2,
  back: 3,
  X1: 3,
  forward: 4,
  X2: 4
};
function getMouseButtonId(button = 0) {
  if (button in MouseButton) {
    return MouseButton[button];
  }
  return Number(button);
}
// On the `MouseEvent.button` property auxiliary and secondary button are flipped compared to `MouseEvent.buttons`.
const MouseButtonFlip = {
  1: 2,
  2: 1
};
function getMouseEventButton(button) {
  button = getMouseButtonId(button);
  if (button in MouseButtonFlip) {
    return MouseButtonFlip[button];
  }
  return button;
}
exports.Buttons = Buttons;
exports.MouseButton = MouseButton;
exports.MouseButtonFlip = MouseButtonFlip;
exports.getMouseButtonId = getMouseButtonId;
exports.getMouseEventButton = getMouseEventButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9kZWZpbmVfcHJvcGVydHkiLCJvYmoiLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJCdXR0b25zIiwiZ2V0QnV0dG9ucyIsInYiLCJidXR0b24iLCJrZXlzIiwicHJlc3NlZCIsIk51bWJlciIsImRvd24iLCJrZXlEZWYiLCJnZXRNb3VzZUJ1dHRvbklkIiwicHVzaCIsInVuZGVmaW5lZCIsInVwIiwiZmlsdGVyIiwiayIsIm5hbWUiLCJsZW5ndGgiLCJjb25zdHJ1Y3RvciIsIk1vdXNlQnV0dG9uIiwicHJpbWFyeSIsInNlY29uZGFyeSIsImF1eGlsaWFyeSIsImJhY2siLCJYMSIsImZvcndhcmQiLCJYMiIsIk1vdXNlQnV0dG9uRmxpcCIsImdldE1vdXNlRXZlbnRCdXR0b24iXSwic291cmNlcyI6WyJidXR0b25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gX2RlZmluZV9wcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuY2xhc3MgQnV0dG9ucyB7XG4gICAgZ2V0QnV0dG9ucygpIHtcbiAgICAgICAgbGV0IHYgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3Qua2V5cyh0aGlzLnByZXNzZWQpKXtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgICAgICB2IHw9IDIgKiogTnVtYmVyKGJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGRvd24oa2V5RGVmKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGdldE1vdXNlQnV0dG9uSWQoa2V5RGVmLmJ1dHRvbik7XG4gICAgICAgIGlmIChidXR0b24gaW4gdGhpcy5wcmVzc2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWRbYnV0dG9uXS5wdXNoKGtleURlZik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlc3NlZFtidXR0b25dID0gW1xuICAgICAgICAgICAga2V5RGVmXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIHVwKGtleURlZikge1xuICAgICAgICBjb25zdCBidXR0b24gPSBnZXRNb3VzZUJ1dHRvbklkKGtleURlZi5idXR0b24pO1xuICAgICAgICBpZiAoYnV0dG9uIGluIHRoaXMucHJlc3NlZCkge1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkW2J1dHRvbl0gPSB0aGlzLnByZXNzZWRbYnV0dG9uXS5maWx0ZXIoKGspPT5rLm5hbWUgIT09IGtleURlZi5uYW1lKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXNzZWRbYnV0dG9uXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJlc3NlZFtidXR0b25dO1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInByZXNzZWRcIiwge30pO1xuICAgIH1cbn1cbmNvbnN0IE1vdXNlQnV0dG9uID0ge1xuICAgIHByaW1hcnk6IDAsXG4gICAgc2Vjb25kYXJ5OiAxLFxuICAgIGF1eGlsaWFyeTogMixcbiAgICBiYWNrOiAzLFxuICAgIFgxOiAzLFxuICAgIGZvcndhcmQ6IDQsXG4gICAgWDI6IDRcbn07XG5mdW5jdGlvbiBnZXRNb3VzZUJ1dHRvbklkKGJ1dHRvbiA9IDApIHtcbiAgICBpZiAoYnV0dG9uIGluIE1vdXNlQnV0dG9uKSB7XG4gICAgICAgIHJldHVybiBNb3VzZUJ1dHRvbltidXR0b25dO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKGJ1dHRvbik7XG59XG4vLyBPbiB0aGUgYE1vdXNlRXZlbnQuYnV0dG9uYCBwcm9wZXJ0eSBhdXhpbGlhcnkgYW5kIHNlY29uZGFyeSBidXR0b24gYXJlIGZsaXBwZWQgY29tcGFyZWQgdG8gYE1vdXNlRXZlbnQuYnV0dG9uc2AuXG5jb25zdCBNb3VzZUJ1dHRvbkZsaXAgPSB7XG4gICAgMTogMixcbiAgICAyOiAxXG59O1xuZnVuY3Rpb24gZ2V0TW91c2VFdmVudEJ1dHRvbihidXR0b24pIHtcbiAgICBidXR0b24gPSBnZXRNb3VzZUJ1dHRvbklkKGJ1dHRvbik7XG4gICAgaWYgKGJ1dHRvbiBpbiBNb3VzZUJ1dHRvbkZsaXApIHtcbiAgICAgICAgcmV0dXJuIE1vdXNlQnV0dG9uRmxpcFtidXR0b25dO1xuICAgIH1cbiAgICByZXR1cm4gYnV0dG9uO1xufVxuXG5leHBvcnRzLkJ1dHRvbnMgPSBCdXR0b25zO1xuZXhwb3J0cy5Nb3VzZUJ1dHRvbiA9IE1vdXNlQnV0dG9uO1xuZXhwb3J0cy5Nb3VzZUJ1dHRvbkZsaXAgPSBNb3VzZUJ1dHRvbkZsaXA7XG5leHBvcnRzLmdldE1vdXNlQnV0dG9uSWQgPSBnZXRNb3VzZUJ1dHRvbklkO1xuZXhwb3J0cy5nZXRNb3VzZUV2ZW50QnV0dG9uID0gZ2V0TW91c2VFdmVudEJ1dHRvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBRTdELFNBQVNDLGdCQUFnQkEsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVILEtBQUssRUFBRTtFQUN2QyxJQUFJRyxHQUFHLElBQUlELEdBQUcsRUFBRTtJQUNaTCxNQUFNLENBQUNDLGNBQWMsQ0FBQ0ksR0FBRyxFQUFFQyxHQUFHLEVBQUU7TUFDNUJILEtBQUssRUFBRUEsS0FBSztNQUNaSSxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsWUFBWSxFQUFFLElBQUk7TUFDbEJDLFFBQVEsRUFBRTtJQUNkLENBQUMsQ0FBQztFQUNOLENBQUMsTUFBTTtJQUNISixHQUFHLENBQUNDLEdBQUcsQ0FBQyxHQUFHSCxLQUFLO0VBQ3BCO0VBQ0EsT0FBT0UsR0FBRztBQUNkO0FBQ0EsTUFBTUssT0FBTyxDQUFDO0VBQ1ZDLFVBQVVBLENBQUEsRUFBRztJQUNULElBQUlDLENBQUMsR0FBRyxDQUFDO0lBQ1QsS0FBSyxNQUFNQyxNQUFNLElBQUliLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDLEVBQUM7TUFDM0M7TUFDQUgsQ0FBQyxJQUFJLENBQUMsSUFBSUksTUFBTSxDQUFDSCxNQUFNLENBQUM7SUFDNUI7SUFDQSxPQUFPRCxDQUFDO0VBQ1o7RUFDQUssSUFBSUEsQ0FBQ0MsTUFBTSxFQUFFO0lBQ1QsTUFBTUwsTUFBTSxHQUFHTSxnQkFBZ0IsQ0FBQ0QsTUFBTSxDQUFDTCxNQUFNLENBQUM7SUFDOUMsSUFBSUEsTUFBTSxJQUFJLElBQUksQ0FBQ0UsT0FBTyxFQUFFO01BQ3hCLElBQUksQ0FBQ0EsT0FBTyxDQUFDRixNQUFNLENBQUMsQ0FBQ08sSUFBSSxDQUFDRixNQUFNLENBQUM7TUFDakMsT0FBT0csU0FBUztJQUNwQjtJQUNBLElBQUksQ0FBQ04sT0FBTyxDQUFDRixNQUFNLENBQUMsR0FBRyxDQUNuQkssTUFBTSxDQUNUO0lBQ0QsT0FBT0wsTUFBTTtFQUNqQjtFQUNBUyxFQUFFQSxDQUFDSixNQUFNLEVBQUU7SUFDUCxNQUFNTCxNQUFNLEdBQUdNLGdCQUFnQixDQUFDRCxNQUFNLENBQUNMLE1BQU0sQ0FBQztJQUM5QyxJQUFJQSxNQUFNLElBQUksSUFBSSxDQUFDRSxPQUFPLEVBQUU7TUFDeEIsSUFBSSxDQUFDQSxPQUFPLENBQUNGLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQ0UsT0FBTyxDQUFDRixNQUFNLENBQUMsQ0FBQ1UsTUFBTSxDQUFFQyxDQUFDLElBQUdBLENBQUMsQ0FBQ0MsSUFBSSxLQUFLUCxNQUFNLENBQUNPLElBQUksQ0FBQztNQUMvRSxJQUFJLElBQUksQ0FBQ1YsT0FBTyxDQUFDRixNQUFNLENBQUMsQ0FBQ2EsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNuQztRQUNBLE9BQU8sSUFBSSxDQUFDWCxPQUFPLENBQUNGLE1BQU0sQ0FBQztRQUMzQixPQUFPQSxNQUFNO01BQ2pCO0lBQ0o7SUFDQSxPQUFPUSxTQUFTO0VBQ3BCO0VBQ0FNLFdBQVdBLENBQUEsRUFBRTtJQUNUdkIsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN6QztBQUNKO0FBQ0EsTUFBTXdCLFdBQVcsR0FBRztFQUNoQkMsT0FBTyxFQUFFLENBQUM7RUFDVkMsU0FBUyxFQUFFLENBQUM7RUFDWkMsU0FBUyxFQUFFLENBQUM7RUFDWkMsSUFBSSxFQUFFLENBQUM7RUFDUEMsRUFBRSxFQUFFLENBQUM7RUFDTEMsT0FBTyxFQUFFLENBQUM7RUFDVkMsRUFBRSxFQUFFO0FBQ1IsQ0FBQztBQUNELFNBQVNoQixnQkFBZ0JBLENBQUNOLE1BQU0sR0FBRyxDQUFDLEVBQUU7RUFDbEMsSUFBSUEsTUFBTSxJQUFJZSxXQUFXLEVBQUU7SUFDdkIsT0FBT0EsV0FBVyxDQUFDZixNQUFNLENBQUM7RUFDOUI7RUFDQSxPQUFPRyxNQUFNLENBQUNILE1BQU0sQ0FBQztBQUN6QjtBQUNBO0FBQ0EsTUFBTXVCLGVBQWUsR0FBRztFQUNwQixDQUFDLEVBQUUsQ0FBQztFQUNKLENBQUMsRUFBRTtBQUNQLENBQUM7QUFDRCxTQUFTQyxtQkFBbUJBLENBQUN4QixNQUFNLEVBQUU7RUFDakNBLE1BQU0sR0FBR00sZ0JBQWdCLENBQUNOLE1BQU0sQ0FBQztFQUNqQyxJQUFJQSxNQUFNLElBQUl1QixlQUFlLEVBQUU7SUFDM0IsT0FBT0EsZUFBZSxDQUFDdkIsTUFBTSxDQUFDO0VBQ2xDO0VBQ0EsT0FBT0EsTUFBTTtBQUNqQjtBQUVBWCxPQUFPLENBQUNRLE9BQU8sR0FBR0EsT0FBTztBQUN6QlIsT0FBTyxDQUFDMEIsV0FBVyxHQUFHQSxXQUFXO0FBQ2pDMUIsT0FBTyxDQUFDa0MsZUFBZSxHQUFHQSxlQUFlO0FBQ3pDbEMsT0FBTyxDQUFDaUIsZ0JBQWdCLEdBQUdBLGdCQUFnQjtBQUMzQ2pCLE9BQU8sQ0FBQ21DLG1CQUFtQixHQUFHQSxtQkFBbUIifQ==