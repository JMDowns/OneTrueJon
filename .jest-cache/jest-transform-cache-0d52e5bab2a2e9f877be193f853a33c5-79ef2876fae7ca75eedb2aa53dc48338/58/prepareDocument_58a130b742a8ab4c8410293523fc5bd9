14be549e84d0ce6eabbae0b57af330a0
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var dispatchEvent = require('../event/dispatchEvent.js');
require('../utils/click/isClickableInput.js');
require('../utils/dataTransfer/Clipboard.js');
require('../utils/edit/isEditable.js');
require('../utils/edit/maxLength.js');
var isElementType = require('../utils/misc/isElementType.js');
require('@testing-library/dom/dist/helpers.js');
require('../utils/keyDef/readNextDescriptor.js');
require('../utils/misc/level.js');
require('../options.js');
var UI = require('./UI.js');
require('@testing-library/dom');
var interceptor = require('./interceptor.js');
const isPrepared = Symbol('Node prepared with document state workarounds');
function prepareDocument(document) {
  if (document[isPrepared]) {
    return;
  }
  document.addEventListener('focus', e => {
    const el = e.target;
    prepareElement(el);
  }, {
    capture: true,
    passive: true
  });
  // Our test environment defaults to `document.body` as `activeElement`.
  // In other environments this might be `null` when preparing.
  // istanbul ignore else
  if (document.activeElement) {
    prepareElement(document.activeElement);
  }
  document.addEventListener('blur', e => {
    const el = e.target;
    const initialValue = UI.getInitialValue(el);
    if (initialValue !== undefined) {
      if (el.value !== initialValue) {
        dispatchEvent.dispatchDOMEvent(el, 'change');
      }
      UI.clearInitialValue(el);
    }
  }, {
    capture: true,
    passive: true
  });
  document[isPrepared] = isPrepared;
}
function prepareElement(el) {
  if (el[isPrepared]) {
    return;
  }
  if (isElementType.isElementType(el, ['input', 'textarea'])) {
    interceptor.prepareValueInterceptor(el);
    interceptor.prepareSelectionInterceptor(el);
    interceptor.prepareRangeTextInterceptor(el);
  }
  el[isPrepared] = isPrepared;
}
exports.prepareDocument = prepareDocument;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRpc3BhdGNoRXZlbnQiLCJyZXF1aXJlIiwiaXNFbGVtZW50VHlwZSIsIlVJIiwiaW50ZXJjZXB0b3IiLCJpc1ByZXBhcmVkIiwiU3ltYm9sIiwicHJlcGFyZURvY3VtZW50IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImVsIiwidGFyZ2V0IiwicHJlcGFyZUVsZW1lbnQiLCJjYXB0dXJlIiwicGFzc2l2ZSIsImFjdGl2ZUVsZW1lbnQiLCJpbml0aWFsVmFsdWUiLCJnZXRJbml0aWFsVmFsdWUiLCJ1bmRlZmluZWQiLCJkaXNwYXRjaERPTUV2ZW50IiwiY2xlYXJJbml0aWFsVmFsdWUiLCJwcmVwYXJlVmFsdWVJbnRlcmNlcHRvciIsInByZXBhcmVTZWxlY3Rpb25JbnRlcmNlcHRvciIsInByZXBhcmVSYW5nZVRleHRJbnRlcmNlcHRvciJdLCJzb3VyY2VzIjpbInByZXBhcmVEb2N1bWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gcmVxdWlyZSgnLi4vZXZlbnQvZGlzcGF0Y2hFdmVudC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvY2xpY2svaXNDbGlja2FibGVJbnB1dC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZWRpdC9pc0VkaXRhYmxlLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9lZGl0L21heExlbmd0aC5qcycpO1xudmFyIGlzRWxlbWVudFR5cGUgPSByZXF1aXJlKCcuLi91dGlscy9taXNjL2lzRWxlbWVudFR5cGUuanMnKTtcbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvaGVscGVycy5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMva2V5RGVmL3JlYWROZXh0RGVzY3JpcHRvci5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvbWlzYy9sZXZlbC5qcycpO1xucmVxdWlyZSgnLi4vb3B0aW9ucy5qcycpO1xudmFyIFVJID0gcmVxdWlyZSgnLi9VSS5qcycpO1xucmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9kb20nKTtcbnZhciBpbnRlcmNlcHRvciA9IHJlcXVpcmUoJy4vaW50ZXJjZXB0b3IuanMnKTtcblxuY29uc3QgaXNQcmVwYXJlZCA9IFN5bWJvbCgnTm9kZSBwcmVwYXJlZCB3aXRoIGRvY3VtZW50IHN0YXRlIHdvcmthcm91bmRzJyk7XG5mdW5jdGlvbiBwcmVwYXJlRG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICBpZiAoZG9jdW1lbnRbaXNQcmVwYXJlZF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIChlKT0+e1xuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0O1xuICAgICAgICBwcmVwYXJlRWxlbWVudChlbCk7XG4gICAgfSwge1xuICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gT3VyIHRlc3QgZW52aXJvbm1lbnQgZGVmYXVsdHMgdG8gYGRvY3VtZW50LmJvZHlgIGFzIGBhY3RpdmVFbGVtZW50YC5cbiAgICAvLyBJbiBvdGhlciBlbnZpcm9ubWVudHMgdGhpcyBtaWdodCBiZSBgbnVsbGAgd2hlbiBwcmVwYXJpbmcuXG4gICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICBwcmVwYXJlRWxlbWVudChkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICB9XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIChlKT0+e1xuICAgICAgICBjb25zdCBlbCA9IGUudGFyZ2V0O1xuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWUgPSBVSS5nZXRJbml0aWFsVmFsdWUoZWwpO1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChlbC52YWx1ZSAhPT0gaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudC5kaXNwYXRjaERPTUV2ZW50KGVsLCAnY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBVSS5jbGVhckluaXRpYWxWYWx1ZShlbCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBkb2N1bWVudFtpc1ByZXBhcmVkXSA9IGlzUHJlcGFyZWQ7XG59XG5mdW5jdGlvbiBwcmVwYXJlRWxlbWVudChlbCkge1xuICAgIGlmIChlbFtpc1ByZXBhcmVkXSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUoZWwsIFtcbiAgICAgICAgJ2lucHV0JyxcbiAgICAgICAgJ3RleHRhcmVhJ1xuICAgIF0pKSB7XG4gICAgICAgIGludGVyY2VwdG9yLnByZXBhcmVWYWx1ZUludGVyY2VwdG9yKGVsKTtcbiAgICAgICAgaW50ZXJjZXB0b3IucHJlcGFyZVNlbGVjdGlvbkludGVyY2VwdG9yKGVsKTtcbiAgICAgICAgaW50ZXJjZXB0b3IucHJlcGFyZVJhbmdlVGV4dEludGVyY2VwdG9yKGVsKTtcbiAgICB9XG4gICAgZWxbaXNQcmVwYXJlZF0gPSBpc1ByZXBhcmVkO1xufVxuXG5leHBvcnRzLnByZXBhcmVEb2N1bWVudCA9IHByZXBhcmVEb2N1bWVudDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFB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