f42579a42ef727785616abd16487d158
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('../utils/click/isClickableInput.js');
require('../utils/dataTransfer/Clipboard.js');
require('../utils/edit/isEditable.js');
require('../utils/edit/maxLength.js');
var getActiveElement = require('../utils/focus/getActiveElement.js');
require('@testing-library/dom/dist/helpers.js');
var isFocusable = require('../utils/focus/isFocusable.js');
require('../utils/keyDef/readNextDescriptor.js');
var findClosest = require('../utils/misc/findClosest.js');
require('../utils/misc/level.js');
require('../options.js');
var updateSelectionOnFocus = require('./selection/updateSelectionOnFocus.js');
var wrapEvent = require('./wrapEvent.js');

/**
 * Focus closest focusable element.
 */
function focusElement(element) {
  const target = findClosest.findClosest(element, isFocusable.isFocusable);
  const activeElement = getActiveElement.getActiveElement(element.ownerDocument);
  if ((target !== null && target !== void 0 ? target : element.ownerDocument.body) === activeElement) {
    return;
  } else if (target) {
    wrapEvent.wrapEvent(() => target.focus());
  } else {
    wrapEvent.wrapEvent(() => activeElement === null || activeElement === void 0 ? void 0 : activeElement.blur());
  }
  updateSelectionOnFocus.updateSelectionOnFocus(target !== null && target !== void 0 ? target : element.ownerDocument.body);
}
function blurElement(element) {
  if (!isFocusable.isFocusable(element)) return;
  const wasActive = getActiveElement.getActiveElement(element.ownerDocument) === element;
  if (!wasActive) return;
  wrapEvent.wrapEvent(() => element.blur());
}
exports.blurElement = blurElement;
exports.focusElement = focusElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJnZXRBY3RpdmVFbGVtZW50IiwiaXNGb2N1c2FibGUiLCJmaW5kQ2xvc2VzdCIsInVwZGF0ZVNlbGVjdGlvbk9uRm9jdXMiLCJ3cmFwRXZlbnQiLCJmb2N1c0VsZW1lbnQiLCJlbGVtZW50IiwidGFyZ2V0IiwiYWN0aXZlRWxlbWVudCIsIm93bmVyRG9jdW1lbnQiLCJib2R5IiwiZm9jdXMiLCJibHVyIiwiYmx1ckVsZW1lbnQiLCJ3YXNBY3RpdmUiXSwic291cmNlcyI6WyJmb2N1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnJlcXVpcmUoJy4uL3V0aWxzL2NsaWNrL2lzQ2xpY2thYmxlSW5wdXQuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2VkaXQvaXNFZGl0YWJsZS5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZWRpdC9tYXhMZW5ndGguanMnKTtcbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnLi4vdXRpbHMvZm9jdXMvZ2V0QWN0aXZlRWxlbWVudC5qcycpO1xucmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9oZWxwZXJzLmpzJyk7XG52YXIgaXNGb2N1c2FibGUgPSByZXF1aXJlKCcuLi91dGlscy9mb2N1cy9pc0ZvY3VzYWJsZS5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMva2V5RGVmL3JlYWROZXh0RGVzY3JpcHRvci5qcycpO1xudmFyIGZpbmRDbG9zZXN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvbWlzYy9maW5kQ2xvc2VzdC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvbWlzYy9sZXZlbC5qcycpO1xucmVxdWlyZSgnLi4vb3B0aW9ucy5qcycpO1xudmFyIHVwZGF0ZVNlbGVjdGlvbk9uRm9jdXMgPSByZXF1aXJlKCcuL3NlbGVjdGlvbi91cGRhdGVTZWxlY3Rpb25PbkZvY3VzLmpzJyk7XG52YXIgd3JhcEV2ZW50ID0gcmVxdWlyZSgnLi93cmFwRXZlbnQuanMnKTtcblxuLyoqXG4gKiBGb2N1cyBjbG9zZXN0IGZvY3VzYWJsZSBlbGVtZW50LlxuICovIGZ1bmN0aW9uIGZvY3VzRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZmluZENsb3Nlc3QuZmluZENsb3Nlc3QoZWxlbWVudCwgaXNGb2N1c2FibGUuaXNGb2N1c2FibGUpO1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50LmdldEFjdGl2ZUVsZW1lbnQoZWxlbWVudC5vd25lckRvY3VtZW50KTtcbiAgICBpZiAoKHRhcmdldCAhPT0gbnVsbCAmJiB0YXJnZXQgIT09IHZvaWQgMCA/IHRhcmdldCA6IGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5KSA9PT0gYWN0aXZlRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICh0YXJnZXQpIHtcbiAgICAgICAgd3JhcEV2ZW50LndyYXBFdmVudCgoKT0+dGFyZ2V0LmZvY3VzKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBFdmVudC53cmFwRXZlbnQoKCk9PmFjdGl2ZUVsZW1lbnQgPT09IG51bGwgfHwgYWN0aXZlRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWN0aXZlRWxlbWVudC5ibHVyKCkpO1xuICAgIH1cbiAgICB1cGRhdGVTZWxlY3Rpb25PbkZvY3VzLnVwZGF0ZVNlbGVjdGlvbk9uRm9jdXModGFyZ2V0ICE9PSBudWxsICYmIHRhcmdldCAhPT0gdm9pZCAwID8gdGFyZ2V0IDogZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkpO1xufVxuZnVuY3Rpb24gYmx1ckVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICghaXNGb2N1c2FibGUuaXNGb2N1c2FibGUoZWxlbWVudCkpIHJldHVybjtcbiAgICBjb25zdCB3YXNBY3RpdmUgPSBnZXRBY3RpdmVFbGVtZW50LmdldEFjdGl2ZUVsZW1lbnQoZWxlbWVudC5vd25lckRvY3VtZW50KSA9PT0gZWxlbWVudDtcbiAgICBpZiAoIXdhc0FjdGl2ZSkgcmV0dXJuO1xuICAgIHdyYXBFdmVudC53cmFwRXZlbnQoKCk9PmVsZW1lbnQuYmx1cigpKTtcbn1cblxuZXhwb3J0cy5ibHVyRWxlbWVudCA9IGJsdXJFbGVtZW50O1xuZXhwb3J0cy5mb2N1c0VsZW1lbnQgPSBmb2N1c0VsZW1lbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUU3REMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQzdDQSxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFDN0NBLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztBQUN0Q0EsT0FBTyxDQUFDLDRCQUE0QixDQUFDO0FBQ3JDLElBQUlDLGdCQUFnQixHQUFHRCxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFDcEVBLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQztBQUMvQyxJQUFJRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztBQUMxREEsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hELElBQUlHLFdBQVcsR0FBR0gsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBQ3pEQSxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDakNBLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDeEIsSUFBSUksc0JBQXNCLEdBQUdKLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUM3RSxJQUFJSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzs7QUFFekM7QUFDQTtBQUNBO0FBQUksU0FBU00sWUFBWUEsQ0FBQ0MsT0FBTyxFQUFFO0VBQy9CLE1BQU1DLE1BQU0sR0FBR0wsV0FBVyxDQUFDQSxXQUFXLENBQUNJLE9BQU8sRUFBRUwsV0FBVyxDQUFDQSxXQUFXLENBQUM7RUFDeEUsTUFBTU8sYUFBYSxHQUFHUixnQkFBZ0IsQ0FBQ0EsZ0JBQWdCLENBQUNNLE9BQU8sQ0FBQ0csYUFBYSxDQUFDO0VBQzlFLElBQUksQ0FBQ0YsTUFBTSxLQUFLLElBQUksSUFBSUEsTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxNQUFNLEdBQUdELE9BQU8sQ0FBQ0csYUFBYSxDQUFDQyxJQUFJLE1BQU1GLGFBQWEsRUFBRTtJQUNoRztFQUNKLENBQUMsTUFBTSxJQUFJRCxNQUFNLEVBQUU7SUFDZkgsU0FBUyxDQUFDQSxTQUFTLENBQUMsTUFBSUcsTUFBTSxDQUFDSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzNDLENBQUMsTUFBTTtJQUNIUCxTQUFTLENBQUNBLFNBQVMsQ0FBQyxNQUFJSSxhQUFhLEtBQUssSUFBSSxJQUFJQSxhQUFhLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLGFBQWEsQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQztFQUMvRztFQUNBVCxzQkFBc0IsQ0FBQ0Esc0JBQXNCLENBQUNJLE1BQU0sS0FBSyxJQUFJLElBQUlBLE1BQU0sS0FBSyxLQUFLLENBQUMsR0FBR0EsTUFBTSxHQUFHRCxPQUFPLENBQUNHLGFBQWEsQ0FBQ0MsSUFBSSxDQUFDO0FBQzdIO0FBQ0EsU0FBU0csV0FBV0EsQ0FBQ1AsT0FBTyxFQUFFO0VBQzFCLElBQUksQ0FBQ0wsV0FBVyxDQUFDQSxXQUFXLENBQUNLLE9BQU8sQ0FBQyxFQUFFO0VBQ3ZDLE1BQU1RLFNBQVMsR0FBR2QsZ0JBQWdCLENBQUNBLGdCQUFnQixDQUFDTSxPQUFPLENBQUNHLGFBQWEsQ0FBQyxLQUFLSCxPQUFPO0VBQ3RGLElBQUksQ0FBQ1EsU0FBUyxFQUFFO0VBQ2hCVixTQUFTLENBQUNBLFNBQVMsQ0FBQyxNQUFJRSxPQUFPLENBQUNNLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDM0M7QUFFQWYsT0FBTyxDQUFDZ0IsV0FBVyxHQUFHQSxXQUFXO0FBQ2pDaEIsT0FBTyxDQUFDUSxZQUFZLEdBQUdBLFlBQVkifQ==