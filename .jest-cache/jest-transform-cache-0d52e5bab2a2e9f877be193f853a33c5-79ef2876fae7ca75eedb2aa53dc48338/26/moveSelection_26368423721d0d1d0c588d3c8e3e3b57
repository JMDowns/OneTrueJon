3d9b74e4189d174705391333fb7d4544
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var UI = require('../../document/UI.js');
require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
var cursor = require('../../utils/focus/cursor.js');
require('@testing-library/dom/dist/helpers.js');
var selection = require('../../utils/focus/selection.js');
require('../../utils/keyDef/readNextDescriptor.js');
require('../../utils/misc/level.js');
require('../../options.js');
var setSelection = require('./setSelection.js');

/**
 * Move the selection
 */
function moveSelection(node, direction) {
  // TODO: implement shift
  if (selection.hasOwnSelection(node)) {
    const selection = UI.getUISelection(node);
    setSelection.setSelection({
      focusNode: node,
      focusOffset: selection.startOffset === selection.endOffset ? selection.focusOffset + direction : direction < 0 ? selection.startOffset : selection.endOffset
    });
  } else {
    const selection = node.ownerDocument.getSelection();
    if (!(selection === null || selection === void 0 ? void 0 : selection.focusNode)) {
      return;
    }
    if (selection.isCollapsed) {
      const nextPosition = cursor.getNextCursorPosition(selection.focusNode, selection.focusOffset, direction);
      if (nextPosition) {
        setSelection.setSelection({
          focusNode: nextPosition.node,
          focusOffset: nextPosition.offset
        });
      }
    } else {
      selection[direction < 0 ? 'collapseToStart' : 'collapseToEnd']();
    }
  }
}
exports.moveSelection = moveSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVJIiwicmVxdWlyZSIsImN1cnNvciIsInNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsIm1vdmVTZWxlY3Rpb24iLCJub2RlIiwiZGlyZWN0aW9uIiwiaGFzT3duU2VsZWN0aW9uIiwiZ2V0VUlTZWxlY3Rpb24iLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0Iiwib3duZXJEb2N1bWVudCIsImdldFNlbGVjdGlvbiIsImlzQ29sbGFwc2VkIiwibmV4dFBvc2l0aW9uIiwiZ2V0TmV4dEN1cnNvclBvc2l0aW9uIiwib2Zmc2V0Il0sInNvdXJjZXMiOlsibW92ZVNlbGVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBVSSA9IHJlcXVpcmUoJy4uLy4uL2RvY3VtZW50L1VJLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9jbGljay9pc0NsaWNrYWJsZUlucHV0LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG52YXIgY3Vyc29yID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZm9jdXMvY3Vyc29yLmpzJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L2hlbHBlcnMuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL21pc2MvbGV2ZWwuanMnKTtcbnJlcXVpcmUoJy4uLy4uL29wdGlvbnMuanMnKTtcbnZhciBzZXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL3NldFNlbGVjdGlvbi5qcycpO1xuXG4vKipcbiAqIE1vdmUgdGhlIHNlbGVjdGlvblxuICovIGZ1bmN0aW9uIG1vdmVTZWxlY3Rpb24obm9kZSwgZGlyZWN0aW9uKSB7XG4gICAgLy8gVE9ETzogaW1wbGVtZW50IHNoaWZ0XG4gICAgaWYgKHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gVUkuZ2V0VUlTZWxlY3Rpb24obm9kZSk7XG4gICAgICAgIHNldFNlbGVjdGlvbi5zZXRTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZm9jdXNOb2RlOiBub2RlLFxuICAgICAgICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5zdGFydE9mZnNldCA9PT0gc2VsZWN0aW9uLmVuZE9mZnNldCA/IHNlbGVjdGlvbi5mb2N1c09mZnNldCArIGRpcmVjdGlvbiA6IGRpcmVjdGlvbiA8IDAgPyBzZWxlY3Rpb24uc3RhcnRPZmZzZXQgOiBzZWxlY3Rpb24uZW5kT2Zmc2V0XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IG5vZGUub3duZXJEb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKCEoc2VsZWN0aW9uID09PSBudWxsIHx8IHNlbGVjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VsZWN0aW9uLmZvY3VzTm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0UG9zaXRpb24gPSBjdXJzb3IuZ2V0TmV4dEN1cnNvclBvc2l0aW9uKHNlbGVjdGlvbi5mb2N1c05vZGUsIHNlbGVjdGlvbi5mb2N1c09mZnNldCwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChuZXh0UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlOiBuZXh0UG9zaXRpb24ubm9kZSxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNPZmZzZXQ6IG5leHRQb3NpdGlvbi5vZmZzZXRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbltkaXJlY3Rpb24gPCAwID8gJ2NvbGxhcHNlVG9TdGFydCcgOiAnY29sbGFwc2VUb0VuZCddKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydHMubW92ZVNlbGVjdGlvbiA9IG1vdmVTZWxlY3Rpb247XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUU3RCxJQUFJQyxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUN4Q0EsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hEQSxPQUFPLENBQUMsdUNBQXVDLENBQUM7QUFDaERBLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztBQUN6Q0EsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3hDLElBQUlDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBQ25EQSxPQUFPLENBQUMsc0NBQXNDLENBQUM7QUFDL0MsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFDekRBLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQztBQUNuREEsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3BDQSxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDM0IsSUFBSUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsbUJBQW1CLENBQUM7O0FBRS9DO0FBQ0E7QUFDQTtBQUFJLFNBQVNJLGFBQWFBLENBQUNDLElBQUksRUFBRUMsU0FBUyxFQUFFO0VBQ3hDO0VBQ0EsSUFBSUosU0FBUyxDQUFDSyxlQUFlLENBQUNGLElBQUksQ0FBQyxFQUFFO0lBQ2pDLE1BQU1ILFNBQVMsR0FBR0gsRUFBRSxDQUFDUyxjQUFjLENBQUNILElBQUksQ0FBQztJQUN6Q0YsWUFBWSxDQUFDQSxZQUFZLENBQUM7TUFDdEJNLFNBQVMsRUFBRUosSUFBSTtNQUNmSyxXQUFXLEVBQUVSLFNBQVMsQ0FBQ1MsV0FBVyxLQUFLVCxTQUFTLENBQUNVLFNBQVMsR0FBR1YsU0FBUyxDQUFDUSxXQUFXLEdBQUdKLFNBQVMsR0FBR0EsU0FBUyxHQUFHLENBQUMsR0FBR0osU0FBUyxDQUFDUyxXQUFXLEdBQUdULFNBQVMsQ0FBQ1U7SUFDdkosQ0FBQyxDQUFDO0VBQ04sQ0FBQyxNQUFNO0lBQ0gsTUFBTVYsU0FBUyxHQUFHRyxJQUFJLENBQUNRLGFBQWEsQ0FBQ0MsWUFBWSxDQUFDLENBQUM7SUFDbkQsSUFBSSxFQUFFWixTQUFTLEtBQUssSUFBSSxJQUFJQSxTQUFTLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLFNBQVMsQ0FBQ08sU0FBUyxDQUFDLEVBQUU7TUFDOUU7SUFDSjtJQUNBLElBQUlQLFNBQVMsQ0FBQ2EsV0FBVyxFQUFFO01BQ3ZCLE1BQU1DLFlBQVksR0FBR2YsTUFBTSxDQUFDZ0IscUJBQXFCLENBQUNmLFNBQVMsQ0FBQ08sU0FBUyxFQUFFUCxTQUFTLENBQUNRLFdBQVcsRUFBRUosU0FBUyxDQUFDO01BQ3hHLElBQUlVLFlBQVksRUFBRTtRQUNkYixZQUFZLENBQUNBLFlBQVksQ0FBQztVQUN0Qk0sU0FBUyxFQUFFTyxZQUFZLENBQUNYLElBQUk7VUFDNUJLLFdBQVcsRUFBRU0sWUFBWSxDQUFDRTtRQUM5QixDQUFDLENBQUM7TUFDTjtJQUNKLENBQUMsTUFBTTtNQUNIaEIsU0FBUyxDQUFDSSxTQUFTLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDcEU7RUFDSjtBQUNKO0FBRUFULE9BQU8sQ0FBQ08sYUFBYSxHQUFHQSxhQUFhIn0=