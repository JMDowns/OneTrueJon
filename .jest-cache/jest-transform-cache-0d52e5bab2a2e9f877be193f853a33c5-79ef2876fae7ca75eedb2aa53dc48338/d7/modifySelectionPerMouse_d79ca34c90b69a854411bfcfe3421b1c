a2a5f7108b03144687e5422b182fa018
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var UI = require('../../document/UI.js');
require('../../utils/click/isClickableInput.js');
require('../../utils/dataTransfer/Clipboard.js');
require('../../utils/edit/isEditable.js');
require('../../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
require('../../utils/keyDef/readNextDescriptor.js');
require('../../utils/misc/level.js');
require('../../options.js');
var resolveCaretPosition = require('./resolveCaretPosition.js');
function modifySelectionPerMouseMove(selectionRange, {
  document,
  target,
  node,
  offset
}) {
  const selectionFocus = resolveCaretPosition.resolveCaretPosition({
    target,
    node,
    offset
  });
  if ('node' in selectionRange) {
    // When the mouse is dragged outside of an input/textarea,
    // the selection is extended to the beginning or end of the input
    // depending on pointer position.
    // TODO: extend selection according to pointer position
    /* istanbul ignore else */
    if (selectionFocus.node === selectionRange.node) {
      const anchorOffset = selectionFocus.offset < selectionRange.start ? selectionRange.end : selectionRange.start;
      const focusOffset = selectionFocus.offset > selectionRange.end || selectionFocus.offset < selectionRange.start ? selectionFocus.offset : selectionRange.end;
      UI.setUISelection(selectionRange.node, {
        anchorOffset,
        focusOffset
      });
    }
  } else {
    const range = selectionRange.cloneRange();
    const cmp = range.comparePoint(selectionFocus.node, selectionFocus.offset);
    if (cmp < 0) {
      range.setStart(selectionFocus.node, selectionFocus.offset);
    } else if (cmp > 0) {
      range.setEnd(selectionFocus.node, selectionFocus.offset);
    }
    const selection = document.getSelection();
    selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
    selection === null || selection === void 0 ? void 0 : selection.addRange(range.cloneRange());
  }
}
exports.modifySelectionPerMouseMove = modifySelectionPerMouseMove;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVJIiwicmVxdWlyZSIsInJlc29sdmVDYXJldFBvc2l0aW9uIiwibW9kaWZ5U2VsZWN0aW9uUGVyTW91c2VNb3ZlIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudCIsInRhcmdldCIsIm5vZGUiLCJvZmZzZXQiLCJzZWxlY3Rpb25Gb2N1cyIsImFuY2hvck9mZnNldCIsInN0YXJ0IiwiZW5kIiwiZm9jdXNPZmZzZXQiLCJzZXRVSVNlbGVjdGlvbiIsInJhbmdlIiwiY2xvbmVSYW5nZSIsImNtcCIsImNvbXBhcmVQb2ludCIsInNldFN0YXJ0Iiwic2V0RW5kIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiXSwic291cmNlcyI6WyJtb2RpZnlTZWxlY3Rpb25QZXJNb3VzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBVSSA9IHJlcXVpcmUoJy4uLy4uL2RvY3VtZW50L1VJLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9jbGljay9pc0NsaWNrYWJsZUlucHV0LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzRWRpdGFibGUuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L2hlbHBlcnMuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2tleURlZi9yZWFkTmV4dERlc2NyaXB0b3IuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL21pc2MvbGV2ZWwuanMnKTtcbnJlcXVpcmUoJy4uLy4uL29wdGlvbnMuanMnKTtcbnZhciByZXNvbHZlQ2FyZXRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vcmVzb2x2ZUNhcmV0UG9zaXRpb24uanMnKTtcblxuZnVuY3Rpb24gbW9kaWZ5U2VsZWN0aW9uUGVyTW91c2VNb3ZlKHNlbGVjdGlvblJhbmdlLCB7IGRvY3VtZW50LCB0YXJnZXQsIG5vZGUsIG9mZnNldCB9KSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uRm9jdXMgPSByZXNvbHZlQ2FyZXRQb3NpdGlvbi5yZXNvbHZlQ2FyZXRQb3NpdGlvbih7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCdub2RlJyBpbiBzZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAvLyBXaGVuIHRoZSBtb3VzZSBpcyBkcmFnZ2VkIG91dHNpZGUgb2YgYW4gaW5wdXQvdGV4dGFyZWEsXG4gICAgICAgIC8vIHRoZSBzZWxlY3Rpb24gaXMgZXh0ZW5kZWQgdG8gdGhlIGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIGlucHV0XG4gICAgICAgIC8vIGRlcGVuZGluZyBvbiBwb2ludGVyIHBvc2l0aW9uLlxuICAgICAgICAvLyBUT0RPOiBleHRlbmQgc2VsZWN0aW9uIGFjY29yZGluZyB0byBwb2ludGVyIHBvc2l0aW9uXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovIGlmIChzZWxlY3Rpb25Gb2N1cy5ub2RlID09PSBzZWxlY3Rpb25SYW5nZS5ub2RlKSB7XG4gICAgICAgICAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgPCBzZWxlY3Rpb25SYW5nZS5zdGFydCA/IHNlbGVjdGlvblJhbmdlLmVuZCA6IHNlbGVjdGlvblJhbmdlLnN0YXJ0O1xuICAgICAgICAgICAgY29uc3QgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgPiBzZWxlY3Rpb25SYW5nZS5lbmQgfHwgc2VsZWN0aW9uRm9jdXMub2Zmc2V0IDwgc2VsZWN0aW9uUmFuZ2Uuc3RhcnQgPyBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgOiBzZWxlY3Rpb25SYW5nZS5lbmQ7XG4gICAgICAgICAgICBVSS5zZXRVSVNlbGVjdGlvbihzZWxlY3Rpb25SYW5nZS5ub2RlLCB7XG4gICAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGZvY3VzT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gc2VsZWN0aW9uUmFuZ2UuY2xvbmVSYW5nZSgpO1xuICAgICAgICBjb25zdCBjbXAgPSByYW5nZS5jb21wYXJlUG9pbnQoc2VsZWN0aW9uRm9jdXMubm9kZSwgc2VsZWN0aW9uRm9jdXMub2Zmc2V0KTtcbiAgICAgICAgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHNlbGVjdGlvbkZvY3VzLm5vZGUsIHNlbGVjdGlvbkZvY3VzLm9mZnNldCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHNlbGVjdGlvbkZvY3VzLm5vZGUsIHNlbGVjdGlvbkZvY3VzLm9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHNlbGVjdGlvbiA9PT0gbnVsbCB8fCBzZWxlY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsZWN0aW9uID09PSBudWxsIHx8IHNlbGVjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlLmNsb25lUmFuZ2UoKSk7XG4gICAgfVxufVxuXG5leHBvcnRzLm1vZGlmeVNlbGVjdGlvblBlck1vdXNlTW92ZSA9IG1vZGlmeVNlbGVj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