2c0ad6c30ff74c0c0f25c5f4d7508faa
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
require('../utils/click/isClickableInput.js');
require('../utils/dataTransfer/Clipboard.js');
require('../utils/edit/isEditable.js');
require('../utils/edit/maxLength.js');
var getWindow = require('../utils/misc/getWindow.js');
require('../utils/keyDef/readNextDescriptor.js');
require('../utils/misc/level.js');
require('../options.js');
var UI = require('./UI.js');
const TrackChanges = Symbol('Track programmatic changes for React workaround');
// When the input event happens in the browser, React executes all event handlers
// and if they change state of a controlled value, nothing happens.
// But when we trigger the event handlers in test environment with React@17,
// the changes are rolled back before the state update is applied.
// This results in a reset cursor.
// There might be a better way to work around if we figure out
// why the batched update is executed differently in our test environment.
function isReact17Element(element) {
  return Object.getOwnPropertyNames(element).some(k => k.startsWith('__react')) && getWindow.getWindow(element).REACT_VERSION === 17;
}
function startTrackValue(element) {
  if (!isReact17Element(element)) {
    return;
  }
  element[TrackChanges] = {
    previousValue: String(element.value),
    tracked: []
  };
}
function trackOrSetValue(element, v) {
  var _element_TrackChanges_tracked, _element_TrackChanges;
  (_element_TrackChanges = element[TrackChanges]) === null || _element_TrackChanges === void 0 ? void 0 : (_element_TrackChanges_tracked = _element_TrackChanges.tracked) === null || _element_TrackChanges_tracked === void 0 ? void 0 : _element_TrackChanges_tracked.push(v);
  if (!element[TrackChanges]) {
    UI.setUIValueClean(element);
    UI.setUISelection(element, {
      focusOffset: v.length
    });
  }
}
function commitValueAfterInput(element, cursorOffset) {
  var _changes_tracked;
  const changes = element[TrackChanges];
  element[TrackChanges] = undefined;
  if (!(changes === null || changes === void 0 ? void 0 : (_changes_tracked = changes.tracked) === null || _changes_tracked === void 0 ? void 0 : _changes_tracked.length)) {
    return;
  }
  const isJustReactStateUpdate = changes.tracked.length === 2 && changes.tracked[0] === changes.previousValue && changes.tracked[1] === element.value;
  if (!isJustReactStateUpdate) {
    UI.setUIValueClean(element);
  }
  if (UI.hasUISelection(element)) {
    UI.setUISelection(element, {
      focusOffset: isJustReactStateUpdate ? cursorOffset : element.value.length
    });
  }
}
exports.commitValueAfterInput = commitValueAfterInput;
exports.startTrackValue = startTrackValue;
exports.trackOrSetValue = trackOrSetValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcXVpcmUiLCJnZXRXaW5kb3ciLCJVSSIsIlRyYWNrQ2hhbmdlcyIsIlN5bWJvbCIsImlzUmVhY3QxN0VsZW1lbnQiLCJlbGVtZW50IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNvbWUiLCJrIiwic3RhcnRzV2l0aCIsIlJFQUNUX1ZFUlNJT04iLCJzdGFydFRyYWNrVmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiU3RyaW5nIiwidHJhY2tlZCIsInRyYWNrT3JTZXRWYWx1ZSIsInYiLCJfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCIsIl9lbGVtZW50X1RyYWNrQ2hhbmdlcyIsInB1c2giLCJzZXRVSVZhbHVlQ2xlYW4iLCJzZXRVSVNlbGVjdGlvbiIsImZvY3VzT2Zmc2V0IiwibGVuZ3RoIiwiY29tbWl0VmFsdWVBZnRlcklucHV0IiwiY3Vyc29yT2Zmc2V0IiwiX2NoYW5nZXNfdHJhY2tlZCIsImNoYW5nZXMiLCJ1bmRlZmluZWQiLCJpc0p1c3RSZWFjdFN0YXRlVXBkYXRlIiwiaGFzVUlTZWxlY3Rpb24iXSwic291cmNlcyI6WyJ0cmFja1ZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxucmVxdWlyZSgnLi4vdXRpbHMvY2xpY2svaXNDbGlja2FibGVJbnB1dC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZWRpdC9pc0VkaXRhYmxlLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9lZGl0L21heExlbmd0aC5qcycpO1xudmFyIGdldFdpbmRvdyA9IHJlcXVpcmUoJy4uL3V0aWxzL21pc2MvZ2V0V2luZG93LmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9rZXlEZWYvcmVhZE5leHREZXNjcmlwdG9yLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9taXNjL2xldmVsLmpzJyk7XG5yZXF1aXJlKCcuLi9vcHRpb25zLmpzJyk7XG52YXIgVUkgPSByZXF1aXJlKCcuL1VJLmpzJyk7XG5cbmNvbnN0IFRyYWNrQ2hhbmdlcyA9IFN5bWJvbCgnVHJhY2sgcHJvZ3JhbW1hdGljIGNoYW5nZXMgZm9yIFJlYWN0IHdvcmthcm91bmQnKTtcbi8vIFdoZW4gdGhlIGlucHV0IGV2ZW50IGhhcHBlbnMgaW4gdGhlIGJyb3dzZXIsIFJlYWN0IGV4ZWN1dGVzIGFsbCBldmVudCBoYW5kbGVyc1xuLy8gYW5kIGlmIHRoZXkgY2hhbmdlIHN0YXRlIG9mIGEgY29udHJvbGxlZCB2YWx1ZSwgbm90aGluZyBoYXBwZW5zLlxuLy8gQnV0IHdoZW4gd2UgdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlcnMgaW4gdGVzdCBlbnZpcm9ubWVudCB3aXRoIFJlYWN0QDE3LFxuLy8gdGhlIGNoYW5nZXMgYXJlIHJvbGxlZCBiYWNrIGJlZm9yZSB0aGUgc3RhdGUgdXBkYXRlIGlzIGFwcGxpZWQuXG4vLyBUaGlzIHJlc3VsdHMgaW4gYSByZXNldCBjdXJzb3IuXG4vLyBUaGVyZSBtaWdodCBiZSBhIGJldHRlciB3YXkgdG8gd29yayBhcm91bmQgaWYgd2UgZmlndXJlIG91dFxuLy8gd2h5IHRoZSBiYXRjaGVkIHVwZGF0ZSBpcyBleGVjdXRlZCBkaWZmZXJlbnRseSBpbiBvdXIgdGVzdCBlbnZpcm9ubWVudC5cbmZ1bmN0aW9uIGlzUmVhY3QxN0VsZW1lbnQoZWxlbWVudCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlbGVtZW50KS5zb21lKChrKT0+ay5zdGFydHNXaXRoKCdfX3JlYWN0JykpICYmIGdldFdpbmRvdy5nZXRXaW5kb3coZWxlbWVudCkuUkVBQ1RfVkVSU0lPTiA9PT0gMTc7XG59XG5mdW5jdGlvbiBzdGFydFRyYWNrVmFsdWUoZWxlbWVudCkge1xuICAgIGlmICghaXNSZWFjdDE3RWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsZW1lbnRbVHJhY2tDaGFuZ2VzXSA9IHtcbiAgICAgICAgcHJldmlvdXNWYWx1ZTogU3RyaW5nKGVsZW1lbnQudmFsdWUpLFxuICAgICAgICB0cmFja2VkOiBbXVxuICAgIH07XG59XG5mdW5jdGlvbiB0cmFja09yU2V0VmFsdWUoZWxlbWVudCwgdikge1xuICAgIHZhciBfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCwgX2VsZW1lbnRfVHJhY2tDaGFuZ2VzO1xuICAgIChfZWxlbWVudF9UcmFja0NoYW5nZXMgPSBlbGVtZW50W1RyYWNrQ2hhbmdlc10pID09PSBudWxsIHx8IF9lbGVtZW50X1RyYWNrQ2hhbmdlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9lbGVtZW50X1RyYWNrQ2hhbmdlc190cmFja2VkID0gX2VsZW1lbnRfVHJhY2tDaGFuZ2VzLnRyYWNrZWQpID09PSBudWxsIHx8IF9lbGVtZW50X1RyYWNrQ2hhbmdlc190cmFja2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZC5wdXNoKHYpO1xuICAgIGlmICghZWxlbWVudFtUcmFja0NoYW5nZXNdKSB7XG4gICAgICAgIFVJLnNldFVJVmFsdWVDbGVhbihlbGVtZW50KTtcbiAgICAgICAgVUkuc2V0VUlTZWxlY3Rpb24oZWxlbWVudCwge1xuICAgICAgICAgICAgZm9jdXNPZmZzZXQ6IHYubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFZhbHVlQWZ0ZXJJbnB1dChlbGVtZW50LCBjdXJzb3JPZmZzZXQpIHtcbiAgICB2YXIgX2NoYW5nZXNfdHJhY2tlZDtcbiAgICBjb25zdCBjaGFuZ2VzID0gZWxlbWVudFtUcmFja0NoYW5nZXNdO1xuICAgIGVsZW1lbnRbVHJhY2tDaGFuZ2VzXSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIShjaGFuZ2VzID09PSBudWxsIHx8IGNoYW5nZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfY2hhbmdlc190cmFja2VkID0gY2hhbmdlcy50cmFja2VkKSA9PT0gbnVsbCB8fCBfY2hhbmdlc190cmFja2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2hhbmdlc190cmFja2VkLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc0p1c3RSZWFjdFN0YXRlVXBkYXRlID0gY2hhbmdlcy50cmFja2VkLmxlbmd0aCA9PT0gMiAmJiBjaGFuZ2VzLnRyYWNrZWRbMF0gPT09IGNoYW5nZXMucHJldmlvdXNWYWx1ZSAmJiBjaGFuZ2VzLnRyYWNrZWRbMV0gPT09IGVsZW1lbnQudmFsdWU7XG4gICAgaWYgKCFpc0p1c3RSZWFjdFN0YXRlVXBkYXRlKSB7XG4gICAgICAgIFVJLnNldFVJVmFsdWVDbGVhbihlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKFVJLmhhc1VJU2VsZWN0aW9uKGVsZW1lbnQpKSB7XG4gICAgICAgIFVJLnNldFVJU2VsZWN0aW9uKGVsZW1lbnQsIHtcbiAgICAgICAgICAgIGZvY3VzT2Zmc2V0OiBpc0p1c3RSZWFjdFN0YXRlVXBkYXRlID8gY3Vyc29yT2Zmc2V0IDogZWxlbWVudC52YWx1ZS5sZW5ndGhcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnRzLmNvbW1pdFZhbHVlQWZ0ZXJJbnB1dCA9IGNvbW1pdFZhbHVlQWZ0ZXJJbnB1dDtcbmV4cG9ydHMuc3RhcnRUcmFja1ZhbHVlID0gc3RhcnRUcmFja1ZhbHVlO1xuZXhwb3J0cy50cmFja09yU2V0VmFsdWUgPSB0cmFja09yU2V0VmFsdWU7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUU3REMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FB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