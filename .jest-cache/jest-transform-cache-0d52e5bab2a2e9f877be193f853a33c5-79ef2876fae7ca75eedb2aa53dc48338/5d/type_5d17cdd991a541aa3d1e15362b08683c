904ed8e1ae55dbc4e70d4f85e2ef5c40
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var index = require('../keyboard/index.js');
require('../utils/click/isClickableInput.js');
require('../utils/dataTransfer/Clipboard.js');
require('../utils/edit/isEditable.js');
require('../utils/edit/maxLength.js');
require('@testing-library/dom/dist/helpers.js');
require('../utils/keyDef/readNextDescriptor.js');
require('../utils/misc/level.js');
require('../options.js');
var setSelectionRange = require('../event/selection/setSelectionRange.js');
async function type(element, text, {
  skipClick = this.config.skipClick,
  skipAutoClose = this.config.skipAutoClose,
  initialSelectionStart,
  initialSelectionEnd
} = {}) {
  // TODO: properly type guard
  // we use this workaround for now to prevent changing behavior
  if (element.disabled) return;
  if (!skipClick) {
    await this.click(element);
  }
  if (initialSelectionStart !== undefined) {
    setSelectionRange.setSelectionRange(element, initialSelectionStart, initialSelectionEnd !== null && initialSelectionEnd !== void 0 ? initialSelectionEnd : initialSelectionStart);
  }
  await this.keyboard(text);
  if (!skipAutoClose) {
    await index.releaseAllKeys(this);
  }
}
exports.type = type;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluZGV4IiwicmVxdWlyZSIsInNldFNlbGVjdGlvblJhbmdlIiwidHlwZSIsImVsZW1lbnQiLCJ0ZXh0Iiwic2tpcENsaWNrIiwiY29uZmlnIiwic2tpcEF1dG9DbG9zZSIsImluaXRpYWxTZWxlY3Rpb25TdGFydCIsImluaXRpYWxTZWxlY3Rpb25FbmQiLCJkaXNhYmxlZCIsImNsaWNrIiwidW5kZWZpbmVkIiwia2V5Ym9hcmQiLCJyZWxlYXNlQWxsS2V5cyJdLCJzb3VyY2VzIjpbInR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgaW5kZXggPSByZXF1aXJlKCcuLi9rZXlib2FyZC9pbmRleC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvY2xpY2svaXNDbGlja2FibGVJbnB1dC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMvZWRpdC9pc0VkaXRhYmxlLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9lZGl0L21heExlbmd0aC5qcycpO1xucmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9oZWxwZXJzLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9rZXlEZWYvcmVhZE5leHREZXNjcmlwdG9yLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9taXNjL2xldmVsLmpzJyk7XG5yZXF1aXJlKCcuLi9vcHRpb25zLmpzJyk7XG52YXIgc2V0U2VsZWN0aW9uUmFuZ2UgPSByZXF1aXJlKCcuLi9ldmVudC9zZWxlY3Rpb24vc2V0U2VsZWN0aW9uUmFuZ2UuanMnKTtcblxuYXN5bmMgZnVuY3Rpb24gdHlwZShlbGVtZW50LCB0ZXh0LCB7IHNraXBDbGljayA9IHRoaXMuY29uZmlnLnNraXBDbGljaywgc2tpcEF1dG9DbG9zZSA9IHRoaXMuY29uZmlnLnNraXBBdXRvQ2xvc2UsIGluaXRpYWxTZWxlY3Rpb25TdGFydCwgaW5pdGlhbFNlbGVjdGlvbkVuZCB9ID0ge30pIHtcbiAgICAvLyBUT0RPOiBwcm9wZXJseSB0eXBlIGd1YXJkXG4gICAgLy8gd2UgdXNlIHRoaXMgd29ya2Fyb3VuZCBmb3Igbm93IHRvIHByZXZlbnQgY2hhbmdpbmcgYmVoYXZpb3JcbiAgICBpZiAoZWxlbWVudC5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIGlmICghc2tpcENsaWNrKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2xpY2soZWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChpbml0aWFsU2VsZWN0aW9uU3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRTZWxlY3Rpb25SYW5nZS5zZXRTZWxlY3Rpb25SYW5nZShlbGVtZW50LCBpbml0aWFsU2VsZWN0aW9uU3RhcnQsIGluaXRpYWxTZWxlY3Rpb25FbmQgIT09IG51bGwgJiYgaW5pdGlhbFNlbGVjdGlvbkVuZCAhPT0gdm9pZCAwID8gaW5pdGlhbFNlbGVjdGlvbkVuZCA6IGluaXRpYWxTZWxlY3Rpb25TdGFydCk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMua2V5Ym9hcmQodGV4dCk7XG4gICAgaWYgKCFza2lwQXV0b0Nsb3NlKSB7XG4gICAgICAgIGF3YWl0IGluZGV4LnJlbGVhc2VBbGxLZXlzKHRoaXMpO1xuICAgIH1cbn1cblxuZXhwb3J0cy50eXBlID0gdHlwZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBRTdELElBQUlDLEtBQUssR0FBR0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQzNDQSxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFDN0NBLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQztBQUM3Q0EsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBQ3RDQSxPQUFPLENBQUMsNEJBQTRCLENBQUM7QUFDckNBLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQztBQUMvQ0EsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO0FBQ2hEQSxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDakNBLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDeEIsSUFBSUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQztBQUUxRSxlQUFlRSxJQUFJQSxDQUFDQyxPQUFPLEVBQUVDLElBQUksRUFBRTtFQUFFQyxTQUFTLEdBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUNELFNBQVM7RUFBRUUsYUFBYSxHQUFHLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxhQUFhO0VBQUVDLHFCQUFxQjtFQUFFQztBQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDbEs7RUFDQTtFQUNBLElBQUlOLE9BQU8sQ0FBQ08sUUFBUSxFQUFFO0VBQ3RCLElBQUksQ0FBQ0wsU0FBUyxFQUFFO0lBQ1osTUFBTSxJQUFJLENBQUNNLEtBQUssQ0FBQ1IsT0FBTyxDQUFDO0VBQzdCO0VBQ0EsSUFBSUsscUJBQXFCLEtBQUtJLFNBQVMsRUFBRTtJQUNyQ1gsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDRSxPQUFPLEVBQUVLLHFCQUFxQixFQUFFQyxtQkFBbUIsS0FBSyxJQUFJLElBQUlBLG1CQUFtQixLQUFLLEtBQUssQ0FBQyxHQUFHQSxtQkFBbUIsR0FBR0QscUJBQXFCLENBQUM7RUFDckw7RUFDQSxNQUFNLElBQUksQ0FBQ0ssUUFBUSxDQUFDVCxJQUFJLENBQUM7RUFDekIsSUFBSSxDQUFDRyxhQUFhLEVBQUU7SUFDaEIsTUFBTVIsS0FBSyxDQUFDZSxjQUFjLENBQUMsSUFBSSxDQUFDO0VBQ3BDO0FBQ0o7QUFFQWpCLE9BQU8sQ0FBQ0ssSUFBSSxHQUFHQSxJQUFJIn0=