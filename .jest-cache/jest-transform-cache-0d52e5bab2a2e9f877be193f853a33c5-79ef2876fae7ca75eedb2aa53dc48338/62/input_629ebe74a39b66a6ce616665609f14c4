a0bc96c68c23ebebc2c89801c2995afc
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var UI = require('../document/UI.js');
require('../utils/click/isClickableInput.js');
require('../utils/dataTransfer/Clipboard.js');
var timeValue = require('../utils/edit/timeValue.js');
require('../utils/edit/isEditable.js');
var maxLength = require('../utils/edit/maxLength.js');
var cursor = require('../utils/focus/cursor.js');
var isElementType = require('../utils/misc/isElementType.js');
require('@testing-library/dom/dist/helpers.js');
require('../utils/keyDef/readNextDescriptor.js');
require('../utils/misc/level.js');
require('../options.js');
var trackValue = require('../document/trackValue.js');
var getInputRange = require('./selection/getInputRange.js');
var setSelection = require('./selection/setSelection.js');
function isDateOrTime(element) {
  return isElementType.isElementType(element, 'input') && ['date', 'time'].includes(element.type);
}
function input(instance, element, data, inputType = 'insertText') {
  const inputRange = getInputRange.getInputRange(element);
  /* istanbul ignore if */
  if (!inputRange) {
    return;
  }
  // There is no `beforeinput` event on `date` and `time` input
  if (!isDateOrTime(element)) {
    const unprevented = instance.dispatchUIEvent(element, 'beforeinput', {
      inputType,
      data
    });
    if (!unprevented) {
      return;
    }
  }
  if ('startContainer' in inputRange) {
    editContenteditable(instance, element, inputRange, data, inputType);
  } else {
    editInputElement(instance, element, inputRange, data, inputType);
  }
}
function editContenteditable(instance, element, inputRange, data, inputType) {
  let del = false;
  if (!inputRange.collapsed) {
    del = true;
    inputRange.deleteContents();
  } else if (['deleteContentBackward', 'deleteContentForward'].includes(inputType)) {
    const nextPosition = cursor.getNextCursorPosition(inputRange.startContainer, inputRange.startOffset, inputType === 'deleteContentBackward' ? -1 : 1, inputType);
    if (nextPosition) {
      del = true;
      const delRange = inputRange.cloneRange();
      if (delRange.comparePoint(nextPosition.node, nextPosition.offset) < 0) {
        delRange.setStart(nextPosition.node, nextPosition.offset);
      } else {
        delRange.setEnd(nextPosition.node, nextPosition.offset);
      }
      delRange.deleteContents();
    }
  }
  if (data) {
    if (inputRange.endContainer.nodeType === 3) {
      const offset = inputRange.endOffset;
      inputRange.endContainer.insertData(offset, data);
      inputRange.setStart(inputRange.endContainer, offset + data.length);
      inputRange.setEnd(inputRange.endContainer, offset + data.length);
    } else {
      const text = element.ownerDocument.createTextNode(data);
      inputRange.insertNode(text);
      inputRange.setStart(text, data.length);
      inputRange.setEnd(text, data.length);
    }
  }
  if (del || data) {
    instance.dispatchUIEvent(element, 'input', {
      inputType
    });
  }
}
function editInputElement(instance, element, inputRange, data, inputType) {
  let dataToInsert = data;
  if (maxLength.supportsMaxLength(element)) {
    const maxLength$1 = maxLength.getMaxLength(element);
    if (maxLength$1 !== undefined && data.length > 0) {
      const spaceUntilMaxLength = maxLength$1 - element.value.length;
      if (spaceUntilMaxLength > 0) {
        dataToInsert = data.substring(0, spaceUntilMaxLength);
      } else {
        return;
      }
    }
  }
  const {
    newValue,
    newOffset,
    oldValue
  } = calculateNewValue(dataToInsert, element, inputRange, inputType);
  if (newValue === oldValue && newOffset === inputRange.startOffset && newOffset === inputRange.endOffset) {
    return;
  }
  if (isElementType.isElementType(element, 'input', {
    type: 'number'
  }) && !isValidNumberInput(newValue)) {
    return;
  }
  UI.setUIValue(element, newValue);
  setSelection.setSelection({
    focusNode: element,
    anchorOffset: newOffset,
    focusOffset: newOffset
  });
  if (isDateOrTime(element)) {
    if (timeValue.isValidDateOrTimeValue(element, newValue)) {
      commitInput(instance, element, newOffset, {});
      instance.dispatchUIEvent(element, 'change');
      UI.clearInitialValue(element);
    }
  } else {
    commitInput(instance, element, newOffset, {
      data,
      inputType
    });
  }
}
function calculateNewValue(inputData, node, {
  startOffset,
  endOffset
}, inputType) {
  const value = UI.getUIValue(node);
  const prologEnd = Math.max(0, startOffset === endOffset && inputType === 'deleteContentBackward' ? startOffset - 1 : startOffset);
  const prolog = value.substring(0, prologEnd);
  const epilogStart = Math.min(value.length, startOffset === endOffset && inputType === 'deleteContentForward' ? startOffset + 1 : endOffset);
  const epilog = value.substring(epilogStart, value.length);
  let newValue = `${prolog}${inputData}${epilog}`;
  let newOffset = prologEnd + inputData.length;
  if (isElementType.isElementType(node, 'input', {
    type: 'time'
  })) {
    const builtValue = timeValue.buildTimeValue(newValue);
    if (builtValue !== '' && timeValue.isValidDateOrTimeValue(node, builtValue)) {
      newValue = builtValue;
      newOffset = builtValue.length;
    }
  }
  return {
    oldValue: value,
    newValue,
    newOffset
  };
}
function commitInput(instance, element, newOffset, inputInit) {
  instance.dispatchUIEvent(element, 'input', inputInit);
  trackValue.commitValueAfterInput(element, newOffset);
}
function isValidNumberInput(value) {
  var _value_match, _value_match1;
  // the browser allows some invalid input but not others
  // it allows up to two '-' at any place before any 'e' or one directly following 'e'
  // it allows one '.' at any place before e
  const valueParts = value.split('e', 2);
  return !(/[^\d.\-e]/.test(value) || Number((_value_match = value.match(/-/g)) === null || _value_match === void 0 ? void 0 : _value_match.length) > 2 || Number((_value_match1 = value.match(/\./g)) === null || _value_match1 === void 0 ? void 0 : _value_match1.length) > 1 || valueParts[1] && !/^-?\d*$/.test(valueParts[1]));
}
exports.input = input;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVJIiwicmVxdWlyZSIsInRpbWVWYWx1ZSIsIm1heExlbmd0aCIsImN1cnNvciIsImlzRWxlbWVudFR5cGUiLCJ0cmFja1ZhbHVlIiwiZ2V0SW5wdXRSYW5nZSIsInNldFNlbGVjdGlvbiIsImlzRGF0ZU9yVGltZSIsImVsZW1lbnQiLCJpbmNsdWRlcyIsInR5cGUiLCJpbnB1dCIsImluc3RhbmNlIiwiZGF0YSIsImlucHV0VHlwZSIsImlucHV0UmFuZ2UiLCJ1bnByZXZlbnRlZCIsImRpc3BhdGNoVUlFdmVudCIsImVkaXRDb250ZW50ZWRpdGFibGUiLCJlZGl0SW5wdXRFbGVtZW50IiwiZGVsIiwiY29sbGFwc2VkIiwiZGVsZXRlQ29udGVudHMiLCJuZXh0UG9zaXRpb24iLCJnZXROZXh0Q3Vyc29yUG9zaXRpb24iLCJzdGFydENvbnRhaW5lciIsInN0YXJ0T2Zmc2V0IiwiZGVsUmFuZ2UiLCJjbG9uZVJhbmdlIiwiY29tcGFyZVBvaW50Iiwibm9kZSIsIm9mZnNldCIsInNldFN0YXJ0Iiwic2V0RW5kIiwiZW5kQ29udGFpbmVyIiwibm9kZVR5cGUiLCJlbmRPZmZzZXQiLCJpbnNlcnREYXRhIiwibGVuZ3RoIiwidGV4dCIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImluc2VydE5vZGUiLCJkYXRhVG9JbnNlcnQiLCJzdXBwb3J0c01heExlbmd0aCIsIm1heExlbmd0aCQxIiwiZ2V0TWF4TGVuZ3RoIiwidW5kZWZpbmVkIiwic3BhY2VVbnRpbE1heExlbmd0aCIsInN1YnN0cmluZyIsIm5ld1ZhbHVlIiwibmV3T2Zmc2V0Iiwib2xkVmFsdWUiLCJjYWxjdWxhdGVOZXdWYWx1ZSIsImlzVmFsaWROdW1iZXJJbnB1dCIsInNldFVJVmFsdWUiLCJmb2N1c05vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c09mZnNldCIsImlzVmFsaWREYXRlT3JUaW1lVmFsdWUiLCJjb21taXRJbnB1dCIsImNsZWFySW5pdGlhbFZhbHVlIiwiaW5wdXREYXRhIiwiZ2V0VUlWYWx1ZSIsInByb2xvZ0VuZCIsIk1hdGgiLCJtYXgiLCJwcm9sb2ciLCJlcGlsb2dTdGFydCIsIm1pbiIsImVwaWxvZyIsImJ1aWx0VmFsdWUiLCJidWlsZFRpbWVWYWx1ZSIsImlucHV0SW5pdCIsImNvbW1pdFZhbHVlQWZ0ZXJJbnB1dCIsIl92YWx1ZV9tYXRjaCIsIl92YWx1ZV9tYXRjaDEiLCJ2YWx1ZVBhcnRzIiwic3BsaXQiLCJ0ZXN0IiwiTnVtYmVyIiwibWF0Y2giXSwic291cmNlcyI6WyJpbnB1dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBVSSA9IHJlcXVpcmUoJy4uL2RvY3VtZW50L1VJLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9jbGljay9pc0NsaWNrYWJsZUlucHV0LmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgdGltZVZhbHVlID0gcmVxdWlyZSgnLi4vdXRpbHMvZWRpdC90aW1lVmFsdWUuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2VkaXQvaXNFZGl0YWJsZS5qcycpO1xudmFyIG1heExlbmd0aCA9IHJlcXVpcmUoJy4uL3V0aWxzL2VkaXQvbWF4TGVuZ3RoLmpzJyk7XG52YXIgY3Vyc29yID0gcmVxdWlyZSgnLi4vdXRpbHMvZm9jdXMvY3Vyc29yLmpzJyk7XG52YXIgaXNFbGVtZW50VHlwZSA9IHJlcXVpcmUoJy4uL3V0aWxzL21pc2MvaXNFbGVtZW50VHlwZS5qcycpO1xucmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9oZWxwZXJzLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9rZXlEZWYvcmVhZE5leHREZXNjcmlwdG9yLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9taXNjL2xldmVsLmpzJyk7XG5yZXF1aXJlKCcuLi9vcHRpb25zLmpzJyk7XG52YXIgdHJhY2tWYWx1ZSA9IHJlcXVpcmUoJy4uL2RvY3VtZW50L3RyYWNrVmFsdWUuanMnKTtcbnZhciBnZXRJbnB1dFJhbmdlID0gcmVxdWlyZSgnLi9zZWxlY3Rpb24vZ2V0SW5wdXRSYW5nZS5qcycpO1xudmFyIHNldFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vc2VsZWN0aW9uL3NldFNlbGVjdGlvbi5qcycpO1xuXG5mdW5jdGlvbiBpc0RhdGVPclRpbWUoZWxlbWVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUoZWxlbWVudCwgJ2lucHV0JykgJiYgW1xuICAgICAgICAnZGF0ZScsXG4gICAgICAgICd0aW1lJ1xuICAgIF0uaW5jbHVkZXMoZWxlbWVudC50eXBlKTtcbn1cbmZ1bmN0aW9uIGlucHV0KGluc3RhbmNlLCBlbGVtZW50LCBkYXRhLCBpbnB1dFR5cGUgPSAnaW5zZXJ0VGV4dCcpIHtcbiAgICBjb25zdCBpbnB1dFJhbmdlID0gZ2V0SW5wdXRSYW5nZS5nZXRJbnB1dFJhbmdlKGVsZW1lbnQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyBpZiAoIWlucHV0UmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBUaGVyZSBpcyBubyBgYmVmb3JlaW5wdXRgIGV2ZW50IG9uIGBkYXRlYCBhbmQgYHRpbWVgIGlucHV0XG4gICAgaWYgKCFpc0RhdGVPclRpbWUoZWxlbWVudCkpIHtcbiAgICAgICAgY29uc3QgdW5wcmV2ZW50ZWQgPSBpbnN0YW5jZS5kaXNwYXRjaFVJRXZlbnQoZWxlbWVudCwgJ2JlZm9yZWlucHV0Jywge1xuICAgICAgICAgICAgaW5wdXRUeXBlLFxuICAgICAgICAgICAgZGF0YVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF1bnByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgnc3RhcnRDb250YWluZXInIGluIGlucHV0UmFuZ2UpIHtcbiAgICAgICAgZWRpdENvbnRlbnRlZGl0YWJsZShpbnN0YW5jZSwgZWxlbWVudCwgaW5wdXRSYW5nZSwgZGF0YSwgaW5wdXRUeXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlZGl0SW5wdXRFbGVtZW50KGluc3RhbmNlLCBlbGVtZW50LCBpbnB1dFJhbmdlLCBkYXRhLCBpbnB1dFR5cGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVkaXRDb250ZW50ZWRpdGFibGUoaW5zdGFuY2UsIGVsZW1lbnQsIGlucHV0UmFuZ2UsIGRhdGEsIGlucHV0VHlwZSkge1xuICAgIGxldCBkZWwgPSBmYWxzZTtcbiAgICBpZiAoIWlucHV0UmFuZ2UuY29sbGFwc2VkKSB7XG4gICAgICAgIGRlbCA9IHRydWU7XG4gICAgICAgIGlucHV0UmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcbiAgICB9IGVsc2UgaWYgKFtcbiAgICAgICAgJ2RlbGV0ZUNvbnRlbnRCYWNrd2FyZCcsXG4gICAgICAgICdkZWxldGVDb250ZW50Rm9yd2FyZCdcbiAgICBdLmluY2x1ZGVzKGlucHV0VHlwZSkpIHtcbiAgICAgICAgY29uc3QgbmV4dFBvc2l0aW9uID0gY3Vyc29yLmdldE5leHRDdXJzb3JQb3NpdGlvbihpbnB1dFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBpbnB1dFJhbmdlLnN0YXJ0T2Zmc2V0LCBpbnB1dFR5cGUgPT09ICdkZWxldGVDb250ZW50QmFja3dhcmQnID8gLTEgOiAxLCBpbnB1dFR5cGUpO1xuICAgICAgICBpZiAobmV4dFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBkZWwgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgZGVsUmFuZ2UgPSBpbnB1dFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICAgIGlmIChkZWxSYW5nZS5jb21wYXJlUG9pbnQobmV4dFBvc2l0aW9uLm5vZGUsIG5leHRQb3NpdGlvbi5vZmZzZXQpIDwgMCkge1xuICAgICAgICAgICAgICAgIGRlbFJhbmdlLnNldFN0YXJ0KG5leHRQb3NpdGlvbi5ub2RlLCBuZXh0UG9zaXRpb24ub2Zmc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsUmFuZ2Uuc2V0RW5kKG5leHRQb3NpdGlvbi5ub2RlLCBuZXh0UG9zaXRpb24ub2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbFJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgaWYgKGlucHV0UmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpbnB1dFJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgIGlucHV0UmFuZ2UuZW5kQ29udGFpbmVyLmluc2VydERhdGEob2Zmc2V0LCBkYXRhKTtcbiAgICAgICAgICAgIGlucHV0UmFuZ2Uuc2V0U3RhcnQoaW5wdXRSYW5nZS5lbmRDb250YWluZXIsIG9mZnNldCArIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgIGlucHV0UmFuZ2Uuc2V0RW5kKGlucHV0UmFuZ2UuZW5kQ29udGFpbmVyLCBvZmZzZXQgKyBkYXRhLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xuICAgICAgICAgICAgaW5wdXRSYW5nZS5pbnNlcnROb2RlKHRleHQpO1xuICAgICAgICAgICAgaW5wdXRSYW5nZS5zZXRTdGFydCh0ZXh0LCBkYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICBpbnB1dFJhbmdlLnNldEVuZCh0ZXh0LCBkYXRhLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlbCB8fCBkYXRhKSB7XG4gICAgICAgIGluc3RhbmNlLmRpc3BhdGNoVUlFdmVudChlbGVtZW50LCAnaW5wdXQnLCB7XG4gICAgICAgICAgICBpbnB1dFR5cGVcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWRpdElucHV0RWxlbWVudChpbnN0YW5jZSwgZWxlbWVudCwgaW5wdXRSYW5nZSwgZGF0YSwgaW5wdXRUeXBlKSB7XG4gICAgbGV0IGRhdGFUb0luc2VydCA9IGRhdGE7XG4gICAgaWYgKG1heExlbmd0aC5zdXBwb3J0c01heExlbmd0aChlbGVtZW50KSkge1xuICAgICAgICBjb25zdCBtYXhMZW5ndGgkMSA9IG1heExlbmd0aC5nZXRNYXhMZW5ndGgoZWxlbWVudCk7XG4gICAgICAgIGlmIChtYXhMZW5ndGgkMSAhPT0gdW5kZWZpbmVkICYmIGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc3BhY2VVbnRpbE1heExlbmd0aCA9IG1heExlbmd0aCQxIC0gZWxlbWVudC52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc3BhY2VVbnRpbE1heExlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkYXRhVG9JbnNlcnQgPSBkYXRhLnN1YnN0cmluZygwLCBzcGFjZVVudGlsTWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsgbmV3VmFsdWUsIG5ld09mZnNldCwgb2xkVmFsdWUgfSA9IGNhbGN1bGF0ZU5ld1ZhbHVlKGRhdGFUb0luc2VydCwgZWxlbWVudCwgaW5wdXRSYW5nZSwgaW5wdXRUeXBlKTtcbiAgICBpZiAobmV3VmFsdWUgPT09IG9sZFZhbHVlICYmIG5ld09mZnNldCA9PT0gaW5wdXRSYW5nZS5zdGFydE9mZnNldCAmJiBuZXdPZmZzZXQgPT09IGlucHV0UmFuZ2UuZW5kT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZShlbGVtZW50LCAnaW5wdXQnLCB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgfSkgJiYgIWlzVmFsaWROdW1iZXJJbnB1dChuZXdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBVSS5zZXRVSVZhbHVlKGVsZW1lbnQsIG5ld1ZhbHVlKTtcbiAgICBzZXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHtcbiAgICAgICAgZm9jdXNOb2RlOiBlbGVtZW50LFxuICAgICAgICBhbmNob3JPZmZzZXQ6IG5ld09mZnNldCxcbiAgICAgICAgZm9jdXNPZmZzZXQ6IG5ld09mZnNldFxuICAgIH0pO1xuICAgIGlmIChpc0RhdGVPclRpbWUoZWxlbWVudCkpIHtcbiAgICAgICAgaWYgKHRpbWVWYWx1ZS5pc1ZhbGlkRGF0ZU9yVGltZVZhbHVlKGVsZW1lbnQsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgY29tbWl0SW5wdXQoaW5zdGFuY2UsIGVsZW1lbnQsIG5ld09mZnNldCwge30pO1xuICAgICAgICAgICAgaW5zdGFuY2UuZGlzcGF0Y2hVSUV2ZW50KGVsZW1lbnQsICdjaGFuZ2UnKTtcbiAgICAgICAgICAgIFVJLmNsZWFySW5pdGlhbFZhbHVlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tbWl0SW5wdXQoaW5zdGFuY2UsIGVsZW1lbnQsIG5ld09mZnNldCwge1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGlucHV0VHlwZVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVOZXdWYWx1ZShpbnB1dERhdGEsIG5vZGUsIHsgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCB9LCBpbnB1dFR5cGUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IFVJLmdldFVJVmFsdWUobm9kZSk7XG4gICAgY29uc3QgcHJvbG9nRW5kID0gTWF0aC5tYXgoMCwgc3RhcnRPZmZzZXQgPT09IGVuZE9mZnNldCAmJiBpbnB1dFR5cGUgPT09ICdkZWxldGVDb250ZW50QmFja3dhcmQnID8gc3RhcnRPZmZzZXQgLSAxIDogc3RhcnRPZmZzZXQpO1xuICAgIGNvbnN0IHByb2xvZyA9IHZhbHVlLnN1YnN0cmluZygwLCBwcm9sb2dFbmQpO1xuICAgIGNvbnN0IGVwaWxvZ1N0YXJ0ID0gTWF0aC5taW4odmFsdWUubGVuZ3RoLCBzdGFydE9mZnNldCA9PT0gZW5kT2Zmc2V0ICYmIGlucHV0VHlwZSA9PT0gJ2RlbGV0ZUNvbnRlbnRGb3J3YXJkJyA/IHN0YXJ0T2Zmc2V0ICsgMSA6IGVuZE9mZnNldCk7XG4gICAgY29uc3QgZXBpbG9nID0gdmFsdWUuc3Vic3RyaW5nKGVwaWxvZ1N0YXJ0LCB2YWx1ZS5sZW5ndGgpO1xuICAgIGxldCBuZXdWYWx1ZSA9IGAke3Byb2xvZ30ke2lucHV0RGF0YX0ke2VwaWxvZ31gO1xuICAgIGxldCBuZXdPZmZzZXQgPSBwcm9sb2dFbmQgKyBpbnB1dERhdGEubGVuZ3RoO1xuICAgIGlmIChpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUobm9kZSwgJ2lucHV0Jywge1xuICAgICAgICB0eXBlOiAndGltZSdcbiAgICB9KSkge1xuICAgICAgICBjb25zdCBidWlsdFZhbHVlID0gdGltZVZhbHVlLmJ1aWxkVGltZVZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKGJ1aWx0VmFsdWUgIT09ICcnICYmIHRpbWVWYWx1ZS5pc1ZhbGlkRGF0ZU9yVGltZVZhbHVlKG5vZGUsIGJ1aWx0VmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGJ1aWx0VmFsdWU7XG4gICAgICAgICAgICBuZXdPZmZzZXQgPSBidWlsdFZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBvbGRWYWx1ZTogdmFsdWUsXG4gICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICBuZXdPZmZzZXRcbiAgICB9O1xufVxuZnVuY3Rpb24gY29tbWl0SW5wdXQoaW5zdGFuY2UsIGVsZW1lbnQsIG5ld09mZnNldCwgaW5wdXRJbml0KSB7XG4gICAgaW5zdGFuY2UuZGlzcGF0Y2hVSUV2ZW50KGVsZW1lbnQsICdpbnB1dCcsIGlucHV0SW5pdCk7XG4gICAgdHJhY2tWYWx1ZS5jb21taXRWYWx1ZUFmdGVySW5wdXQoZWxlbWVudCwgbmV3T2Zmc2V0KTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWROdW1iZXJJbnB1dCh2YWx1ZSkge1xuICAgIHZhciBfdmFsdWVfbWF0Y2gsIF92YWx1ZV9tYXRjaDE7XG4gICAgLy8gdGhlIGJyb3dzZXIgYWxsb3dzIHNvbWUgaW52YWxpZCBpbnB1dCBidXQgbm90IG90aGVyc1xuICAgIC8vIGl0IGFsbG93cyB1cCB0byB0d28gJy0nIGF0IGFueSBwbGFjZSBiZWZvcmUgYW55ICdlJyBvciBvbmUgZGlyZWN0bHkgZm9sbG93aW5nICdlJ1xuICAgIC8vIGl0IGFsbG93cyBvbmUgJy4nIGF0IGFueSBwbGFjZSBiZWZvcmUgZVxuICAgIGNvbnN0IHZhbHVlUGFydHMgPSB2YWx1ZS5zcGxpdCgnZScsIDIpO1xuICAgIHJldHVybiAhKC9bXlxcZC5cXC1lXS8udGVzdCh2YWx1ZSkgfHwgTnVtYmVyKChfdmFsdWVfbWF0Y2ggPSB2YWx1ZS5tYXRjaCgvLS9nKSkgPT09IG51bGwgfHwgX3ZhbHVlX21hdGNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdmFsdWVfbWF0Y2gubGVuZ3RoKSA+IDIgfHwgTnVtYmVyKChfdmFsdWVfbWF0Y2gxID0gdmFsdWUubWF0Y2goL1xcLi9nKSkgPT09IG51bGwgfHwgX3ZhbHVlX21hdGNoMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZhbHVlX21hdGNoMS5sZW5ndGgpID4gMSB8fCB2YWx1ZVBhcnRzWzFdICYmICEvXi0/XFxkKiQvLnRlc3QodmFsdWVQYXJ0c1sxXSkpO1xufVxuXG5leHBvcnRzLmlucHV0ID0gaW5wdXQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VB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